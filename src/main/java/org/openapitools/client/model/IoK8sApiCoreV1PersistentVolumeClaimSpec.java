/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoK8sApiCoreV1TypedLocalObjectReference;
import org.openapitools.client.model.IoK8sApiCoreV1TypedObjectReference;
import org.openapitools.client.model.IoK8sApiCoreV1VolumeResourceRequirements;
import org.openapitools.client.model.IoK8sApimachineryPkgApisMetaV1LabelSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoK8sApiCoreV1PersistentVolumeClaimSpec {
  public static final String SERIALIZED_NAME_ACCESS_MODES = "accessModes";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODES)
  @javax.annotation.Nullable
  private List<String> accessModes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1TypedLocalObjectReference dataSource;

  public static final String SERIALIZED_NAME_DATA_SOURCE_REF = "dataSourceRef";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_REF)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1TypedObjectReference dataSourceRef;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1VolumeResourceRequirements resources;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  @javax.annotation.Nullable
  private IoK8sApimachineryPkgApisMetaV1LabelSelector selector;

  public static final String SERIALIZED_NAME_STORAGE_CLASS_NAME = "storageClassName";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS_NAME)
  @javax.annotation.Nullable
  private String storageClassName;

  public static final String SERIALIZED_NAME_VOLUME_ATTRIBUTES_CLASS_NAME = "volumeAttributesClassName";
  @SerializedName(SERIALIZED_NAME_VOLUME_ATTRIBUTES_CLASS_NAME)
  @javax.annotation.Nullable
  private String volumeAttributesClassName;

  public static final String SERIALIZED_NAME_VOLUME_MODE = "volumeMode";
  @SerializedName(SERIALIZED_NAME_VOLUME_MODE)
  @javax.annotation.Nullable
  private String volumeMode;

  public static final String SERIALIZED_NAME_VOLUME_NAME = "volumeName";
  @SerializedName(SERIALIZED_NAME_VOLUME_NAME)
  @javax.annotation.Nullable
  private String volumeName;

  public IoK8sApiCoreV1PersistentVolumeClaimSpec() {
  }

  public IoK8sApiCoreV1PersistentVolumeClaimSpec accessModes(@javax.annotation.Nullable List<String> accessModes) {
    this.accessModes = accessModes;
    return this;
  }

  public IoK8sApiCoreV1PersistentVolumeClaimSpec addAccessModesItem(String accessModesItem) {
    if (this.accessModes == null) {
      this.accessModes = new ArrayList<>();
    }
    this.accessModes.add(accessModesItem);
    return this;
  }

  /**
   * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   * @return accessModes
   */
  @javax.annotation.Nullable
  public List<String> getAccessModes() {
    return accessModes;
  }

  public void setAccessModes(@javax.annotation.Nullable List<String> accessModes) {
    this.accessModes = accessModes;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec dataSource(@javax.annotation.Nullable IoK8sApiCoreV1TypedLocalObjectReference dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1TypedLocalObjectReference getDataSource() {
    return dataSource;
  }

  public void setDataSource(@javax.annotation.Nullable IoK8sApiCoreV1TypedLocalObjectReference dataSource) {
    this.dataSource = dataSource;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec dataSourceRef(@javax.annotation.Nullable IoK8sApiCoreV1TypedObjectReference dataSourceRef) {
    this.dataSourceRef = dataSourceRef;
    return this;
  }

  /**
   * Get dataSourceRef
   * @return dataSourceRef
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1TypedObjectReference getDataSourceRef() {
    return dataSourceRef;
  }

  public void setDataSourceRef(@javax.annotation.Nullable IoK8sApiCoreV1TypedObjectReference dataSourceRef) {
    this.dataSourceRef = dataSourceRef;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec resources(@javax.annotation.Nullable IoK8sApiCoreV1VolumeResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1VolumeResourceRequirements getResources() {
    return resources;
  }

  public void setResources(@javax.annotation.Nullable IoK8sApiCoreV1VolumeResourceRequirements resources) {
    this.resources = resources;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec selector(@javax.annotation.Nullable IoK8sApimachineryPkgApisMetaV1LabelSelector selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Get selector
   * @return selector
   */
  @javax.annotation.Nullable
  public IoK8sApimachineryPkgApisMetaV1LabelSelector getSelector() {
    return selector;
  }

  public void setSelector(@javax.annotation.Nullable IoK8sApimachineryPkgApisMetaV1LabelSelector selector) {
    this.selector = selector;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec storageClassName(@javax.annotation.Nullable String storageClassName) {
    this.storageClassName = storageClassName;
    return this;
  }

  /**
   * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
   * @return storageClassName
   */
  @javax.annotation.Nullable
  public String getStorageClassName() {
    return storageClassName;
  }

  public void setStorageClassName(@javax.annotation.Nullable String storageClassName) {
    this.storageClassName = storageClassName;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec volumeAttributesClassName(@javax.annotation.Nullable String volumeAttributesClassName) {
    this.volumeAttributesClassName = volumeAttributesClassName;
    return this;
  }

  /**
   * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it&#39;s not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
   * @return volumeAttributesClassName
   */
  @javax.annotation.Nullable
  public String getVolumeAttributesClassName() {
    return volumeAttributesClassName;
  }

  public void setVolumeAttributesClassName(@javax.annotation.Nullable String volumeAttributesClassName) {
    this.volumeAttributesClassName = volumeAttributesClassName;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec volumeMode(@javax.annotation.Nullable String volumeMode) {
    this.volumeMode = volumeMode;
    return this;
  }

  /**
   * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
   * @return volumeMode
   */
  @javax.annotation.Nullable
  public String getVolumeMode() {
    return volumeMode;
  }

  public void setVolumeMode(@javax.annotation.Nullable String volumeMode) {
    this.volumeMode = volumeMode;
  }


  public IoK8sApiCoreV1PersistentVolumeClaimSpec volumeName(@javax.annotation.Nullable String volumeName) {
    this.volumeName = volumeName;
    return this;
  }

  /**
   * volumeName is the binding reference to the PersistentVolume backing this claim.
   * @return volumeName
   */
  @javax.annotation.Nullable
  public String getVolumeName() {
    return volumeName;
  }

  public void setVolumeName(@javax.annotation.Nullable String volumeName) {
    this.volumeName = volumeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1PersistentVolumeClaimSpec ioK8sApiCoreV1PersistentVolumeClaimSpec = (IoK8sApiCoreV1PersistentVolumeClaimSpec) o;
    return Objects.equals(this.accessModes, ioK8sApiCoreV1PersistentVolumeClaimSpec.accessModes) &&
        Objects.equals(this.dataSource, ioK8sApiCoreV1PersistentVolumeClaimSpec.dataSource) &&
        Objects.equals(this.dataSourceRef, ioK8sApiCoreV1PersistentVolumeClaimSpec.dataSourceRef) &&
        Objects.equals(this.resources, ioK8sApiCoreV1PersistentVolumeClaimSpec.resources) &&
        Objects.equals(this.selector, ioK8sApiCoreV1PersistentVolumeClaimSpec.selector) &&
        Objects.equals(this.storageClassName, ioK8sApiCoreV1PersistentVolumeClaimSpec.storageClassName) &&
        Objects.equals(this.volumeAttributesClassName, ioK8sApiCoreV1PersistentVolumeClaimSpec.volumeAttributesClassName) &&
        Objects.equals(this.volumeMode, ioK8sApiCoreV1PersistentVolumeClaimSpec.volumeMode) &&
        Objects.equals(this.volumeName, ioK8sApiCoreV1PersistentVolumeClaimSpec.volumeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessModes, dataSource, dataSourceRef, resources, selector, storageClassName, volumeAttributesClassName, volumeMode, volumeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1PersistentVolumeClaimSpec {\n");
    sb.append("    accessModes: ").append(toIndentedString(accessModes)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dataSourceRef: ").append(toIndentedString(dataSourceRef)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    storageClassName: ").append(toIndentedString(storageClassName)).append("\n");
    sb.append("    volumeAttributesClassName: ").append(toIndentedString(volumeAttributesClassName)).append("\n");
    sb.append("    volumeMode: ").append(toIndentedString(volumeMode)).append("\n");
    sb.append("    volumeName: ").append(toIndentedString(volumeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessModes");
    openapiFields.add("dataSource");
    openapiFields.add("dataSourceRef");
    openapiFields.add("resources");
    openapiFields.add("selector");
    openapiFields.add("storageClassName");
    openapiFields.add("volumeAttributesClassName");
    openapiFields.add("volumeMode");
    openapiFields.add("volumeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoK8sApiCoreV1PersistentVolumeClaimSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoK8sApiCoreV1PersistentVolumeClaimSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoK8sApiCoreV1PersistentVolumeClaimSpec is not found in the empty JSON string", IoK8sApiCoreV1PersistentVolumeClaimSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoK8sApiCoreV1PersistentVolumeClaimSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoK8sApiCoreV1PersistentVolumeClaimSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessModes") != null && !jsonObj.get("accessModes").isJsonNull() && !jsonObj.get("accessModes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessModes` to be an array in the JSON string but got `%s`", jsonObj.get("accessModes").toString()));
      }
      // validate the optional field `dataSource`
      if (jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) {
        IoK8sApiCoreV1TypedLocalObjectReference.validateJsonElement(jsonObj.get("dataSource"));
      }
      // validate the optional field `dataSourceRef`
      if (jsonObj.get("dataSourceRef") != null && !jsonObj.get("dataSourceRef").isJsonNull()) {
        IoK8sApiCoreV1TypedObjectReference.validateJsonElement(jsonObj.get("dataSourceRef"));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        IoK8sApiCoreV1VolumeResourceRequirements.validateJsonElement(jsonObj.get("resources"));
      }
      // validate the optional field `selector`
      if (jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) {
        IoK8sApimachineryPkgApisMetaV1LabelSelector.validateJsonElement(jsonObj.get("selector"));
      }
      if ((jsonObj.get("storageClassName") != null && !jsonObj.get("storageClassName").isJsonNull()) && !jsonObj.get("storageClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClassName").toString()));
      }
      if ((jsonObj.get("volumeAttributesClassName") != null && !jsonObj.get("volumeAttributesClassName").isJsonNull()) && !jsonObj.get("volumeAttributesClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeAttributesClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeAttributesClassName").toString()));
      }
      if ((jsonObj.get("volumeMode") != null && !jsonObj.get("volumeMode").isJsonNull()) && !jsonObj.get("volumeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeMode").toString()));
      }
      if ((jsonObj.get("volumeName") != null && !jsonObj.get("volumeName").isJsonNull()) && !jsonObj.get("volumeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoK8sApiCoreV1PersistentVolumeClaimSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoK8sApiCoreV1PersistentVolumeClaimSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoK8sApiCoreV1PersistentVolumeClaimSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoK8sApiCoreV1PersistentVolumeClaimSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<IoK8sApiCoreV1PersistentVolumeClaimSpec>() {
           @Override
           public void write(JsonWriter out, IoK8sApiCoreV1PersistentVolumeClaimSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoK8sApiCoreV1PersistentVolumeClaimSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoK8sApiCoreV1PersistentVolumeClaimSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoK8sApiCoreV1PersistentVolumeClaimSpec
   * @throws IOException if the JSON string is invalid with respect to IoK8sApiCoreV1PersistentVolumeClaimSpec
   */
  public static IoK8sApiCoreV1PersistentVolumeClaimSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoK8sApiCoreV1PersistentVolumeClaimSpec.class);
  }

  /**
   * Convert an instance of IoK8sApiCoreV1PersistentVolumeClaimSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

