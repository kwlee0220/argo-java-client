/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1BasicAuth;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1ClientCertAuth;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1OAuth2Auth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojWorkflowV1alpha1HTTPAuth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1HTTPAuth {
  public static final String SERIALIZED_NAME_BASIC_AUTH = "basicAuth";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1BasicAuth basicAuth;

  public static final String SERIALIZED_NAME_CLIENT_CERT = "clientCert";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERT)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1ClientCertAuth clientCert;

  public static final String SERIALIZED_NAME_OAUTH2 = "oauth2";
  @SerializedName(SERIALIZED_NAME_OAUTH2)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1OAuth2Auth oauth2;

  public IoArgoprojWorkflowV1alpha1HTTPAuth() {
  }

  public IoArgoprojWorkflowV1alpha1HTTPAuth basicAuth(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1BasicAuth basicAuth) {
    this.basicAuth = basicAuth;
    return this;
  }

  /**
   * Get basicAuth
   * @return basicAuth
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1BasicAuth getBasicAuth() {
    return basicAuth;
  }

  public void setBasicAuth(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1BasicAuth basicAuth) {
    this.basicAuth = basicAuth;
  }


  public IoArgoprojWorkflowV1alpha1HTTPAuth clientCert(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1ClientCertAuth clientCert) {
    this.clientCert = clientCert;
    return this;
  }

  /**
   * Get clientCert
   * @return clientCert
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1ClientCertAuth getClientCert() {
    return clientCert;
  }

  public void setClientCert(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1ClientCertAuth clientCert) {
    this.clientCert = clientCert;
  }


  public IoArgoprojWorkflowV1alpha1HTTPAuth oauth2(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1OAuth2Auth oauth2) {
    this.oauth2 = oauth2;
    return this;
  }

  /**
   * Get oauth2
   * @return oauth2
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1OAuth2Auth getOauth2() {
    return oauth2;
  }

  public void setOauth2(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1OAuth2Auth oauth2) {
    this.oauth2 = oauth2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1HTTPAuth ioArgoprojWorkflowV1alpha1HTTPAuth = (IoArgoprojWorkflowV1alpha1HTTPAuth) o;
    return Objects.equals(this.basicAuth, ioArgoprojWorkflowV1alpha1HTTPAuth.basicAuth) &&
        Objects.equals(this.clientCert, ioArgoprojWorkflowV1alpha1HTTPAuth.clientCert) &&
        Objects.equals(this.oauth2, ioArgoprojWorkflowV1alpha1HTTPAuth.oauth2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basicAuth, clientCert, oauth2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1HTTPAuth {\n");
    sb.append("    basicAuth: ").append(toIndentedString(basicAuth)).append("\n");
    sb.append("    clientCert: ").append(toIndentedString(clientCert)).append("\n");
    sb.append("    oauth2: ").append(toIndentedString(oauth2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basicAuth");
    openapiFields.add("clientCert");
    openapiFields.add("oauth2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1HTTPAuth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1HTTPAuth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1HTTPAuth is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1HTTPAuth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1HTTPAuth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1HTTPAuth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basicAuth`
      if (jsonObj.get("basicAuth") != null && !jsonObj.get("basicAuth").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1BasicAuth.validateJsonElement(jsonObj.get("basicAuth"));
      }
      // validate the optional field `clientCert`
      if (jsonObj.get("clientCert") != null && !jsonObj.get("clientCert").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1ClientCertAuth.validateJsonElement(jsonObj.get("clientCert"));
      }
      // validate the optional field `oauth2`
      if (jsonObj.get("oauth2") != null && !jsonObj.get("oauth2").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1OAuth2Auth.validateJsonElement(jsonObj.get("oauth2"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1HTTPAuth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1HTTPAuth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1HTTPAuth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1HTTPAuth.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1HTTPAuth>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1HTTPAuth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1HTTPAuth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1HTTPAuth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1HTTPAuth
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1HTTPAuth
   */
  public static IoArgoprojWorkflowV1alpha1HTTPAuth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1HTTPAuth.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1HTTPAuth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

