/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1DAGTask;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DAGTemplate is a template subtype for directed acyclic graph templates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1DAGTemplate {
  public static final String SERIALIZED_NAME_FAIL_FAST = "failFast";
  @SerializedName(SERIALIZED_NAME_FAIL_FAST)
  @javax.annotation.Nullable
  private Boolean failFast;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  @javax.annotation.Nullable
  private String target;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  @javax.annotation.Nonnull
  private List<IoArgoprojWorkflowV1alpha1DAGTask> tasks = new ArrayList<>();

  public IoArgoprojWorkflowV1alpha1DAGTemplate() {
  }

  public IoArgoprojWorkflowV1alpha1DAGTemplate failFast(@javax.annotation.Nullable Boolean failFast) {
    this.failFast = failFast;
    return this;
  }

  /**
   * This flag is for DAG logic. The DAG logic has a built-in \&quot;fail fast\&quot; feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442
   * @return failFast
   */
  @javax.annotation.Nullable
  public Boolean getFailFast() {
    return failFast;
  }

  public void setFailFast(@javax.annotation.Nullable Boolean failFast) {
    this.failFast = failFast;
  }


  public IoArgoprojWorkflowV1alpha1DAGTemplate target(@javax.annotation.Nullable String target) {
    this.target = target;
    return this;
  }

  /**
   * Target are one or more names of targets to execute in a DAG
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(@javax.annotation.Nullable String target) {
    this.target = target;
  }


  public IoArgoprojWorkflowV1alpha1DAGTemplate tasks(@javax.annotation.Nonnull List<IoArgoprojWorkflowV1alpha1DAGTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1DAGTemplate addTasksItem(IoArgoprojWorkflowV1alpha1DAGTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * Tasks are a list of DAG tasks
   * @return tasks
   */
  @javax.annotation.Nonnull
  public List<IoArgoprojWorkflowV1alpha1DAGTask> getTasks() {
    return tasks;
  }

  public void setTasks(@javax.annotation.Nonnull List<IoArgoprojWorkflowV1alpha1DAGTask> tasks) {
    this.tasks = tasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1DAGTemplate ioArgoprojWorkflowV1alpha1DAGTemplate = (IoArgoprojWorkflowV1alpha1DAGTemplate) o;
    return Objects.equals(this.failFast, ioArgoprojWorkflowV1alpha1DAGTemplate.failFast) &&
        Objects.equals(this.target, ioArgoprojWorkflowV1alpha1DAGTemplate.target) &&
        Objects.equals(this.tasks, ioArgoprojWorkflowV1alpha1DAGTemplate.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failFast, target, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1DAGTemplate {\n");
    sb.append("    failFast: ").append(toIndentedString(failFast)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failFast");
    openapiFields.add("target");
    openapiFields.add("tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tasks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1DAGTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1DAGTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1DAGTemplate is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1DAGTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1DAGTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1DAGTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoArgoprojWorkflowV1alpha1DAGTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("tasks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
      }

      JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
      // validate the required field `tasks` (array)
      for (int i = 0; i < jsonArraytasks.size(); i++) {
        IoArgoprojWorkflowV1alpha1DAGTask.validateJsonElement(jsonArraytasks.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1DAGTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1DAGTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1DAGTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1DAGTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1DAGTemplate>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1DAGTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1DAGTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1DAGTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1DAGTemplate
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1DAGTemplate
   */
  public static IoArgoprojWorkflowV1alpha1DAGTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1DAGTemplate.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1DAGTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

