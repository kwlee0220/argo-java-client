/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1SlackSender;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1SlackThread;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1TriggerParameter;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SlackTrigger refers to the specification of the slack notification trigger.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1SlackTrigger {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private String attachments;

  public static final String SERIALIZED_NAME_BLOCKS = "blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  @javax.annotation.Nullable
  private String blocks;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  @javax.annotation.Nullable
  private String channel;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private List<IoArgoprojEventsV1alpha1TriggerParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1SlackSender sender;

  public static final String SERIALIZED_NAME_SLACK_TOKEN = "slackToken";
  @SerializedName(SERIALIZED_NAME_SLACK_TOKEN)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector slackToken;

  public static final String SERIALIZED_NAME_THREAD = "thread";
  @SerializedName(SERIALIZED_NAME_THREAD)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1SlackThread thread;

  public IoArgoprojEventsV1alpha1SlackTrigger() {
  }

  public IoArgoprojEventsV1alpha1SlackTrigger attachments(@javax.annotation.Nullable String attachments) {
    this.attachments = attachments;
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public String getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable String attachments) {
    this.attachments = attachments;
  }


  public IoArgoprojEventsV1alpha1SlackTrigger blocks(@javax.annotation.Nullable String blocks) {
    this.blocks = blocks;
    return this;
  }

  /**
   * Get blocks
   * @return blocks
   */
  @javax.annotation.Nullable
  public String getBlocks() {
    return blocks;
  }

  public void setBlocks(@javax.annotation.Nullable String blocks) {
    this.blocks = blocks;
  }


  public IoArgoprojEventsV1alpha1SlackTrigger channel(@javax.annotation.Nullable String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(@javax.annotation.Nullable String channel) {
    this.channel = channel;
  }


  public IoArgoprojEventsV1alpha1SlackTrigger message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public IoArgoprojEventsV1alpha1SlackTrigger parameters(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1TriggerParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public IoArgoprojEventsV1alpha1SlackTrigger addParametersItem(IoArgoprojEventsV1alpha1TriggerParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<IoArgoprojEventsV1alpha1TriggerParameter> getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1TriggerParameter> parameters) {
    this.parameters = parameters;
  }


  public IoArgoprojEventsV1alpha1SlackTrigger sender(@javax.annotation.Nullable IoArgoprojEventsV1alpha1SlackSender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1SlackSender getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nullable IoArgoprojEventsV1alpha1SlackSender sender) {
    this.sender = sender;
  }


  public IoArgoprojEventsV1alpha1SlackTrigger slackToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector slackToken) {
    this.slackToken = slackToken;
    return this;
  }

  /**
   * Get slackToken
   * @return slackToken
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getSlackToken() {
    return slackToken;
  }

  public void setSlackToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector slackToken) {
    this.slackToken = slackToken;
  }


  public IoArgoprojEventsV1alpha1SlackTrigger thread(@javax.annotation.Nullable IoArgoprojEventsV1alpha1SlackThread thread) {
    this.thread = thread;
    return this;
  }

  /**
   * Get thread
   * @return thread
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1SlackThread getThread() {
    return thread;
  }

  public void setThread(@javax.annotation.Nullable IoArgoprojEventsV1alpha1SlackThread thread) {
    this.thread = thread;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1SlackTrigger ioArgoprojEventsV1alpha1SlackTrigger = (IoArgoprojEventsV1alpha1SlackTrigger) o;
    return Objects.equals(this.attachments, ioArgoprojEventsV1alpha1SlackTrigger.attachments) &&
        Objects.equals(this.blocks, ioArgoprojEventsV1alpha1SlackTrigger.blocks) &&
        Objects.equals(this.channel, ioArgoprojEventsV1alpha1SlackTrigger.channel) &&
        Objects.equals(this.message, ioArgoprojEventsV1alpha1SlackTrigger.message) &&
        Objects.equals(this.parameters, ioArgoprojEventsV1alpha1SlackTrigger.parameters) &&
        Objects.equals(this.sender, ioArgoprojEventsV1alpha1SlackTrigger.sender) &&
        Objects.equals(this.slackToken, ioArgoprojEventsV1alpha1SlackTrigger.slackToken) &&
        Objects.equals(this.thread, ioArgoprojEventsV1alpha1SlackTrigger.thread);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, blocks, channel, message, parameters, sender, slackToken, thread);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1SlackTrigger {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    slackToken: ").append(toIndentedString(slackToken)).append("\n");
    sb.append("    thread: ").append(toIndentedString(thread)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("blocks");
    openapiFields.add("channel");
    openapiFields.add("message");
    openapiFields.add("parameters");
    openapiFields.add("sender");
    openapiFields.add("slackToken");
    openapiFields.add("thread");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1SlackTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1SlackTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1SlackTrigger is not found in the empty JSON string", IoArgoprojEventsV1alpha1SlackTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1SlackTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1SlackTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) && !jsonObj.get("attachments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("blocks") != null && !jsonObj.get("blocks").isJsonNull()) && !jsonObj.get("blocks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocks").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            IoArgoprojEventsV1alpha1TriggerParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        IoArgoprojEventsV1alpha1SlackSender.validateJsonElement(jsonObj.get("sender"));
      }
      // validate the optional field `slackToken`
      if (jsonObj.get("slackToken") != null && !jsonObj.get("slackToken").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("slackToken"));
      }
      // validate the optional field `thread`
      if (jsonObj.get("thread") != null && !jsonObj.get("thread").isJsonNull()) {
        IoArgoprojEventsV1alpha1SlackThread.validateJsonElement(jsonObj.get("thread"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1SlackTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1SlackTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1SlackTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1SlackTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1SlackTrigger>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1SlackTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1SlackTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1SlackTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1SlackTrigger
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1SlackTrigger
   */
  public static IoArgoprojEventsV1alpha1SlackTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1SlackTrigger.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1SlackTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

