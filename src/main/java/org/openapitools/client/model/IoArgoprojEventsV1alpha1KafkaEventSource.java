/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1Backoff;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1KafkaConsumerGroup;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1SASLConfig;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1TLSConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1KafkaEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1KafkaEventSource {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  @javax.annotation.Nullable
  private String config;

  public static final String SERIALIZED_NAME_CONNECTION_BACKOFF = "connectionBackoff";
  @SerializedName(SERIALIZED_NAME_CONNECTION_BACKOFF)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1Backoff connectionBackoff;

  public static final String SERIALIZED_NAME_CONSUMER_GROUP = "consumerGroup";
  @SerializedName(SERIALIZED_NAME_CONSUMER_GROUP)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1KafkaConsumerGroup consumerGroup;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_JSON_BODY = "jsonBody";
  @SerializedName(SERIALIZED_NAME_JSON_BODY)
  @javax.annotation.Nullable
  private Boolean jsonBody;

  public static final String SERIALIZED_NAME_LIMIT_EVENTS_PER_SECOND = "limitEventsPerSecond";
  @SerializedName(SERIALIZED_NAME_LIMIT_EVENTS_PER_SECOND)
  @javax.annotation.Nullable
  private String limitEventsPerSecond;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PARTITION = "partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  @javax.annotation.Nullable
  private String partition;

  public static final String SERIALIZED_NAME_SASL = "sasl";
  @SerializedName(SERIALIZED_NAME_SASL)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1SASLConfig sasl;

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1TLSConfig tls;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  @javax.annotation.Nullable
  private String topic;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public IoArgoprojEventsV1alpha1KafkaEventSource() {
  }

  public IoArgoprojEventsV1alpha1KafkaEventSource config(@javax.annotation.Nullable String config) {
    this.config = config;
    return this;
  }

  /**
   * Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/IBM/sarama/blob/main/config.go e.g.  consumer:   fetch:     min: 1 net:   MaxOpenRequests: 5  +optional
   * @return config
   */
  @javax.annotation.Nullable
  public String getConfig() {
    return config;
  }

  public void setConfig(@javax.annotation.Nullable String config) {
    this.config = config;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource connectionBackoff(@javax.annotation.Nullable IoArgoprojEventsV1alpha1Backoff connectionBackoff) {
    this.connectionBackoff = connectionBackoff;
    return this;
  }

  /**
   * Get connectionBackoff
   * @return connectionBackoff
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1Backoff getConnectionBackoff() {
    return connectionBackoff;
  }

  public void setConnectionBackoff(@javax.annotation.Nullable IoArgoprojEventsV1alpha1Backoff connectionBackoff) {
    this.connectionBackoff = connectionBackoff;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource consumerGroup(@javax.annotation.Nullable IoArgoprojEventsV1alpha1KafkaConsumerGroup consumerGroup) {
    this.consumerGroup = consumerGroup;
    return this;
  }

  /**
   * Get consumerGroup
   * @return consumerGroup
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1KafkaConsumerGroup getConsumerGroup() {
    return consumerGroup;
  }

  public void setConsumerGroup(@javax.annotation.Nullable IoArgoprojEventsV1alpha1KafkaConsumerGroup consumerGroup) {
    this.consumerGroup = consumerGroup;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource jsonBody(@javax.annotation.Nullable Boolean jsonBody) {
    this.jsonBody = jsonBody;
    return this;
  }

  /**
   * Get jsonBody
   * @return jsonBody
   */
  @javax.annotation.Nullable
  public Boolean getJsonBody() {
    return jsonBody;
  }

  public void setJsonBody(@javax.annotation.Nullable Boolean jsonBody) {
    this.jsonBody = jsonBody;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource limitEventsPerSecond(@javax.annotation.Nullable String limitEventsPerSecond) {
    this.limitEventsPerSecond = limitEventsPerSecond;
    return this;
  }

  /**
   * Get limitEventsPerSecond
   * @return limitEventsPerSecond
   */
  @javax.annotation.Nullable
  public String getLimitEventsPerSecond() {
    return limitEventsPerSecond;
  }

  public void setLimitEventsPerSecond(@javax.annotation.Nullable String limitEventsPerSecond) {
    this.limitEventsPerSecond = limitEventsPerSecond;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1KafkaEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource partition(@javax.annotation.Nullable String partition) {
    this.partition = partition;
    return this;
  }

  /**
   * Get partition
   * @return partition
   */
  @javax.annotation.Nullable
  public String getPartition() {
    return partition;
  }

  public void setPartition(@javax.annotation.Nullable String partition) {
    this.partition = partition;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource sasl(@javax.annotation.Nullable IoArgoprojEventsV1alpha1SASLConfig sasl) {
    this.sasl = sasl;
    return this;
  }

  /**
   * Get sasl
   * @return sasl
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1SASLConfig getSasl() {
    return sasl;
  }

  public void setSasl(@javax.annotation.Nullable IoArgoprojEventsV1alpha1SASLConfig sasl) {
    this.sasl = sasl;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource tls(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TLSConfig tls) {
    this.tls = tls;
    return this;
  }

  /**
   * Get tls
   * @return tls
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1TLSConfig getTls() {
    return tls;
  }

  public void setTls(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TLSConfig tls) {
    this.tls = tls;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource topic(@javax.annotation.Nullable String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Get topic
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(@javax.annotation.Nullable String topic) {
    this.topic = topic;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public IoArgoprojEventsV1alpha1KafkaEventSource version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1KafkaEventSource ioArgoprojEventsV1alpha1KafkaEventSource = (IoArgoprojEventsV1alpha1KafkaEventSource) o;
    return Objects.equals(this.config, ioArgoprojEventsV1alpha1KafkaEventSource.config) &&
        Objects.equals(this.connectionBackoff, ioArgoprojEventsV1alpha1KafkaEventSource.connectionBackoff) &&
        Objects.equals(this.consumerGroup, ioArgoprojEventsV1alpha1KafkaEventSource.consumerGroup) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1KafkaEventSource.filter) &&
        Objects.equals(this.jsonBody, ioArgoprojEventsV1alpha1KafkaEventSource.jsonBody) &&
        Objects.equals(this.limitEventsPerSecond, ioArgoprojEventsV1alpha1KafkaEventSource.limitEventsPerSecond) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1KafkaEventSource.metadata) &&
        Objects.equals(this.partition, ioArgoprojEventsV1alpha1KafkaEventSource.partition) &&
        Objects.equals(this.sasl, ioArgoprojEventsV1alpha1KafkaEventSource.sasl) &&
        Objects.equals(this.tls, ioArgoprojEventsV1alpha1KafkaEventSource.tls) &&
        Objects.equals(this.topic, ioArgoprojEventsV1alpha1KafkaEventSource.topic) &&
        Objects.equals(this.url, ioArgoprojEventsV1alpha1KafkaEventSource.url) &&
        Objects.equals(this.version, ioArgoprojEventsV1alpha1KafkaEventSource.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, connectionBackoff, consumerGroup, filter, jsonBody, limitEventsPerSecond, metadata, partition, sasl, tls, topic, url, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1KafkaEventSource {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    connectionBackoff: ").append(toIndentedString(connectionBackoff)).append("\n");
    sb.append("    consumerGroup: ").append(toIndentedString(consumerGroup)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    jsonBody: ").append(toIndentedString(jsonBody)).append("\n");
    sb.append("    limitEventsPerSecond: ").append(toIndentedString(limitEventsPerSecond)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    sasl: ").append(toIndentedString(sasl)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("connectionBackoff");
    openapiFields.add("consumerGroup");
    openapiFields.add("filter");
    openapiFields.add("jsonBody");
    openapiFields.add("limitEventsPerSecond");
    openapiFields.add("metadata");
    openapiFields.add("partition");
    openapiFields.add("sasl");
    openapiFields.add("tls");
    openapiFields.add("topic");
    openapiFields.add("url");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1KafkaEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1KafkaEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1KafkaEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1KafkaEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1KafkaEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1KafkaEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) && !jsonObj.get("config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      // validate the optional field `connectionBackoff`
      if (jsonObj.get("connectionBackoff") != null && !jsonObj.get("connectionBackoff").isJsonNull()) {
        IoArgoprojEventsV1alpha1Backoff.validateJsonElement(jsonObj.get("connectionBackoff"));
      }
      // validate the optional field `consumerGroup`
      if (jsonObj.get("consumerGroup") != null && !jsonObj.get("consumerGroup").isJsonNull()) {
        IoArgoprojEventsV1alpha1KafkaConsumerGroup.validateJsonElement(jsonObj.get("consumerGroup"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("limitEventsPerSecond") != null && !jsonObj.get("limitEventsPerSecond").isJsonNull()) && !jsonObj.get("limitEventsPerSecond").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limitEventsPerSecond` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limitEventsPerSecond").toString()));
      }
      if ((jsonObj.get("partition") != null && !jsonObj.get("partition").isJsonNull()) && !jsonObj.get("partition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition").toString()));
      }
      // validate the optional field `sasl`
      if (jsonObj.get("sasl") != null && !jsonObj.get("sasl").isJsonNull()) {
        IoArgoprojEventsV1alpha1SASLConfig.validateJsonElement(jsonObj.get("sasl"));
      }
      // validate the optional field `tls`
      if (jsonObj.get("tls") != null && !jsonObj.get("tls").isJsonNull()) {
        IoArgoprojEventsV1alpha1TLSConfig.validateJsonElement(jsonObj.get("tls"));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1KafkaEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1KafkaEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1KafkaEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1KafkaEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1KafkaEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1KafkaEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1KafkaEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1KafkaEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1KafkaEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1KafkaEventSource
   */
  public static IoArgoprojEventsV1alpha1KafkaEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1KafkaEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1KafkaEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

