/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1Int64OrString
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1Int64OrString {
  public static final String SERIALIZED_NAME_INT64_VAL = "int64Val";
  @SerializedName(SERIALIZED_NAME_INT64_VAL)
  @javax.annotation.Nullable
  private String int64Val;

  public static final String SERIALIZED_NAME_STR_VAL = "strVal";
  @SerializedName(SERIALIZED_NAME_STR_VAL)
  @javax.annotation.Nullable
  private String strVal;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public IoArgoprojEventsV1alpha1Int64OrString() {
  }

  public IoArgoprojEventsV1alpha1Int64OrString int64Val(@javax.annotation.Nullable String int64Val) {
    this.int64Val = int64Val;
    return this;
  }

  /**
   * Get int64Val
   * @return int64Val
   */
  @javax.annotation.Nullable
  public String getInt64Val() {
    return int64Val;
  }

  public void setInt64Val(@javax.annotation.Nullable String int64Val) {
    this.int64Val = int64Val;
  }


  public IoArgoprojEventsV1alpha1Int64OrString strVal(@javax.annotation.Nullable String strVal) {
    this.strVal = strVal;
    return this;
  }

  /**
   * Get strVal
   * @return strVal
   */
  @javax.annotation.Nullable
  public String getStrVal() {
    return strVal;
  }

  public void setStrVal(@javax.annotation.Nullable String strVal) {
    this.strVal = strVal;
  }


  public IoArgoprojEventsV1alpha1Int64OrString type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1Int64OrString ioArgoprojEventsV1alpha1Int64OrString = (IoArgoprojEventsV1alpha1Int64OrString) o;
    return Objects.equals(this.int64Val, ioArgoprojEventsV1alpha1Int64OrString.int64Val) &&
        Objects.equals(this.strVal, ioArgoprojEventsV1alpha1Int64OrString.strVal) &&
        Objects.equals(this.type, ioArgoprojEventsV1alpha1Int64OrString.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(int64Val, strVal, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1Int64OrString {\n");
    sb.append("    int64Val: ").append(toIndentedString(int64Val)).append("\n");
    sb.append("    strVal: ").append(toIndentedString(strVal)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("int64Val");
    openapiFields.add("strVal");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1Int64OrString
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1Int64OrString.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1Int64OrString is not found in the empty JSON string", IoArgoprojEventsV1alpha1Int64OrString.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1Int64OrString.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1Int64OrString` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("int64Val") != null && !jsonObj.get("int64Val").isJsonNull()) && !jsonObj.get("int64Val").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `int64Val` to be a primitive type in the JSON string but got `%s`", jsonObj.get("int64Val").toString()));
      }
      if ((jsonObj.get("strVal") != null && !jsonObj.get("strVal").isJsonNull()) && !jsonObj.get("strVal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strVal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strVal").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1Int64OrString.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1Int64OrString' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1Int64OrString> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1Int64OrString.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1Int64OrString>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1Int64OrString value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1Int64OrString read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1Int64OrString given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1Int64OrString
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1Int64OrString
   */
  public static IoArgoprojEventsV1alpha1Int64OrString fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1Int64OrString.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1Int64OrString to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

