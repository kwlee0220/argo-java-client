/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GitArtifact is the location of an git artifact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1GitArtifact {
  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  @javax.annotation.Nullable
  private String branch;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  @javax.annotation.Nullable
  private Integer depth;

  public static final String SERIALIZED_NAME_DISABLE_SUBMODULES = "disableSubmodules";
  @SerializedName(SERIALIZED_NAME_DISABLE_SUBMODULES)
  @javax.annotation.Nullable
  private Boolean disableSubmodules;

  public static final String SERIALIZED_NAME_FETCH = "fetch";
  @SerializedName(SERIALIZED_NAME_FETCH)
  @javax.annotation.Nullable
  private List<String> fetch = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSECURE_IGNORE_HOST_KEY = "insecureIgnoreHostKey";
  @SerializedName(SERIALIZED_NAME_INSECURE_IGNORE_HOST_KEY)
  @javax.annotation.Nullable
  private Boolean insecureIgnoreHostKey;

  public static final String SERIALIZED_NAME_INSECURE_SKIP_T_L_S = "insecureSkipTLS";
  @SerializedName(SERIALIZED_NAME_INSECURE_SKIP_T_L_S)
  @javax.annotation.Nullable
  private Boolean insecureSkipTLS;

  public static final String SERIALIZED_NAME_PASSWORD_SECRET = "passwordSecret";
  @SerializedName(SERIALIZED_NAME_PASSWORD_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector passwordSecret;

  public static final String SERIALIZED_NAME_REPO = "repo";
  @SerializedName(SERIALIZED_NAME_REPO)
  @javax.annotation.Nonnull
  private String repo;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  @javax.annotation.Nullable
  private String revision;

  public static final String SERIALIZED_NAME_SINGLE_BRANCH = "singleBranch";
  @SerializedName(SERIALIZED_NAME_SINGLE_BRANCH)
  @javax.annotation.Nullable
  private Boolean singleBranch;

  public static final String SERIALIZED_NAME_SSH_PRIVATE_KEY_SECRET = "sshPrivateKeySecret";
  @SerializedName(SERIALIZED_NAME_SSH_PRIVATE_KEY_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector sshPrivateKeySecret;

  public static final String SERIALIZED_NAME_USERNAME_SECRET = "usernameSecret";
  @SerializedName(SERIALIZED_NAME_USERNAME_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector usernameSecret;

  public IoArgoprojWorkflowV1alpha1GitArtifact() {
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact branch(@javax.annotation.Nullable String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Branch is the branch to fetch when &#x60;SingleBranch&#x60; is enabled
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(@javax.annotation.Nullable String branch) {
    this.branch = branch;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact depth(@javax.annotation.Nullable Integer depth) {
    this.depth = depth;
    return this;
  }

  /**
   * Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip
   * @return depth
   */
  @javax.annotation.Nullable
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(@javax.annotation.Nullable Integer depth) {
    this.depth = depth;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact disableSubmodules(@javax.annotation.Nullable Boolean disableSubmodules) {
    this.disableSubmodules = disableSubmodules;
    return this;
  }

  /**
   * DisableSubmodules disables submodules during git clone
   * @return disableSubmodules
   */
  @javax.annotation.Nullable
  public Boolean getDisableSubmodules() {
    return disableSubmodules;
  }

  public void setDisableSubmodules(@javax.annotation.Nullable Boolean disableSubmodules) {
    this.disableSubmodules = disableSubmodules;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact fetch(@javax.annotation.Nullable List<String> fetch) {
    this.fetch = fetch;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact addFetchItem(String fetchItem) {
    if (this.fetch == null) {
      this.fetch = new ArrayList<>();
    }
    this.fetch.add(fetchItem);
    return this;
  }

  /**
   * Fetch specifies a number of refs that should be fetched before checkout
   * @return fetch
   */
  @javax.annotation.Nullable
  public List<String> getFetch() {
    return fetch;
  }

  public void setFetch(@javax.annotation.Nullable List<String> fetch) {
    this.fetch = fetch;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact insecureIgnoreHostKey(@javax.annotation.Nullable Boolean insecureIgnoreHostKey) {
    this.insecureIgnoreHostKey = insecureIgnoreHostKey;
    return this;
  }

  /**
   * InsecureIgnoreHostKey disables SSH strict host key checking during git clone
   * @return insecureIgnoreHostKey
   */
  @javax.annotation.Nullable
  public Boolean getInsecureIgnoreHostKey() {
    return insecureIgnoreHostKey;
  }

  public void setInsecureIgnoreHostKey(@javax.annotation.Nullable Boolean insecureIgnoreHostKey) {
    this.insecureIgnoreHostKey = insecureIgnoreHostKey;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact insecureSkipTLS(@javax.annotation.Nullable Boolean insecureSkipTLS) {
    this.insecureSkipTLS = insecureSkipTLS;
    return this;
  }

  /**
   * InsecureSkipTLS disables server certificate verification resulting in insecure HTTPS connections
   * @return insecureSkipTLS
   */
  @javax.annotation.Nullable
  public Boolean getInsecureSkipTLS() {
    return insecureSkipTLS;
  }

  public void setInsecureSkipTLS(@javax.annotation.Nullable Boolean insecureSkipTLS) {
    this.insecureSkipTLS = insecureSkipTLS;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact passwordSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector passwordSecret) {
    this.passwordSecret = passwordSecret;
    return this;
  }

  /**
   * Get passwordSecret
   * @return passwordSecret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getPasswordSecret() {
    return passwordSecret;
  }

  public void setPasswordSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector passwordSecret) {
    this.passwordSecret = passwordSecret;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact repo(@javax.annotation.Nonnull String repo) {
    this.repo = repo;
    return this;
  }

  /**
   * Repo is the git repository
   * @return repo
   */
  @javax.annotation.Nonnull
  public String getRepo() {
    return repo;
  }

  public void setRepo(@javax.annotation.Nonnull String repo) {
    this.repo = repo;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact revision(@javax.annotation.Nullable String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Revision is the git commit, tag, branch to checkout
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(@javax.annotation.Nullable String revision) {
    this.revision = revision;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact singleBranch(@javax.annotation.Nullable Boolean singleBranch) {
    this.singleBranch = singleBranch;
    return this;
  }

  /**
   * SingleBranch enables single branch clone, using the &#x60;branch&#x60; parameter
   * @return singleBranch
   */
  @javax.annotation.Nullable
  public Boolean getSingleBranch() {
    return singleBranch;
  }

  public void setSingleBranch(@javax.annotation.Nullable Boolean singleBranch) {
    this.singleBranch = singleBranch;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact sshPrivateKeySecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector sshPrivateKeySecret) {
    this.sshPrivateKeySecret = sshPrivateKeySecret;
    return this;
  }

  /**
   * Get sshPrivateKeySecret
   * @return sshPrivateKeySecret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getSshPrivateKeySecret() {
    return sshPrivateKeySecret;
  }

  public void setSshPrivateKeySecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector sshPrivateKeySecret) {
    this.sshPrivateKeySecret = sshPrivateKeySecret;
  }


  public IoArgoprojWorkflowV1alpha1GitArtifact usernameSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector usernameSecret) {
    this.usernameSecret = usernameSecret;
    return this;
  }

  /**
   * Get usernameSecret
   * @return usernameSecret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getUsernameSecret() {
    return usernameSecret;
  }

  public void setUsernameSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector usernameSecret) {
    this.usernameSecret = usernameSecret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1GitArtifact ioArgoprojWorkflowV1alpha1GitArtifact = (IoArgoprojWorkflowV1alpha1GitArtifact) o;
    return Objects.equals(this.branch, ioArgoprojWorkflowV1alpha1GitArtifact.branch) &&
        Objects.equals(this.depth, ioArgoprojWorkflowV1alpha1GitArtifact.depth) &&
        Objects.equals(this.disableSubmodules, ioArgoprojWorkflowV1alpha1GitArtifact.disableSubmodules) &&
        Objects.equals(this.fetch, ioArgoprojWorkflowV1alpha1GitArtifact.fetch) &&
        Objects.equals(this.insecureIgnoreHostKey, ioArgoprojWorkflowV1alpha1GitArtifact.insecureIgnoreHostKey) &&
        Objects.equals(this.insecureSkipTLS, ioArgoprojWorkflowV1alpha1GitArtifact.insecureSkipTLS) &&
        Objects.equals(this.passwordSecret, ioArgoprojWorkflowV1alpha1GitArtifact.passwordSecret) &&
        Objects.equals(this.repo, ioArgoprojWorkflowV1alpha1GitArtifact.repo) &&
        Objects.equals(this.revision, ioArgoprojWorkflowV1alpha1GitArtifact.revision) &&
        Objects.equals(this.singleBranch, ioArgoprojWorkflowV1alpha1GitArtifact.singleBranch) &&
        Objects.equals(this.sshPrivateKeySecret, ioArgoprojWorkflowV1alpha1GitArtifact.sshPrivateKeySecret) &&
        Objects.equals(this.usernameSecret, ioArgoprojWorkflowV1alpha1GitArtifact.usernameSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, depth, disableSubmodules, fetch, insecureIgnoreHostKey, insecureSkipTLS, passwordSecret, repo, revision, singleBranch, sshPrivateKeySecret, usernameSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1GitArtifact {\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    disableSubmodules: ").append(toIndentedString(disableSubmodules)).append("\n");
    sb.append("    fetch: ").append(toIndentedString(fetch)).append("\n");
    sb.append("    insecureIgnoreHostKey: ").append(toIndentedString(insecureIgnoreHostKey)).append("\n");
    sb.append("    insecureSkipTLS: ").append(toIndentedString(insecureSkipTLS)).append("\n");
    sb.append("    passwordSecret: ").append(toIndentedString(passwordSecret)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    singleBranch: ").append(toIndentedString(singleBranch)).append("\n");
    sb.append("    sshPrivateKeySecret: ").append(toIndentedString(sshPrivateKeySecret)).append("\n");
    sb.append("    usernameSecret: ").append(toIndentedString(usernameSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branch");
    openapiFields.add("depth");
    openapiFields.add("disableSubmodules");
    openapiFields.add("fetch");
    openapiFields.add("insecureIgnoreHostKey");
    openapiFields.add("insecureSkipTLS");
    openapiFields.add("passwordSecret");
    openapiFields.add("repo");
    openapiFields.add("revision");
    openapiFields.add("singleBranch");
    openapiFields.add("sshPrivateKeySecret");
    openapiFields.add("usernameSecret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("repo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1GitArtifact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1GitArtifact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1GitArtifact is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1GitArtifact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1GitArtifact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1GitArtifact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoArgoprojWorkflowV1alpha1GitArtifact.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fetch") != null && !jsonObj.get("fetch").isJsonNull() && !jsonObj.get("fetch").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fetch` to be an array in the JSON string but got `%s`", jsonObj.get("fetch").toString()));
      }
      // validate the optional field `passwordSecret`
      if (jsonObj.get("passwordSecret") != null && !jsonObj.get("passwordSecret").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("passwordSecret"));
      }
      if (!jsonObj.get("repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo").toString()));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      // validate the optional field `sshPrivateKeySecret`
      if (jsonObj.get("sshPrivateKeySecret") != null && !jsonObj.get("sshPrivateKeySecret").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("sshPrivateKeySecret"));
      }
      // validate the optional field `usernameSecret`
      if (jsonObj.get("usernameSecret") != null && !jsonObj.get("usernameSecret").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("usernameSecret"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1GitArtifact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1GitArtifact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1GitArtifact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1GitArtifact.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1GitArtifact>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1GitArtifact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1GitArtifact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1GitArtifact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1GitArtifact
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1GitArtifact
   */
  public static IoArgoprojWorkflowV1alpha1GitArtifact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1GitArtifact.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1GitArtifact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

