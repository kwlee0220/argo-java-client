/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Arguments;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1TemplateRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojWorkflowV1alpha1LifecycleHook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1LifecycleHook {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1Arguments arguments;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  @javax.annotation.Nullable
  private String expression;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private String template;

  public static final String SERIALIZED_NAME_TEMPLATE_REF = "templateRef";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_REF)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1TemplateRef templateRef;

  public IoArgoprojWorkflowV1alpha1LifecycleHook() {
  }

  public IoArgoprojWorkflowV1alpha1LifecycleHook arguments(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Arguments arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * Get arguments
   * @return arguments
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1Arguments getArguments() {
    return arguments;
  }

  public void setArguments(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Arguments arguments) {
    this.arguments = arguments;
  }


  public IoArgoprojWorkflowV1alpha1LifecycleHook expression(@javax.annotation.Nullable String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(@javax.annotation.Nullable String expression) {
    this.expression = expression;
  }


  public IoArgoprojWorkflowV1alpha1LifecycleHook template(@javax.annotation.Nullable String template) {
    this.template = template;
    return this;
  }

  /**
   * Template is the name of the template to execute by the hook
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable String template) {
    this.template = template;
  }


  public IoArgoprojWorkflowV1alpha1LifecycleHook templateRef(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1TemplateRef templateRef) {
    this.templateRef = templateRef;
    return this;
  }

  /**
   * Get templateRef
   * @return templateRef
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1TemplateRef getTemplateRef() {
    return templateRef;
  }

  public void setTemplateRef(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1TemplateRef templateRef) {
    this.templateRef = templateRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1LifecycleHook ioArgoprojWorkflowV1alpha1LifecycleHook = (IoArgoprojWorkflowV1alpha1LifecycleHook) o;
    return Objects.equals(this.arguments, ioArgoprojWorkflowV1alpha1LifecycleHook.arguments) &&
        Objects.equals(this.expression, ioArgoprojWorkflowV1alpha1LifecycleHook.expression) &&
        Objects.equals(this.template, ioArgoprojWorkflowV1alpha1LifecycleHook.template) &&
        Objects.equals(this.templateRef, ioArgoprojWorkflowV1alpha1LifecycleHook.templateRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, expression, template, templateRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1LifecycleHook {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templateRef: ").append(toIndentedString(templateRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("expression");
    openapiFields.add("template");
    openapiFields.add("templateRef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1LifecycleHook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1LifecycleHook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1LifecycleHook is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1LifecycleHook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1LifecycleHook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1LifecycleHook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arguments`
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1Arguments.validateJsonElement(jsonObj.get("arguments"));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      // validate the optional field `templateRef`
      if (jsonObj.get("templateRef") != null && !jsonObj.get("templateRef").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1TemplateRef.validateJsonElement(jsonObj.get("templateRef"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1LifecycleHook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1LifecycleHook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1LifecycleHook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1LifecycleHook.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1LifecycleHook>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1LifecycleHook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1LifecycleHook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1LifecycleHook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1LifecycleHook
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1LifecycleHook
   */
  public static IoArgoprojWorkflowV1alpha1LifecycleHook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1LifecycleHook.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1LifecycleHook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

