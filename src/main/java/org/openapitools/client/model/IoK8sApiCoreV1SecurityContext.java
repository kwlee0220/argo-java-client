/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoK8sApiCoreV1AppArmorProfile;
import org.openapitools.client.model.IoK8sApiCoreV1Capabilities;
import org.openapitools.client.model.IoK8sApiCoreV1SELinuxOptions;
import org.openapitools.client.model.IoK8sApiCoreV1SeccompProfile;
import org.openapitools.client.model.IoK8sApiCoreV1WindowsSecurityContextOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoK8sApiCoreV1SecurityContext {
  public static final String SERIALIZED_NAME_ALLOW_PRIVILEGE_ESCALATION = "allowPrivilegeEscalation";
  @SerializedName(SERIALIZED_NAME_ALLOW_PRIVILEGE_ESCALATION)
  @javax.annotation.Nullable
  private Boolean allowPrivilegeEscalation;

  public static final String SERIALIZED_NAME_APP_ARMOR_PROFILE = "appArmorProfile";
  @SerializedName(SERIALIZED_NAME_APP_ARMOR_PROFILE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1AppArmorProfile appArmorProfile;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1Capabilities capabilities;

  public static final String SERIALIZED_NAME_PRIVILEGED = "privileged";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED)
  @javax.annotation.Nullable
  private Boolean privileged;

  public static final String SERIALIZED_NAME_PROC_MOUNT = "procMount";
  @SerializedName(SERIALIZED_NAME_PROC_MOUNT)
  @javax.annotation.Nullable
  private String procMount;

  public static final String SERIALIZED_NAME_READ_ONLY_ROOT_FILESYSTEM = "readOnlyRootFilesystem";
  @SerializedName(SERIALIZED_NAME_READ_ONLY_ROOT_FILESYSTEM)
  @javax.annotation.Nullable
  private Boolean readOnlyRootFilesystem;

  public static final String SERIALIZED_NAME_RUN_AS_GROUP = "runAsGroup";
  @SerializedName(SERIALIZED_NAME_RUN_AS_GROUP)
  @javax.annotation.Nullable
  private Integer runAsGroup;

  public static final String SERIALIZED_NAME_RUN_AS_NON_ROOT = "runAsNonRoot";
  @SerializedName(SERIALIZED_NAME_RUN_AS_NON_ROOT)
  @javax.annotation.Nullable
  private Boolean runAsNonRoot;

  public static final String SERIALIZED_NAME_RUN_AS_USER = "runAsUser";
  @SerializedName(SERIALIZED_NAME_RUN_AS_USER)
  @javax.annotation.Nullable
  private Integer runAsUser;

  public static final String SERIALIZED_NAME_SE_LINUX_OPTIONS = "seLinuxOptions";
  @SerializedName(SERIALIZED_NAME_SE_LINUX_OPTIONS)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SELinuxOptions seLinuxOptions;

  public static final String SERIALIZED_NAME_SECCOMP_PROFILE = "seccompProfile";
  @SerializedName(SERIALIZED_NAME_SECCOMP_PROFILE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SeccompProfile seccompProfile;

  public static final String SERIALIZED_NAME_WINDOWS_OPTIONS = "windowsOptions";
  @SerializedName(SERIALIZED_NAME_WINDOWS_OPTIONS)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1WindowsSecurityContextOptions windowsOptions;

  public IoK8sApiCoreV1SecurityContext() {
  }

  public IoK8sApiCoreV1SecurityContext allowPrivilegeEscalation(@javax.annotation.Nullable Boolean allowPrivilegeEscalation) {
    this.allowPrivilegeEscalation = allowPrivilegeEscalation;
    return this;
  }

  /**
   * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
   * @return allowPrivilegeEscalation
   */
  @javax.annotation.Nullable
  public Boolean getAllowPrivilegeEscalation() {
    return allowPrivilegeEscalation;
  }

  public void setAllowPrivilegeEscalation(@javax.annotation.Nullable Boolean allowPrivilegeEscalation) {
    this.allowPrivilegeEscalation = allowPrivilegeEscalation;
  }


  public IoK8sApiCoreV1SecurityContext appArmorProfile(@javax.annotation.Nullable IoK8sApiCoreV1AppArmorProfile appArmorProfile) {
    this.appArmorProfile = appArmorProfile;
    return this;
  }

  /**
   * Get appArmorProfile
   * @return appArmorProfile
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1AppArmorProfile getAppArmorProfile() {
    return appArmorProfile;
  }

  public void setAppArmorProfile(@javax.annotation.Nullable IoK8sApiCoreV1AppArmorProfile appArmorProfile) {
    this.appArmorProfile = appArmorProfile;
  }


  public IoK8sApiCoreV1SecurityContext capabilities(@javax.annotation.Nullable IoK8sApiCoreV1Capabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1Capabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(@javax.annotation.Nullable IoK8sApiCoreV1Capabilities capabilities) {
    this.capabilities = capabilities;
  }


  public IoK8sApiCoreV1SecurityContext privileged(@javax.annotation.Nullable Boolean privileged) {
    this.privileged = privileged;
    return this;
  }

  /**
   * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
   * @return privileged
   */
  @javax.annotation.Nullable
  public Boolean getPrivileged() {
    return privileged;
  }

  public void setPrivileged(@javax.annotation.Nullable Boolean privileged) {
    this.privileged = privileged;
  }


  public IoK8sApiCoreV1SecurityContext procMount(@javax.annotation.Nullable String procMount) {
    this.procMount = procMount;
    return this;
  }

  /**
   * procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
   * @return procMount
   */
  @javax.annotation.Nullable
  public String getProcMount() {
    return procMount;
  }

  public void setProcMount(@javax.annotation.Nullable String procMount) {
    this.procMount = procMount;
  }


  public IoK8sApiCoreV1SecurityContext readOnlyRootFilesystem(@javax.annotation.Nullable Boolean readOnlyRootFilesystem) {
    this.readOnlyRootFilesystem = readOnlyRootFilesystem;
    return this;
  }

  /**
   * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
   * @return readOnlyRootFilesystem
   */
  @javax.annotation.Nullable
  public Boolean getReadOnlyRootFilesystem() {
    return readOnlyRootFilesystem;
  }

  public void setReadOnlyRootFilesystem(@javax.annotation.Nullable Boolean readOnlyRootFilesystem) {
    this.readOnlyRootFilesystem = readOnlyRootFilesystem;
  }


  public IoK8sApiCoreV1SecurityContext runAsGroup(@javax.annotation.Nullable Integer runAsGroup) {
    this.runAsGroup = runAsGroup;
    return this;
  }

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
   * @return runAsGroup
   */
  @javax.annotation.Nullable
  public Integer getRunAsGroup() {
    return runAsGroup;
  }

  public void setRunAsGroup(@javax.annotation.Nullable Integer runAsGroup) {
    this.runAsGroup = runAsGroup;
  }


  public IoK8sApiCoreV1SecurityContext runAsNonRoot(@javax.annotation.Nullable Boolean runAsNonRoot) {
    this.runAsNonRoot = runAsNonRoot;
    return this;
  }

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @return runAsNonRoot
   */
  @javax.annotation.Nullable
  public Boolean getRunAsNonRoot() {
    return runAsNonRoot;
  }

  public void setRunAsNonRoot(@javax.annotation.Nullable Boolean runAsNonRoot) {
    this.runAsNonRoot = runAsNonRoot;
  }


  public IoK8sApiCoreV1SecurityContext runAsUser(@javax.annotation.Nullable Integer runAsUser) {
    this.runAsUser = runAsUser;
    return this;
  }

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
   * @return runAsUser
   */
  @javax.annotation.Nullable
  public Integer getRunAsUser() {
    return runAsUser;
  }

  public void setRunAsUser(@javax.annotation.Nullable Integer runAsUser) {
    this.runAsUser = runAsUser;
  }


  public IoK8sApiCoreV1SecurityContext seLinuxOptions(@javax.annotation.Nullable IoK8sApiCoreV1SELinuxOptions seLinuxOptions) {
    this.seLinuxOptions = seLinuxOptions;
    return this;
  }

  /**
   * Get seLinuxOptions
   * @return seLinuxOptions
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SELinuxOptions getSeLinuxOptions() {
    return seLinuxOptions;
  }

  public void setSeLinuxOptions(@javax.annotation.Nullable IoK8sApiCoreV1SELinuxOptions seLinuxOptions) {
    this.seLinuxOptions = seLinuxOptions;
  }


  public IoK8sApiCoreV1SecurityContext seccompProfile(@javax.annotation.Nullable IoK8sApiCoreV1SeccompProfile seccompProfile) {
    this.seccompProfile = seccompProfile;
    return this;
  }

  /**
   * Get seccompProfile
   * @return seccompProfile
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SeccompProfile getSeccompProfile() {
    return seccompProfile;
  }

  public void setSeccompProfile(@javax.annotation.Nullable IoK8sApiCoreV1SeccompProfile seccompProfile) {
    this.seccompProfile = seccompProfile;
  }


  public IoK8sApiCoreV1SecurityContext windowsOptions(@javax.annotation.Nullable IoK8sApiCoreV1WindowsSecurityContextOptions windowsOptions) {
    this.windowsOptions = windowsOptions;
    return this;
  }

  /**
   * Get windowsOptions
   * @return windowsOptions
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1WindowsSecurityContextOptions getWindowsOptions() {
    return windowsOptions;
  }

  public void setWindowsOptions(@javax.annotation.Nullable IoK8sApiCoreV1WindowsSecurityContextOptions windowsOptions) {
    this.windowsOptions = windowsOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1SecurityContext ioK8sApiCoreV1SecurityContext = (IoK8sApiCoreV1SecurityContext) o;
    return Objects.equals(this.allowPrivilegeEscalation, ioK8sApiCoreV1SecurityContext.allowPrivilegeEscalation) &&
        Objects.equals(this.appArmorProfile, ioK8sApiCoreV1SecurityContext.appArmorProfile) &&
        Objects.equals(this.capabilities, ioK8sApiCoreV1SecurityContext.capabilities) &&
        Objects.equals(this.privileged, ioK8sApiCoreV1SecurityContext.privileged) &&
        Objects.equals(this.procMount, ioK8sApiCoreV1SecurityContext.procMount) &&
        Objects.equals(this.readOnlyRootFilesystem, ioK8sApiCoreV1SecurityContext.readOnlyRootFilesystem) &&
        Objects.equals(this.runAsGroup, ioK8sApiCoreV1SecurityContext.runAsGroup) &&
        Objects.equals(this.runAsNonRoot, ioK8sApiCoreV1SecurityContext.runAsNonRoot) &&
        Objects.equals(this.runAsUser, ioK8sApiCoreV1SecurityContext.runAsUser) &&
        Objects.equals(this.seLinuxOptions, ioK8sApiCoreV1SecurityContext.seLinuxOptions) &&
        Objects.equals(this.seccompProfile, ioK8sApiCoreV1SecurityContext.seccompProfile) &&
        Objects.equals(this.windowsOptions, ioK8sApiCoreV1SecurityContext.windowsOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowPrivilegeEscalation, appArmorProfile, capabilities, privileged, procMount, readOnlyRootFilesystem, runAsGroup, runAsNonRoot, runAsUser, seLinuxOptions, seccompProfile, windowsOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1SecurityContext {\n");
    sb.append("    allowPrivilegeEscalation: ").append(toIndentedString(allowPrivilegeEscalation)).append("\n");
    sb.append("    appArmorProfile: ").append(toIndentedString(appArmorProfile)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
    sb.append("    procMount: ").append(toIndentedString(procMount)).append("\n");
    sb.append("    readOnlyRootFilesystem: ").append(toIndentedString(readOnlyRootFilesystem)).append("\n");
    sb.append("    runAsGroup: ").append(toIndentedString(runAsGroup)).append("\n");
    sb.append("    runAsNonRoot: ").append(toIndentedString(runAsNonRoot)).append("\n");
    sb.append("    runAsUser: ").append(toIndentedString(runAsUser)).append("\n");
    sb.append("    seLinuxOptions: ").append(toIndentedString(seLinuxOptions)).append("\n");
    sb.append("    seccompProfile: ").append(toIndentedString(seccompProfile)).append("\n");
    sb.append("    windowsOptions: ").append(toIndentedString(windowsOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowPrivilegeEscalation");
    openapiFields.add("appArmorProfile");
    openapiFields.add("capabilities");
    openapiFields.add("privileged");
    openapiFields.add("procMount");
    openapiFields.add("readOnlyRootFilesystem");
    openapiFields.add("runAsGroup");
    openapiFields.add("runAsNonRoot");
    openapiFields.add("runAsUser");
    openapiFields.add("seLinuxOptions");
    openapiFields.add("seccompProfile");
    openapiFields.add("windowsOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoK8sApiCoreV1SecurityContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoK8sApiCoreV1SecurityContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoK8sApiCoreV1SecurityContext is not found in the empty JSON string", IoK8sApiCoreV1SecurityContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoK8sApiCoreV1SecurityContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoK8sApiCoreV1SecurityContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appArmorProfile`
      if (jsonObj.get("appArmorProfile") != null && !jsonObj.get("appArmorProfile").isJsonNull()) {
        IoK8sApiCoreV1AppArmorProfile.validateJsonElement(jsonObj.get("appArmorProfile"));
      }
      // validate the optional field `capabilities`
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        IoK8sApiCoreV1Capabilities.validateJsonElement(jsonObj.get("capabilities"));
      }
      if ((jsonObj.get("procMount") != null && !jsonObj.get("procMount").isJsonNull()) && !jsonObj.get("procMount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `procMount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("procMount").toString()));
      }
      // validate the optional field `seLinuxOptions`
      if (jsonObj.get("seLinuxOptions") != null && !jsonObj.get("seLinuxOptions").isJsonNull()) {
        IoK8sApiCoreV1SELinuxOptions.validateJsonElement(jsonObj.get("seLinuxOptions"));
      }
      // validate the optional field `seccompProfile`
      if (jsonObj.get("seccompProfile") != null && !jsonObj.get("seccompProfile").isJsonNull()) {
        IoK8sApiCoreV1SeccompProfile.validateJsonElement(jsonObj.get("seccompProfile"));
      }
      // validate the optional field `windowsOptions`
      if (jsonObj.get("windowsOptions") != null && !jsonObj.get("windowsOptions").isJsonNull()) {
        IoK8sApiCoreV1WindowsSecurityContextOptions.validateJsonElement(jsonObj.get("windowsOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoK8sApiCoreV1SecurityContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoK8sApiCoreV1SecurityContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoK8sApiCoreV1SecurityContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoK8sApiCoreV1SecurityContext.class));

       return (TypeAdapter<T>) new TypeAdapter<IoK8sApiCoreV1SecurityContext>() {
           @Override
           public void write(JsonWriter out, IoK8sApiCoreV1SecurityContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoK8sApiCoreV1SecurityContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoK8sApiCoreV1SecurityContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoK8sApiCoreV1SecurityContext
   * @throws IOException if the JSON string is invalid with respect to IoK8sApiCoreV1SecurityContext
   */
  public static IoK8sApiCoreV1SecurityContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoK8sApiCoreV1SecurityContext.class);
  }

  /**
   * Convert an instance of IoK8sApiCoreV1SecurityContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

