/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventPersistence;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1CalendarEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1CalendarEventSource {
  public static final String SERIALIZED_NAME_EXCLUSION_DATES = "exclusionDates";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_DATES)
  @javax.annotation.Nullable
  private List<String> exclusionDates = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  @javax.annotation.Nullable
  private String interval;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PERSISTENCE = "persistence";
  @SerializedName(SERIALIZED_NAME_PERSISTENCE)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventPersistence persistence;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  @javax.annotation.Nullable
  private String schedule;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public IoArgoprojEventsV1alpha1CalendarEventSource() {
  }

  public IoArgoprojEventsV1alpha1CalendarEventSource exclusionDates(@javax.annotation.Nullable List<String> exclusionDates) {
    this.exclusionDates = exclusionDates;
    return this;
  }

  public IoArgoprojEventsV1alpha1CalendarEventSource addExclusionDatesItem(String exclusionDatesItem) {
    if (this.exclusionDates == null) {
      this.exclusionDates = new ArrayList<>();
    }
    this.exclusionDates.add(exclusionDatesItem);
    return this;
  }

  /**
   * ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
   * @return exclusionDates
   */
  @javax.annotation.Nullable
  public List<String> getExclusionDates() {
    return exclusionDates;
  }

  public void setExclusionDates(@javax.annotation.Nullable List<String> exclusionDates) {
    this.exclusionDates = exclusionDates;
  }


  public IoArgoprojEventsV1alpha1CalendarEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1CalendarEventSource interval(@javax.annotation.Nullable String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(@javax.annotation.Nullable String interval) {
    this.interval = interval;
  }


  public IoArgoprojEventsV1alpha1CalendarEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1CalendarEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1CalendarEventSource persistence(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventPersistence persistence) {
    this.persistence = persistence;
    return this;
  }

  /**
   * Get persistence
   * @return persistence
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventPersistence getPersistence() {
    return persistence;
  }

  public void setPersistence(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventPersistence persistence) {
    this.persistence = persistence;
  }


  public IoArgoprojEventsV1alpha1CalendarEventSource schedule(@javax.annotation.Nullable String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(@javax.annotation.Nullable String schedule) {
    this.schedule = schedule;
  }


  public IoArgoprojEventsV1alpha1CalendarEventSource timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1CalendarEventSource ioArgoprojEventsV1alpha1CalendarEventSource = (IoArgoprojEventsV1alpha1CalendarEventSource) o;
    return Objects.equals(this.exclusionDates, ioArgoprojEventsV1alpha1CalendarEventSource.exclusionDates) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1CalendarEventSource.filter) &&
        Objects.equals(this.interval, ioArgoprojEventsV1alpha1CalendarEventSource.interval) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1CalendarEventSource.metadata) &&
        Objects.equals(this.persistence, ioArgoprojEventsV1alpha1CalendarEventSource.persistence) &&
        Objects.equals(this.schedule, ioArgoprojEventsV1alpha1CalendarEventSource.schedule) &&
        Objects.equals(this.timezone, ioArgoprojEventsV1alpha1CalendarEventSource.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exclusionDates, filter, interval, metadata, persistence, schedule, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1CalendarEventSource {\n");
    sb.append("    exclusionDates: ").append(toIndentedString(exclusionDates)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    persistence: ").append(toIndentedString(persistence)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exclusionDates");
    openapiFields.add("filter");
    openapiFields.add("interval");
    openapiFields.add("metadata");
    openapiFields.add("persistence");
    openapiFields.add("schedule");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1CalendarEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1CalendarEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1CalendarEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1CalendarEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1CalendarEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1CalendarEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclusionDates") != null && !jsonObj.get("exclusionDates").isJsonNull() && !jsonObj.get("exclusionDates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusionDates` to be an array in the JSON string but got `%s`", jsonObj.get("exclusionDates").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      // validate the optional field `persistence`
      if (jsonObj.get("persistence") != null && !jsonObj.get("persistence").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventPersistence.validateJsonElement(jsonObj.get("persistence"));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1CalendarEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1CalendarEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1CalendarEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1CalendarEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1CalendarEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1CalendarEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1CalendarEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1CalendarEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1CalendarEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1CalendarEventSource
   */
  public static IoArgoprojEventsV1alpha1CalendarEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1CalendarEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1CalendarEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

