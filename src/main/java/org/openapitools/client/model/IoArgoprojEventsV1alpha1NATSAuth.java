/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1BasicAuth;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1NATSAuth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1NATSAuth {
  public static final String SERIALIZED_NAME_BASIC = "basic";
  @SerializedName(SERIALIZED_NAME_BASIC)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1BasicAuth basic;

  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector credential;

  public static final String SERIALIZED_NAME_NKEY = "nkey";
  @SerializedName(SERIALIZED_NAME_NKEY)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector nkey;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector token;

  public IoArgoprojEventsV1alpha1NATSAuth() {
  }

  public IoArgoprojEventsV1alpha1NATSAuth basic(@javax.annotation.Nullable IoArgoprojEventsV1alpha1BasicAuth basic) {
    this.basic = basic;
    return this;
  }

  /**
   * Get basic
   * @return basic
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1BasicAuth getBasic() {
    return basic;
  }

  public void setBasic(@javax.annotation.Nullable IoArgoprojEventsV1alpha1BasicAuth basic) {
    this.basic = basic;
  }


  public IoArgoprojEventsV1alpha1NATSAuth credential(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector credential) {
    this.credential = credential;
    return this;
  }

  /**
   * Get credential
   * @return credential
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getCredential() {
    return credential;
  }

  public void setCredential(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector credential) {
    this.credential = credential;
  }


  public IoArgoprojEventsV1alpha1NATSAuth nkey(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector nkey) {
    this.nkey = nkey;
    return this;
  }

  /**
   * Get nkey
   * @return nkey
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getNkey() {
    return nkey;
  }

  public void setNkey(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector nkey) {
    this.nkey = nkey;
  }


  public IoArgoprojEventsV1alpha1NATSAuth token(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1NATSAuth ioArgoprojEventsV1alpha1NATSAuth = (IoArgoprojEventsV1alpha1NATSAuth) o;
    return Objects.equals(this.basic, ioArgoprojEventsV1alpha1NATSAuth.basic) &&
        Objects.equals(this.credential, ioArgoprojEventsV1alpha1NATSAuth.credential) &&
        Objects.equals(this.nkey, ioArgoprojEventsV1alpha1NATSAuth.nkey) &&
        Objects.equals(this.token, ioArgoprojEventsV1alpha1NATSAuth.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basic, credential, nkey, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1NATSAuth {\n");
    sb.append("    basic: ").append(toIndentedString(basic)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    nkey: ").append(toIndentedString(nkey)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basic");
    openapiFields.add("credential");
    openapiFields.add("nkey");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1NATSAuth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1NATSAuth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1NATSAuth is not found in the empty JSON string", IoArgoprojEventsV1alpha1NATSAuth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1NATSAuth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1NATSAuth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basic`
      if (jsonObj.get("basic") != null && !jsonObj.get("basic").isJsonNull()) {
        IoArgoprojEventsV1alpha1BasicAuth.validateJsonElement(jsonObj.get("basic"));
      }
      // validate the optional field `credential`
      if (jsonObj.get("credential") != null && !jsonObj.get("credential").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("credential"));
      }
      // validate the optional field `nkey`
      if (jsonObj.get("nkey") != null && !jsonObj.get("nkey").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("nkey"));
      }
      // validate the optional field `token`
      if (jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("token"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1NATSAuth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1NATSAuth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1NATSAuth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1NATSAuth.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1NATSAuth>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1NATSAuth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1NATSAuth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1NATSAuth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1NATSAuth
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1NATSAuth
   */
  public static IoArgoprojEventsV1alpha1NATSAuth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1NATSAuth.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1NATSAuth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

