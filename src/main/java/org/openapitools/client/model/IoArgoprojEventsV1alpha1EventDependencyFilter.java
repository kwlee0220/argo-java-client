/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1DataFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventContext;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1ExprFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1TimeFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventDependencyFilter defines filters and constraints for a io.argoproj.workflow.v1alpha1.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1EventDependencyFilter {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventContext context;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nullable
  private List<IoArgoprojEventsV1alpha1DataFilter> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_LOGICAL_OPERATOR = "dataLogicalOperator";
  @SerializedName(SERIALIZED_NAME_DATA_LOGICAL_OPERATOR)
  @javax.annotation.Nullable
  private String dataLogicalOperator;

  public static final String SERIALIZED_NAME_EXPR_LOGICAL_OPERATOR = "exprLogicalOperator";
  @SerializedName(SERIALIZED_NAME_EXPR_LOGICAL_OPERATOR)
  @javax.annotation.Nullable
  private String exprLogicalOperator;

  public static final String SERIALIZED_NAME_EXPRS = "exprs";
  @SerializedName(SERIALIZED_NAME_EXPRS)
  @javax.annotation.Nullable
  private List<IoArgoprojEventsV1alpha1ExprFilter> exprs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  @javax.annotation.Nullable
  private String script;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1TimeFilter time;

  public IoArgoprojEventsV1alpha1EventDependencyFilter() {
  }

  public IoArgoprojEventsV1alpha1EventDependencyFilter context(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventContext getContext() {
    return context;
  }

  public void setContext(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventContext context) {
    this.context = context;
  }


  public IoArgoprojEventsV1alpha1EventDependencyFilter data(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1DataFilter> data) {
    this.data = data;
    return this;
  }

  public IoArgoprojEventsV1alpha1EventDependencyFilter addDataItem(IoArgoprojEventsV1alpha1DataFilter dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public List<IoArgoprojEventsV1alpha1DataFilter> getData() {
    return data;
  }

  public void setData(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1DataFilter> data) {
    this.data = data;
  }


  public IoArgoprojEventsV1alpha1EventDependencyFilter dataLogicalOperator(@javax.annotation.Nullable String dataLogicalOperator) {
    this.dataLogicalOperator = dataLogicalOperator;
    return this;
  }

  /**
   * DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).
   * @return dataLogicalOperator
   */
  @javax.annotation.Nullable
  public String getDataLogicalOperator() {
    return dataLogicalOperator;
  }

  public void setDataLogicalOperator(@javax.annotation.Nullable String dataLogicalOperator) {
    this.dataLogicalOperator = dataLogicalOperator;
  }


  public IoArgoprojEventsV1alpha1EventDependencyFilter exprLogicalOperator(@javax.annotation.Nullable String exprLogicalOperator) {
    this.exprLogicalOperator = exprLogicalOperator;
    return this;
  }

  /**
   * ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&amp;&amp;), or (||) Is optional and if left blank treated as and (&amp;&amp;).
   * @return exprLogicalOperator
   */
  @javax.annotation.Nullable
  public String getExprLogicalOperator() {
    return exprLogicalOperator;
  }

  public void setExprLogicalOperator(@javax.annotation.Nullable String exprLogicalOperator) {
    this.exprLogicalOperator = exprLogicalOperator;
  }


  public IoArgoprojEventsV1alpha1EventDependencyFilter exprs(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1ExprFilter> exprs) {
    this.exprs = exprs;
    return this;
  }

  public IoArgoprojEventsV1alpha1EventDependencyFilter addExprsItem(IoArgoprojEventsV1alpha1ExprFilter exprsItem) {
    if (this.exprs == null) {
      this.exprs = new ArrayList<>();
    }
    this.exprs.add(exprsItem);
    return this;
  }

  /**
   * Exprs contains the list of expressions evaluated against the event payload.
   * @return exprs
   */
  @javax.annotation.Nullable
  public List<IoArgoprojEventsV1alpha1ExprFilter> getExprs() {
    return exprs;
  }

  public void setExprs(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1ExprFilter> exprs) {
    this.exprs = exprs;
  }


  public IoArgoprojEventsV1alpha1EventDependencyFilter script(@javax.annotation.Nullable String script) {
    this.script = script;
    return this;
  }

  /**
   * Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.
   * @return script
   */
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }

  public void setScript(@javax.annotation.Nullable String script) {
    this.script = script;
  }


  public IoArgoprojEventsV1alpha1EventDependencyFilter time(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TimeFilter time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1TimeFilter getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TimeFilter time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1EventDependencyFilter ioArgoprojEventsV1alpha1EventDependencyFilter = (IoArgoprojEventsV1alpha1EventDependencyFilter) o;
    return Objects.equals(this.context, ioArgoprojEventsV1alpha1EventDependencyFilter.context) &&
        Objects.equals(this.data, ioArgoprojEventsV1alpha1EventDependencyFilter.data) &&
        Objects.equals(this.dataLogicalOperator, ioArgoprojEventsV1alpha1EventDependencyFilter.dataLogicalOperator) &&
        Objects.equals(this.exprLogicalOperator, ioArgoprojEventsV1alpha1EventDependencyFilter.exprLogicalOperator) &&
        Objects.equals(this.exprs, ioArgoprojEventsV1alpha1EventDependencyFilter.exprs) &&
        Objects.equals(this.script, ioArgoprojEventsV1alpha1EventDependencyFilter.script) &&
        Objects.equals(this.time, ioArgoprojEventsV1alpha1EventDependencyFilter.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, data, dataLogicalOperator, exprLogicalOperator, exprs, script, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1EventDependencyFilter {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataLogicalOperator: ").append(toIndentedString(dataLogicalOperator)).append("\n");
    sb.append("    exprLogicalOperator: ").append(toIndentedString(exprLogicalOperator)).append("\n");
    sb.append("    exprs: ").append(toIndentedString(exprs)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("data");
    openapiFields.add("dataLogicalOperator");
    openapiFields.add("exprLogicalOperator");
    openapiFields.add("exprs");
    openapiFields.add("script");
    openapiFields.add("time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1EventDependencyFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1EventDependencyFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1EventDependencyFilter is not found in the empty JSON string", IoArgoprojEventsV1alpha1EventDependencyFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1EventDependencyFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1EventDependencyFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventContext.validateJsonElement(jsonObj.get("context"));
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
        if (jsonArraydata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
          }

          // validate the optional field `data` (array)
          for (int i = 0; i < jsonArraydata.size(); i++) {
            IoArgoprojEventsV1alpha1DataFilter.validateJsonElement(jsonArraydata.get(i));
          };
        }
      }
      if ((jsonObj.get("dataLogicalOperator") != null && !jsonObj.get("dataLogicalOperator").isJsonNull()) && !jsonObj.get("dataLogicalOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataLogicalOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataLogicalOperator").toString()));
      }
      if ((jsonObj.get("exprLogicalOperator") != null && !jsonObj.get("exprLogicalOperator").isJsonNull()) && !jsonObj.get("exprLogicalOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exprLogicalOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exprLogicalOperator").toString()));
      }
      if (jsonObj.get("exprs") != null && !jsonObj.get("exprs").isJsonNull()) {
        JsonArray jsonArrayexprs = jsonObj.getAsJsonArray("exprs");
        if (jsonArrayexprs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exprs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exprs` to be an array in the JSON string but got `%s`", jsonObj.get("exprs").toString()));
          }

          // validate the optional field `exprs` (array)
          for (int i = 0; i < jsonArrayexprs.size(); i++) {
            IoArgoprojEventsV1alpha1ExprFilter.validateJsonElement(jsonArrayexprs.get(i));
          };
        }
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
      // validate the optional field `time`
      if (jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) {
        IoArgoprojEventsV1alpha1TimeFilter.validateJsonElement(jsonObj.get("time"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1EventDependencyFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1EventDependencyFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1EventDependencyFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1EventDependencyFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1EventDependencyFilter>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1EventDependencyFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1EventDependencyFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1EventDependencyFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1EventDependencyFilter
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1EventDependencyFilter
   */
  public static IoArgoprojEventsV1alpha1EventDependencyFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1EventDependencyFilter.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1EventDependencyFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

