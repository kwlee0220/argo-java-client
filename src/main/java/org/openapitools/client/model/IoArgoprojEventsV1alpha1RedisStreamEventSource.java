/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1TLSConfig;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1RedisStreamEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1RedisStreamEventSource {
  public static final String SERIALIZED_NAME_CONSUMER_GROUP = "consumerGroup";
  @SerializedName(SERIALIZED_NAME_CONSUMER_GROUP)
  @javax.annotation.Nullable
  private String consumerGroup;

  public static final String SERIALIZED_NAME_DB = "db";
  @SerializedName(SERIALIZED_NAME_DB)
  @javax.annotation.Nullable
  private Integer db;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_HOST_ADDRESS = "hostAddress";
  @SerializedName(SERIALIZED_NAME_HOST_ADDRESS)
  @javax.annotation.Nullable
  private String hostAddress;

  public static final String SERIALIZED_NAME_MAX_MSG_COUNT_PER_READ = "maxMsgCountPerRead";
  @SerializedName(SERIALIZED_NAME_MAX_MSG_COUNT_PER_READ)
  @javax.annotation.Nullable
  private Integer maxMsgCountPerRead;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector password;

  public static final String SERIALIZED_NAME_STREAMS = "streams";
  @SerializedName(SERIALIZED_NAME_STREAMS)
  @javax.annotation.Nullable
  private List<String> streams = new ArrayList<>();

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1TLSConfig tls;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public IoArgoprojEventsV1alpha1RedisStreamEventSource() {
  }

  public IoArgoprojEventsV1alpha1RedisStreamEventSource consumerGroup(@javax.annotation.Nullable String consumerGroup) {
    this.consumerGroup = consumerGroup;
    return this;
  }

  /**
   * Get consumerGroup
   * @return consumerGroup
   */
  @javax.annotation.Nullable
  public String getConsumerGroup() {
    return consumerGroup;
  }

  public void setConsumerGroup(@javax.annotation.Nullable String consumerGroup) {
    this.consumerGroup = consumerGroup;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource db(@javax.annotation.Nullable Integer db) {
    this.db = db;
    return this;
  }

  /**
   * Get db
   * @return db
   */
  @javax.annotation.Nullable
  public Integer getDb() {
    return db;
  }

  public void setDb(@javax.annotation.Nullable Integer db) {
    this.db = db;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource hostAddress(@javax.annotation.Nullable String hostAddress) {
    this.hostAddress = hostAddress;
    return this;
  }

  /**
   * Get hostAddress
   * @return hostAddress
   */
  @javax.annotation.Nullable
  public String getHostAddress() {
    return hostAddress;
  }

  public void setHostAddress(@javax.annotation.Nullable String hostAddress) {
    this.hostAddress = hostAddress;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource maxMsgCountPerRead(@javax.annotation.Nullable Integer maxMsgCountPerRead) {
    this.maxMsgCountPerRead = maxMsgCountPerRead;
    return this;
  }

  /**
   * Get maxMsgCountPerRead
   * @return maxMsgCountPerRead
   */
  @javax.annotation.Nullable
  public Integer getMaxMsgCountPerRead() {
    return maxMsgCountPerRead;
  }

  public void setMaxMsgCountPerRead(@javax.annotation.Nullable Integer maxMsgCountPerRead) {
    this.maxMsgCountPerRead = maxMsgCountPerRead;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1RedisStreamEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource password(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector password) {
    this.password = password;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource streams(@javax.annotation.Nullable List<String> streams) {
    this.streams = streams;
    return this;
  }

  public IoArgoprojEventsV1alpha1RedisStreamEventSource addStreamsItem(String streamsItem) {
    if (this.streams == null) {
      this.streams = new ArrayList<>();
    }
    this.streams.add(streamsItem);
    return this;
  }

  /**
   * Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.
   * @return streams
   */
  @javax.annotation.Nullable
  public List<String> getStreams() {
    return streams;
  }

  public void setStreams(@javax.annotation.Nullable List<String> streams) {
    this.streams = streams;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource tls(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TLSConfig tls) {
    this.tls = tls;
    return this;
  }

  /**
   * Get tls
   * @return tls
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1TLSConfig getTls() {
    return tls;
  }

  public void setTls(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TLSConfig tls) {
    this.tls = tls;
  }


  public IoArgoprojEventsV1alpha1RedisStreamEventSource username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1RedisStreamEventSource ioArgoprojEventsV1alpha1RedisStreamEventSource = (IoArgoprojEventsV1alpha1RedisStreamEventSource) o;
    return Objects.equals(this.consumerGroup, ioArgoprojEventsV1alpha1RedisStreamEventSource.consumerGroup) &&
        Objects.equals(this.db, ioArgoprojEventsV1alpha1RedisStreamEventSource.db) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1RedisStreamEventSource.filter) &&
        Objects.equals(this.hostAddress, ioArgoprojEventsV1alpha1RedisStreamEventSource.hostAddress) &&
        Objects.equals(this.maxMsgCountPerRead, ioArgoprojEventsV1alpha1RedisStreamEventSource.maxMsgCountPerRead) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1RedisStreamEventSource.metadata) &&
        Objects.equals(this.password, ioArgoprojEventsV1alpha1RedisStreamEventSource.password) &&
        Objects.equals(this.streams, ioArgoprojEventsV1alpha1RedisStreamEventSource.streams) &&
        Objects.equals(this.tls, ioArgoprojEventsV1alpha1RedisStreamEventSource.tls) &&
        Objects.equals(this.username, ioArgoprojEventsV1alpha1RedisStreamEventSource.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerGroup, db, filter, hostAddress, maxMsgCountPerRead, metadata, password, streams, tls, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1RedisStreamEventSource {\n");
    sb.append("    consumerGroup: ").append(toIndentedString(consumerGroup)).append("\n");
    sb.append("    db: ").append(toIndentedString(db)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    hostAddress: ").append(toIndentedString(hostAddress)).append("\n");
    sb.append("    maxMsgCountPerRead: ").append(toIndentedString(maxMsgCountPerRead)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    streams: ").append(toIndentedString(streams)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerGroup");
    openapiFields.add("db");
    openapiFields.add("filter");
    openapiFields.add("hostAddress");
    openapiFields.add("maxMsgCountPerRead");
    openapiFields.add("metadata");
    openapiFields.add("password");
    openapiFields.add("streams");
    openapiFields.add("tls");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1RedisStreamEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1RedisStreamEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1RedisStreamEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1RedisStreamEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1RedisStreamEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1RedisStreamEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumerGroup") != null && !jsonObj.get("consumerGroup").isJsonNull()) && !jsonObj.get("consumerGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerGroup").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("hostAddress") != null && !jsonObj.get("hostAddress").isJsonNull()) && !jsonObj.get("hostAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostAddress").toString()));
      }
      // validate the optional field `password`
      if (jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("password"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("streams") != null && !jsonObj.get("streams").isJsonNull() && !jsonObj.get("streams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `streams` to be an array in the JSON string but got `%s`", jsonObj.get("streams").toString()));
      }
      // validate the optional field `tls`
      if (jsonObj.get("tls") != null && !jsonObj.get("tls").isJsonNull()) {
        IoArgoprojEventsV1alpha1TLSConfig.validateJsonElement(jsonObj.get("tls"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1RedisStreamEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1RedisStreamEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1RedisStreamEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1RedisStreamEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1RedisStreamEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1RedisStreamEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1RedisStreamEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1RedisStreamEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1RedisStreamEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1RedisStreamEventSource
   */
  public static IoArgoprojEventsV1alpha1RedisStreamEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1RedisStreamEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1RedisStreamEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

