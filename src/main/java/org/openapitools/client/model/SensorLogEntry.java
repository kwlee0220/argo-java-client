/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SensorLogEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class SensorLogEntry {
  public static final String SERIALIZED_NAME_DEPENDENCY_NAME = "dependencyName";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_NAME)
  @javax.annotation.Nullable
  private String dependencyName;

  public static final String SERIALIZED_NAME_EVENT_CONTEXT = "eventContext";
  @SerializedName(SERIALIZED_NAME_EVENT_CONTEXT)
  @javax.annotation.Nullable
  private String eventContext;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  @javax.annotation.Nullable
  private String level;

  public static final String SERIALIZED_NAME_MSG = "msg";
  @SerializedName(SERIALIZED_NAME_MSG)
  @javax.annotation.Nullable
  private String msg;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  @javax.annotation.Nullable
  private String namespace;

  public static final String SERIALIZED_NAME_SENSOR_NAME = "sensorName";
  @SerializedName(SERIALIZED_NAME_SENSOR_NAME)
  @javax.annotation.Nullable
  private String sensorName;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_TRIGGER_NAME = "triggerName";
  @SerializedName(SERIALIZED_NAME_TRIGGER_NAME)
  @javax.annotation.Nullable
  private String triggerName;

  public SensorLogEntry() {
  }

  public SensorLogEntry dependencyName(@javax.annotation.Nullable String dependencyName) {
    this.dependencyName = dependencyName;
    return this;
  }

  /**
   * Get dependencyName
   * @return dependencyName
   */
  @javax.annotation.Nullable
  public String getDependencyName() {
    return dependencyName;
  }

  public void setDependencyName(@javax.annotation.Nullable String dependencyName) {
    this.dependencyName = dependencyName;
  }


  public SensorLogEntry eventContext(@javax.annotation.Nullable String eventContext) {
    this.eventContext = eventContext;
    return this;
  }

  /**
   * Get eventContext
   * @return eventContext
   */
  @javax.annotation.Nullable
  public String getEventContext() {
    return eventContext;
  }

  public void setEventContext(@javax.annotation.Nullable String eventContext) {
    this.eventContext = eventContext;
  }


  public SensorLogEntry level(@javax.annotation.Nullable String level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }

  public void setLevel(@javax.annotation.Nullable String level) {
    this.level = level;
  }


  public SensorLogEntry msg(@javax.annotation.Nullable String msg) {
    this.msg = msg;
    return this;
  }

  /**
   * Get msg
   * @return msg
   */
  @javax.annotation.Nullable
  public String getMsg() {
    return msg;
  }

  public void setMsg(@javax.annotation.Nullable String msg) {
    this.msg = msg;
  }


  public SensorLogEntry namespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }


  public SensorLogEntry sensorName(@javax.annotation.Nullable String sensorName) {
    this.sensorName = sensorName;
    return this;
  }

  /**
   * Get sensorName
   * @return sensorName
   */
  @javax.annotation.Nullable
  public String getSensorName() {
    return sensorName;
  }

  public void setSensorName(@javax.annotation.Nullable String sensorName) {
    this.sensorName = sensorName;
  }


  public SensorLogEntry time(@javax.annotation.Nullable OffsetDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
   * @return time
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable OffsetDateTime time) {
    this.time = time;
  }


  public SensorLogEntry triggerName(@javax.annotation.Nullable String triggerName) {
    this.triggerName = triggerName;
    return this;
  }

  /**
   * Get triggerName
   * @return triggerName
   */
  @javax.annotation.Nullable
  public String getTriggerName() {
    return triggerName;
  }

  public void setTriggerName(@javax.annotation.Nullable String triggerName) {
    this.triggerName = triggerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensorLogEntry sensorLogEntry = (SensorLogEntry) o;
    return Objects.equals(this.dependencyName, sensorLogEntry.dependencyName) &&
        Objects.equals(this.eventContext, sensorLogEntry.eventContext) &&
        Objects.equals(this.level, sensorLogEntry.level) &&
        Objects.equals(this.msg, sensorLogEntry.msg) &&
        Objects.equals(this.namespace, sensorLogEntry.namespace) &&
        Objects.equals(this.sensorName, sensorLogEntry.sensorName) &&
        Objects.equals(this.time, sensorLogEntry.time) &&
        Objects.equals(this.triggerName, sensorLogEntry.triggerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencyName, eventContext, level, msg, namespace, sensorName, time, triggerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensorLogEntry {\n");
    sb.append("    dependencyName: ").append(toIndentedString(dependencyName)).append("\n");
    sb.append("    eventContext: ").append(toIndentedString(eventContext)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    sensorName: ").append(toIndentedString(sensorName)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    triggerName: ").append(toIndentedString(triggerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependencyName");
    openapiFields.add("eventContext");
    openapiFields.add("level");
    openapiFields.add("msg");
    openapiFields.add("namespace");
    openapiFields.add("sensorName");
    openapiFields.add("time");
    openapiFields.add("triggerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SensorLogEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SensorLogEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SensorLogEntry is not found in the empty JSON string", SensorLogEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SensorLogEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SensorLogEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dependencyName") != null && !jsonObj.get("dependencyName").isJsonNull()) && !jsonObj.get("dependencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependencyName").toString()));
      }
      if ((jsonObj.get("eventContext") != null && !jsonObj.get("eventContext").isJsonNull()) && !jsonObj.get("eventContext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventContext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventContext").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("sensorName") != null && !jsonObj.get("sensorName").isJsonNull()) && !jsonObj.get("sensorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensorName").toString()));
      }
      if ((jsonObj.get("triggerName") != null && !jsonObj.get("triggerName").isJsonNull()) && !jsonObj.get("triggerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SensorLogEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SensorLogEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SensorLogEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SensorLogEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<SensorLogEntry>() {
           @Override
           public void write(JsonWriter out, SensorLogEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SensorLogEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SensorLogEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SensorLogEntry
   * @throws IOException if the JSON string is invalid with respect to SensorLogEntry
   */
  public static SensorLogEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SensorLogEntry.class);
  }

  /**
   * Convert an instance of SensorLogEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

