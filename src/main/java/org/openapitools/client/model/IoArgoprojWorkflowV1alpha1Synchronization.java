/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Mutex;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1SemaphoreRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Synchronization holds synchronization lock configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1Synchronization {
  public static final String SERIALIZED_NAME_MUTEX = "mutex";
  @SerializedName(SERIALIZED_NAME_MUTEX)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1Mutex mutex;

  public static final String SERIALIZED_NAME_MUTEXES = "mutexes";
  @SerializedName(SERIALIZED_NAME_MUTEXES)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1Mutex> mutexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEMAPHORE = "semaphore";
  @SerializedName(SERIALIZED_NAME_SEMAPHORE)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1SemaphoreRef semaphore;

  public static final String SERIALIZED_NAME_SEMAPHORES = "semaphores";
  @SerializedName(SERIALIZED_NAME_SEMAPHORES)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1SemaphoreRef> semaphores = new ArrayList<>();

  public IoArgoprojWorkflowV1alpha1Synchronization() {
  }

  public IoArgoprojWorkflowV1alpha1Synchronization mutex(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Mutex mutex) {
    this.mutex = mutex;
    return this;
  }

  /**
   * Get mutex
   * @return mutex
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1Mutex getMutex() {
    return mutex;
  }

  public void setMutex(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Mutex mutex) {
    this.mutex = mutex;
  }


  public IoArgoprojWorkflowV1alpha1Synchronization mutexes(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Mutex> mutexes) {
    this.mutexes = mutexes;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1Synchronization addMutexesItem(IoArgoprojWorkflowV1alpha1Mutex mutexesItem) {
    if (this.mutexes == null) {
      this.mutexes = new ArrayList<>();
    }
    this.mutexes.add(mutexesItem);
    return this;
  }

  /**
   * v3.6 and after: Mutexes holds the list of Mutex lock details
   * @return mutexes
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1Mutex> getMutexes() {
    return mutexes;
  }

  public void setMutexes(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Mutex> mutexes) {
    this.mutexes = mutexes;
  }


  public IoArgoprojWorkflowV1alpha1Synchronization semaphore(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1SemaphoreRef semaphore) {
    this.semaphore = semaphore;
    return this;
  }

  /**
   * Get semaphore
   * @return semaphore
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1SemaphoreRef getSemaphore() {
    return semaphore;
  }

  public void setSemaphore(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1SemaphoreRef semaphore) {
    this.semaphore = semaphore;
  }


  public IoArgoprojWorkflowV1alpha1Synchronization semaphores(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1SemaphoreRef> semaphores) {
    this.semaphores = semaphores;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1Synchronization addSemaphoresItem(IoArgoprojWorkflowV1alpha1SemaphoreRef semaphoresItem) {
    if (this.semaphores == null) {
      this.semaphores = new ArrayList<>();
    }
    this.semaphores.add(semaphoresItem);
    return this;
  }

  /**
   * v3.6 and after: Semaphores holds the list of Semaphores configuration
   * @return semaphores
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1SemaphoreRef> getSemaphores() {
    return semaphores;
  }

  public void setSemaphores(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1SemaphoreRef> semaphores) {
    this.semaphores = semaphores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1Synchronization ioArgoprojWorkflowV1alpha1Synchronization = (IoArgoprojWorkflowV1alpha1Synchronization) o;
    return Objects.equals(this.mutex, ioArgoprojWorkflowV1alpha1Synchronization.mutex) &&
        Objects.equals(this.mutexes, ioArgoprojWorkflowV1alpha1Synchronization.mutexes) &&
        Objects.equals(this.semaphore, ioArgoprojWorkflowV1alpha1Synchronization.semaphore) &&
        Objects.equals(this.semaphores, ioArgoprojWorkflowV1alpha1Synchronization.semaphores);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mutex, mutexes, semaphore, semaphores);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1Synchronization {\n");
    sb.append("    mutex: ").append(toIndentedString(mutex)).append("\n");
    sb.append("    mutexes: ").append(toIndentedString(mutexes)).append("\n");
    sb.append("    semaphore: ").append(toIndentedString(semaphore)).append("\n");
    sb.append("    semaphores: ").append(toIndentedString(semaphores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mutex");
    openapiFields.add("mutexes");
    openapiFields.add("semaphore");
    openapiFields.add("semaphores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1Synchronization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1Synchronization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1Synchronization is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1Synchronization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1Synchronization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1Synchronization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mutex`
      if (jsonObj.get("mutex") != null && !jsonObj.get("mutex").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1Mutex.validateJsonElement(jsonObj.get("mutex"));
      }
      if (jsonObj.get("mutexes") != null && !jsonObj.get("mutexes").isJsonNull()) {
        JsonArray jsonArraymutexes = jsonObj.getAsJsonArray("mutexes");
        if (jsonArraymutexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mutexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mutexes` to be an array in the JSON string but got `%s`", jsonObj.get("mutexes").toString()));
          }

          // validate the optional field `mutexes` (array)
          for (int i = 0; i < jsonArraymutexes.size(); i++) {
            IoArgoprojWorkflowV1alpha1Mutex.validateJsonElement(jsonArraymutexes.get(i));
          };
        }
      }
      // validate the optional field `semaphore`
      if (jsonObj.get("semaphore") != null && !jsonObj.get("semaphore").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1SemaphoreRef.validateJsonElement(jsonObj.get("semaphore"));
      }
      if (jsonObj.get("semaphores") != null && !jsonObj.get("semaphores").isJsonNull()) {
        JsonArray jsonArraysemaphores = jsonObj.getAsJsonArray("semaphores");
        if (jsonArraysemaphores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("semaphores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `semaphores` to be an array in the JSON string but got `%s`", jsonObj.get("semaphores").toString()));
          }

          // validate the optional field `semaphores` (array)
          for (int i = 0; i < jsonArraysemaphores.size(); i++) {
            IoArgoprojWorkflowV1alpha1SemaphoreRef.validateJsonElement(jsonArraysemaphores.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1Synchronization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1Synchronization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1Synchronization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1Synchronization.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1Synchronization>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1Synchronization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1Synchronization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1Synchronization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1Synchronization
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1Synchronization
   */
  public static IoArgoprojWorkflowV1alpha1Synchronization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1Synchronization.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1Synchronization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

