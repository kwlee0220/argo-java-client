/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1WebhookContext;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1GitlabEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1GitlabEventSource {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector accessToken;

  public static final String SERIALIZED_NAME_DELETE_HOOK_ON_FINISH = "deleteHookOnFinish";
  @SerializedName(SERIALIZED_NAME_DELETE_HOOK_ON_FINISH)
  @javax.annotation.Nullable
  private Boolean deleteHookOnFinish;

  public static final String SERIALIZED_NAME_ENABLE_S_S_L_VERIFICATION = "enableSSLVerification";
  @SerializedName(SERIALIZED_NAME_ENABLE_S_S_L_VERIFICATION)
  @javax.annotation.Nullable
  private Boolean enableSSLVerification;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  @javax.annotation.Nullable
  private List<String> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_GITLAB_BASE_U_R_L = "gitlabBaseURL";
  @SerializedName(SERIALIZED_NAME_GITLAB_BASE_U_R_L)
  @javax.annotation.Nullable
  private String gitlabBaseURL;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  @javax.annotation.Nullable
  private List<String> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PROJECT_I_D = "projectID";
  @SerializedName(SERIALIZED_NAME_PROJECT_I_D)
  @javax.annotation.Nullable
  private String projectID;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  @javax.annotation.Nullable
  private List<String> projects = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRET_TOKEN = "secretToken";
  @SerializedName(SERIALIZED_NAME_SECRET_TOKEN)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector secretToken;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1WebhookContext webhook;

  public IoArgoprojEventsV1alpha1GitlabEventSource() {
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource accessToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Get accessToken
   * @return accessToken
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector accessToken) {
    this.accessToken = accessToken;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource deleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
    return this;
  }

  /**
   * Get deleteHookOnFinish
   * @return deleteHookOnFinish
   */
  @javax.annotation.Nullable
  public Boolean getDeleteHookOnFinish() {
    return deleteHookOnFinish;
  }

  public void setDeleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource enableSSLVerification(@javax.annotation.Nullable Boolean enableSSLVerification) {
    this.enableSSLVerification = enableSSLVerification;
    return this;
  }

  /**
   * Get enableSSLVerification
   * @return enableSSLVerification
   */
  @javax.annotation.Nullable
  public Boolean getEnableSSLVerification() {
    return enableSSLVerification;
  }

  public void setEnableSSLVerification(@javax.annotation.Nullable Boolean enableSSLVerification) {
    this.enableSSLVerification = enableSSLVerification;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource events(@javax.annotation.Nullable List<String> events) {
    this.events = events;
    return this;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.
   * @return events
   */
  @javax.annotation.Nullable
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(@javax.annotation.Nullable List<String> events) {
    this.events = events;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource gitlabBaseURL(@javax.annotation.Nullable String gitlabBaseURL) {
    this.gitlabBaseURL = gitlabBaseURL;
    return this;
  }

  /**
   * Get gitlabBaseURL
   * @return gitlabBaseURL
   */
  @javax.annotation.Nullable
  public String getGitlabBaseURL() {
    return gitlabBaseURL;
  }

  public void setGitlabBaseURL(@javax.annotation.Nullable String gitlabBaseURL) {
    this.gitlabBaseURL = gitlabBaseURL;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource groups(@javax.annotation.Nullable List<String> groups) {
    this.groups = groups;
    return this;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource addGroupsItem(String groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List<String> getGroups() {
    return groups;
  }

  public void setGroups(@javax.annotation.Nullable List<String> groups) {
    this.groups = groups;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource projectID(@javax.annotation.Nullable String projectID) {
    this.projectID = projectID;
    return this;
  }

  /**
   * Get projectID
   * @return projectID
   */
  @javax.annotation.Nullable
  public String getProjectID() {
    return projectID;
  }

  public void setProjectID(@javax.annotation.Nullable String projectID) {
    this.projectID = projectID;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource projects(@javax.annotation.Nullable List<String> projects) {
    this.projects = projects;
    return this;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource addProjectsItem(String projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  public List<String> getProjects() {
    return projects;
  }

  public void setProjects(@javax.annotation.Nullable List<String> projects) {
    this.projects = projects;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource secretToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector secretToken) {
    this.secretToken = secretToken;
    return this;
  }

  /**
   * Get secretToken
   * @return secretToken
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getSecretToken() {
    return secretToken;
  }

  public void setSecretToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector secretToken) {
    this.secretToken = secretToken;
  }


  public IoArgoprojEventsV1alpha1GitlabEventSource webhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
    return this;
  }

  /**
   * Get webhook
   * @return webhook
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1WebhookContext getWebhook() {
    return webhook;
  }

  public void setWebhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1GitlabEventSource ioArgoprojEventsV1alpha1GitlabEventSource = (IoArgoprojEventsV1alpha1GitlabEventSource) o;
    return Objects.equals(this.accessToken, ioArgoprojEventsV1alpha1GitlabEventSource.accessToken) &&
        Objects.equals(this.deleteHookOnFinish, ioArgoprojEventsV1alpha1GitlabEventSource.deleteHookOnFinish) &&
        Objects.equals(this.enableSSLVerification, ioArgoprojEventsV1alpha1GitlabEventSource.enableSSLVerification) &&
        Objects.equals(this.events, ioArgoprojEventsV1alpha1GitlabEventSource.events) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1GitlabEventSource.filter) &&
        Objects.equals(this.gitlabBaseURL, ioArgoprojEventsV1alpha1GitlabEventSource.gitlabBaseURL) &&
        Objects.equals(this.groups, ioArgoprojEventsV1alpha1GitlabEventSource.groups) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1GitlabEventSource.metadata) &&
        Objects.equals(this.projectID, ioArgoprojEventsV1alpha1GitlabEventSource.projectID) &&
        Objects.equals(this.projects, ioArgoprojEventsV1alpha1GitlabEventSource.projects) &&
        Objects.equals(this.secretToken, ioArgoprojEventsV1alpha1GitlabEventSource.secretToken) &&
        Objects.equals(this.webhook, ioArgoprojEventsV1alpha1GitlabEventSource.webhook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, deleteHookOnFinish, enableSSLVerification, events, filter, gitlabBaseURL, groups, metadata, projectID, projects, secretToken, webhook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1GitlabEventSource {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    deleteHookOnFinish: ").append(toIndentedString(deleteHookOnFinish)).append("\n");
    sb.append("    enableSSLVerification: ").append(toIndentedString(enableSSLVerification)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    gitlabBaseURL: ").append(toIndentedString(gitlabBaseURL)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    projectID: ").append(toIndentedString(projectID)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    secretToken: ").append(toIndentedString(secretToken)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessToken");
    openapiFields.add("deleteHookOnFinish");
    openapiFields.add("enableSSLVerification");
    openapiFields.add("events");
    openapiFields.add("filter");
    openapiFields.add("gitlabBaseURL");
    openapiFields.add("groups");
    openapiFields.add("metadata");
    openapiFields.add("projectID");
    openapiFields.add("projects");
    openapiFields.add("secretToken");
    openapiFields.add("webhook");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1GitlabEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1GitlabEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1GitlabEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1GitlabEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1GitlabEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1GitlabEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessToken`
      if (jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("accessToken"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull() && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("gitlabBaseURL") != null && !jsonObj.get("gitlabBaseURL").isJsonNull()) && !jsonObj.get("gitlabBaseURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitlabBaseURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitlabBaseURL").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      if ((jsonObj.get("projectID") != null && !jsonObj.get("projectID").isJsonNull()) && !jsonObj.get("projectID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull() && !jsonObj.get("projects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projects` to be an array in the JSON string but got `%s`", jsonObj.get("projects").toString()));
      }
      // validate the optional field `secretToken`
      if (jsonObj.get("secretToken") != null && !jsonObj.get("secretToken").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("secretToken"));
      }
      // validate the optional field `webhook`
      if (jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) {
        IoArgoprojEventsV1alpha1WebhookContext.validateJsonElement(jsonObj.get("webhook"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1GitlabEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1GitlabEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1GitlabEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1GitlabEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1GitlabEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1GitlabEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1GitlabEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1GitlabEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1GitlabEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1GitlabEventSource
   */
  public static IoArgoprojEventsV1alpha1GitlabEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1GitlabEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1GitlabEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

