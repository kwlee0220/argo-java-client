/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.IoK8sApiCoreV1EventSeries;
import org.openapitools.client.model.IoK8sApiCoreV1EventSource;
import org.openapitools.client.model.IoK8sApiCoreV1ObjectReference;
import org.openapitools.client.model.IoK8sApimachineryPkgApisMetaV1ObjectMeta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoK8sApiCoreV1Event {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  @javax.annotation.Nullable
  private String action;

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  @javax.annotation.Nullable
  private String apiVersion;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  @javax.annotation.Nullable
  private Integer count;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime eventTime;

  public static final String SERIALIZED_NAME_FIRST_TIMESTAMP = "firstTimestamp";
  @SerializedName(SERIALIZED_NAME_FIRST_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime firstTimestamp;

  public static final String SERIALIZED_NAME_INVOLVED_OBJECT = "involvedObject";
  @SerializedName(SERIALIZED_NAME_INVOLVED_OBJECT)
  @javax.annotation.Nonnull
  private IoK8sApiCoreV1ObjectReference involvedObject;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  @javax.annotation.Nullable
  private String kind;

  public static final String SERIALIZED_NAME_LAST_TIMESTAMP = "lastTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime lastTimestamp;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  @javax.annotation.Nullable
  private String message;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nonnull
  private IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nullable
  private String reason;

  public static final String SERIALIZED_NAME_RELATED = "related";
  @SerializedName(SERIALIZED_NAME_RELATED)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ObjectReference related;

  public static final String SERIALIZED_NAME_REPORTING_COMPONENT = "reportingComponent";
  @SerializedName(SERIALIZED_NAME_REPORTING_COMPONENT)
  @javax.annotation.Nullable
  private String reportingComponent;

  public static final String SERIALIZED_NAME_REPORTING_INSTANCE = "reportingInstance";
  @SerializedName(SERIALIZED_NAME_REPORTING_INSTANCE)
  @javax.annotation.Nullable
  private String reportingInstance;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1EventSeries series;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1EventSource source;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public IoK8sApiCoreV1Event() {
  }

  public IoK8sApiCoreV1Event action(@javax.annotation.Nullable String action) {
    this.action = action;
    return this;
  }

  /**
   * What action was taken/failed regarding to the Regarding object.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(@javax.annotation.Nullable String action) {
    this.action = action;
  }


  public IoK8sApiCoreV1Event apiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public IoK8sApiCoreV1Event count(@javax.annotation.Nullable Integer count) {
    this.count = count;
    return this;
  }

  /**
   * The number of times this event has occurred.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(@javax.annotation.Nullable Integer count) {
    this.count = count;
  }


  public IoK8sApiCoreV1Event eventTime(@javax.annotation.Nullable OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * MicroTime is version of Time with microsecond level precision.
   * @return eventTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventTime() {
    return eventTime;
  }

  public void setEventTime(@javax.annotation.Nullable OffsetDateTime eventTime) {
    this.eventTime = eventTime;
  }


  public IoK8sApiCoreV1Event firstTimestamp(@javax.annotation.Nullable OffsetDateTime firstTimestamp) {
    this.firstTimestamp = firstTimestamp;
    return this;
  }

  /**
   * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
   * @return firstTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstTimestamp() {
    return firstTimestamp;
  }

  public void setFirstTimestamp(@javax.annotation.Nullable OffsetDateTime firstTimestamp) {
    this.firstTimestamp = firstTimestamp;
  }


  public IoK8sApiCoreV1Event involvedObject(@javax.annotation.Nonnull IoK8sApiCoreV1ObjectReference involvedObject) {
    this.involvedObject = involvedObject;
    return this;
  }

  /**
   * Get involvedObject
   * @return involvedObject
   */
  @javax.annotation.Nonnull
  public IoK8sApiCoreV1ObjectReference getInvolvedObject() {
    return involvedObject;
  }

  public void setInvolvedObject(@javax.annotation.Nonnull IoK8sApiCoreV1ObjectReference involvedObject) {
    this.involvedObject = involvedObject;
  }


  public IoK8sApiCoreV1Event kind(@javax.annotation.Nullable String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(@javax.annotation.Nullable String kind) {
    this.kind = kind;
  }


  public IoK8sApiCoreV1Event lastTimestamp(@javax.annotation.Nullable OffsetDateTime lastTimestamp) {
    this.lastTimestamp = lastTimestamp;
    return this;
  }

  /**
   * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
   * @return lastTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastTimestamp() {
    return lastTimestamp;
  }

  public void setLastTimestamp(@javax.annotation.Nullable OffsetDateTime lastTimestamp) {
    this.lastTimestamp = lastTimestamp;
  }


  public IoK8sApiCoreV1Event message(@javax.annotation.Nullable String message) {
    this.message = message;
    return this;
  }

  /**
   * A human-readable description of the status of this operation.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(@javax.annotation.Nullable String message) {
    this.message = message;
  }


  public IoK8sApiCoreV1Event metadata(@javax.annotation.Nonnull IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public IoK8sApimachineryPkgApisMetaV1ObjectMeta getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nonnull IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata) {
    this.metadata = metadata;
  }


  public IoK8sApiCoreV1Event reason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * This should be a short, machine understandable string that gives the reason for the transition into the object&#39;s current status.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
  }


  public IoK8sApiCoreV1Event related(@javax.annotation.Nullable IoK8sApiCoreV1ObjectReference related) {
    this.related = related;
    return this;
  }

  /**
   * Get related
   * @return related
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ObjectReference getRelated() {
    return related;
  }

  public void setRelated(@javax.annotation.Nullable IoK8sApiCoreV1ObjectReference related) {
    this.related = related;
  }


  public IoK8sApiCoreV1Event reportingComponent(@javax.annotation.Nullable String reportingComponent) {
    this.reportingComponent = reportingComponent;
    return this;
  }

  /**
   * Name of the controller that emitted this Event, e.g. &#x60;kubernetes.io/kubelet&#x60;.
   * @return reportingComponent
   */
  @javax.annotation.Nullable
  public String getReportingComponent() {
    return reportingComponent;
  }

  public void setReportingComponent(@javax.annotation.Nullable String reportingComponent) {
    this.reportingComponent = reportingComponent;
  }


  public IoK8sApiCoreV1Event reportingInstance(@javax.annotation.Nullable String reportingInstance) {
    this.reportingInstance = reportingInstance;
    return this;
  }

  /**
   * ID of the controller instance, e.g. &#x60;kubelet-xyzf&#x60;.
   * @return reportingInstance
   */
  @javax.annotation.Nullable
  public String getReportingInstance() {
    return reportingInstance;
  }

  public void setReportingInstance(@javax.annotation.Nullable String reportingInstance) {
    this.reportingInstance = reportingInstance;
  }


  public IoK8sApiCoreV1Event series(@javax.annotation.Nullable IoK8sApiCoreV1EventSeries series) {
    this.series = series;
    return this;
  }

  /**
   * Get series
   * @return series
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1EventSeries getSeries() {
    return series;
  }

  public void setSeries(@javax.annotation.Nullable IoK8sApiCoreV1EventSeries series) {
    this.series = series;
  }


  public IoK8sApiCoreV1Event source(@javax.annotation.Nullable IoK8sApiCoreV1EventSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1EventSource getSource() {
    return source;
  }

  public void setSource(@javax.annotation.Nullable IoK8sApiCoreV1EventSource source) {
    this.source = source;
  }


  public IoK8sApiCoreV1Event type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this event (Normal, Warning), new types could be added in the future
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1Event ioK8sApiCoreV1Event = (IoK8sApiCoreV1Event) o;
    return Objects.equals(this.action, ioK8sApiCoreV1Event.action) &&
        Objects.equals(this.apiVersion, ioK8sApiCoreV1Event.apiVersion) &&
        Objects.equals(this.count, ioK8sApiCoreV1Event.count) &&
        Objects.equals(this.eventTime, ioK8sApiCoreV1Event.eventTime) &&
        Objects.equals(this.firstTimestamp, ioK8sApiCoreV1Event.firstTimestamp) &&
        Objects.equals(this.involvedObject, ioK8sApiCoreV1Event.involvedObject) &&
        Objects.equals(this.kind, ioK8sApiCoreV1Event.kind) &&
        Objects.equals(this.lastTimestamp, ioK8sApiCoreV1Event.lastTimestamp) &&
        Objects.equals(this.message, ioK8sApiCoreV1Event.message) &&
        Objects.equals(this.metadata, ioK8sApiCoreV1Event.metadata) &&
        Objects.equals(this.reason, ioK8sApiCoreV1Event.reason) &&
        Objects.equals(this.related, ioK8sApiCoreV1Event.related) &&
        Objects.equals(this.reportingComponent, ioK8sApiCoreV1Event.reportingComponent) &&
        Objects.equals(this.reportingInstance, ioK8sApiCoreV1Event.reportingInstance) &&
        Objects.equals(this.series, ioK8sApiCoreV1Event.series) &&
        Objects.equals(this.source, ioK8sApiCoreV1Event.source) &&
        Objects.equals(this.type, ioK8sApiCoreV1Event.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, apiVersion, count, eventTime, firstTimestamp, involvedObject, kind, lastTimestamp, message, metadata, reason, related, reportingComponent, reportingInstance, series, source, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1Event {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    firstTimestamp: ").append(toIndentedString(firstTimestamp)).append("\n");
    sb.append("    involvedObject: ").append(toIndentedString(involvedObject)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastTimestamp: ").append(toIndentedString(lastTimestamp)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    reportingComponent: ").append(toIndentedString(reportingComponent)).append("\n");
    sb.append("    reportingInstance: ").append(toIndentedString(reportingInstance)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("apiVersion");
    openapiFields.add("count");
    openapiFields.add("eventTime");
    openapiFields.add("firstTimestamp");
    openapiFields.add("involvedObject");
    openapiFields.add("kind");
    openapiFields.add("lastTimestamp");
    openapiFields.add("message");
    openapiFields.add("metadata");
    openapiFields.add("reason");
    openapiFields.add("related");
    openapiFields.add("reportingComponent");
    openapiFields.add("reportingInstance");
    openapiFields.add("series");
    openapiFields.add("source");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("involvedObject");
    openapiRequiredFields.add("metadata");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoK8sApiCoreV1Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoK8sApiCoreV1Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoK8sApiCoreV1Event is not found in the empty JSON string", IoK8sApiCoreV1Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoK8sApiCoreV1Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoK8sApiCoreV1Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoK8sApiCoreV1Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      // validate the required field `involvedObject`
      IoK8sApiCoreV1ObjectReference.validateJsonElement(jsonObj.get("involvedObject"));
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the required field `metadata`
      IoK8sApimachineryPkgApisMetaV1ObjectMeta.validateJsonElement(jsonObj.get("metadata"));
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `related`
      if (jsonObj.get("related") != null && !jsonObj.get("related").isJsonNull()) {
        IoK8sApiCoreV1ObjectReference.validateJsonElement(jsonObj.get("related"));
      }
      if ((jsonObj.get("reportingComponent") != null && !jsonObj.get("reportingComponent").isJsonNull()) && !jsonObj.get("reportingComponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingComponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingComponent").toString()));
      }
      if ((jsonObj.get("reportingInstance") != null && !jsonObj.get("reportingInstance").isJsonNull()) && !jsonObj.get("reportingInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingInstance").toString()));
      }
      // validate the optional field `series`
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        IoK8sApiCoreV1EventSeries.validateJsonElement(jsonObj.get("series"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        IoK8sApiCoreV1EventSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoK8sApiCoreV1Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoK8sApiCoreV1Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoK8sApiCoreV1Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoK8sApiCoreV1Event.class));

       return (TypeAdapter<T>) new TypeAdapter<IoK8sApiCoreV1Event>() {
           @Override
           public void write(JsonWriter out, IoK8sApiCoreV1Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoK8sApiCoreV1Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoK8sApiCoreV1Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoK8sApiCoreV1Event
   * @throws IOException if the JSON string is invalid with respect to IoK8sApiCoreV1Event
   */
  public static IoK8sApiCoreV1Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoK8sApiCoreV1Event.class);
  }

  /**
   * Convert an instance of IoK8sApiCoreV1Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

