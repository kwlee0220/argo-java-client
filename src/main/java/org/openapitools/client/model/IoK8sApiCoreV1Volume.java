/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1AzureDiskVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1AzureFileVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1CSIVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1CephFSVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1CinderVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1ConfigMapVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1DownwardAPIVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1EmptyDirVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1EphemeralVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1FCVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1FlexVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1FlockerVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1GCEPersistentDiskVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1GitRepoVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1GlusterfsVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1HostPathVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1ISCSIVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1ImageVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1NFSVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1PersistentVolumeClaimVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1PhotonPersistentDiskVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1PortworxVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1ProjectedVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1QuobyteVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1RBDVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1ScaleIOVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1SecretVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1StorageOSVolumeSource;
import org.openapitools.client.model.IoK8sApiCoreV1VsphereVirtualDiskVolumeSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoK8sApiCoreV1Volume {
  public static final String SERIALIZED_NAME_AWS_ELASTIC_BLOCK_STORE = "awsElasticBlockStore";
  @SerializedName(SERIALIZED_NAME_AWS_ELASTIC_BLOCK_STORE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource awsElasticBlockStore;

  public static final String SERIALIZED_NAME_AZURE_DISK = "azureDisk";
  @SerializedName(SERIALIZED_NAME_AZURE_DISK)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1AzureDiskVolumeSource azureDisk;

  public static final String SERIALIZED_NAME_AZURE_FILE = "azureFile";
  @SerializedName(SERIALIZED_NAME_AZURE_FILE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1AzureFileVolumeSource azureFile;

  public static final String SERIALIZED_NAME_CEPHFS = "cephfs";
  @SerializedName(SERIALIZED_NAME_CEPHFS)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1CephFSVolumeSource cephfs;

  public static final String SERIALIZED_NAME_CINDER = "cinder";
  @SerializedName(SERIALIZED_NAME_CINDER)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1CinderVolumeSource cinder;

  public static final String SERIALIZED_NAME_CONFIG_MAP = "configMap";
  @SerializedName(SERIALIZED_NAME_CONFIG_MAP)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ConfigMapVolumeSource configMap;

  public static final String SERIALIZED_NAME_CSI = "csi";
  @SerializedName(SERIALIZED_NAME_CSI)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1CSIVolumeSource csi;

  public static final String SERIALIZED_NAME_DOWNWARD_A_P_I = "downwardAPI";
  @SerializedName(SERIALIZED_NAME_DOWNWARD_A_P_I)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1DownwardAPIVolumeSource downwardAPI;

  public static final String SERIALIZED_NAME_EMPTY_DIR = "emptyDir";
  @SerializedName(SERIALIZED_NAME_EMPTY_DIR)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1EmptyDirVolumeSource emptyDir;

  public static final String SERIALIZED_NAME_EPHEMERAL = "ephemeral";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1EphemeralVolumeSource ephemeral;

  public static final String SERIALIZED_NAME_FC = "fc";
  @SerializedName(SERIALIZED_NAME_FC)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1FCVolumeSource fc;

  public static final String SERIALIZED_NAME_FLEX_VOLUME = "flexVolume";
  @SerializedName(SERIALIZED_NAME_FLEX_VOLUME)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1FlexVolumeSource flexVolume;

  public static final String SERIALIZED_NAME_FLOCKER = "flocker";
  @SerializedName(SERIALIZED_NAME_FLOCKER)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1FlockerVolumeSource flocker;

  public static final String SERIALIZED_NAME_GCE_PERSISTENT_DISK = "gcePersistentDisk";
  @SerializedName(SERIALIZED_NAME_GCE_PERSISTENT_DISK)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1GCEPersistentDiskVolumeSource gcePersistentDisk;

  public static final String SERIALIZED_NAME_GIT_REPO = "gitRepo";
  @SerializedName(SERIALIZED_NAME_GIT_REPO)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1GitRepoVolumeSource gitRepo;

  public static final String SERIALIZED_NAME_GLUSTERFS = "glusterfs";
  @SerializedName(SERIALIZED_NAME_GLUSTERFS)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1GlusterfsVolumeSource glusterfs;

  public static final String SERIALIZED_NAME_HOST_PATH = "hostPath";
  @SerializedName(SERIALIZED_NAME_HOST_PATH)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1HostPathVolumeSource hostPath;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ImageVolumeSource image;

  public static final String SERIALIZED_NAME_ISCSI = "iscsi";
  @SerializedName(SERIALIZED_NAME_ISCSI)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ISCSIVolumeSource iscsi;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NFS = "nfs";
  @SerializedName(SERIALIZED_NAME_NFS)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1NFSVolumeSource nfs;

  public static final String SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM = "persistentVolumeClaim";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_VOLUME_CLAIM)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1PersistentVolumeClaimVolumeSource persistentVolumeClaim;

  public static final String SERIALIZED_NAME_PHOTON_PERSISTENT_DISK = "photonPersistentDisk";
  @SerializedName(SERIALIZED_NAME_PHOTON_PERSISTENT_DISK)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1PhotonPersistentDiskVolumeSource photonPersistentDisk;

  public static final String SERIALIZED_NAME_PORTWORX_VOLUME = "portworxVolume";
  @SerializedName(SERIALIZED_NAME_PORTWORX_VOLUME)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1PortworxVolumeSource portworxVolume;

  public static final String SERIALIZED_NAME_PROJECTED = "projected";
  @SerializedName(SERIALIZED_NAME_PROJECTED)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ProjectedVolumeSource projected;

  public static final String SERIALIZED_NAME_QUOBYTE = "quobyte";
  @SerializedName(SERIALIZED_NAME_QUOBYTE)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1QuobyteVolumeSource quobyte;

  public static final String SERIALIZED_NAME_RBD = "rbd";
  @SerializedName(SERIALIZED_NAME_RBD)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1RBDVolumeSource rbd;

  public static final String SERIALIZED_NAME_SCALE_I_O = "scaleIO";
  @SerializedName(SERIALIZED_NAME_SCALE_I_O)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ScaleIOVolumeSource scaleIO;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretVolumeSource secret;

  public static final String SERIALIZED_NAME_STORAGEOS = "storageos";
  @SerializedName(SERIALIZED_NAME_STORAGEOS)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1StorageOSVolumeSource storageos;

  public static final String SERIALIZED_NAME_VSPHERE_VOLUME = "vsphereVolume";
  @SerializedName(SERIALIZED_NAME_VSPHERE_VOLUME)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1VsphereVirtualDiskVolumeSource vsphereVolume;

  public IoK8sApiCoreV1Volume() {
  }

  public IoK8sApiCoreV1Volume awsElasticBlockStore(@javax.annotation.Nullable IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource awsElasticBlockStore) {
    this.awsElasticBlockStore = awsElasticBlockStore;
    return this;
  }

  /**
   * Get awsElasticBlockStore
   * @return awsElasticBlockStore
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource getAwsElasticBlockStore() {
    return awsElasticBlockStore;
  }

  public void setAwsElasticBlockStore(@javax.annotation.Nullable IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource awsElasticBlockStore) {
    this.awsElasticBlockStore = awsElasticBlockStore;
  }


  public IoK8sApiCoreV1Volume azureDisk(@javax.annotation.Nullable IoK8sApiCoreV1AzureDiskVolumeSource azureDisk) {
    this.azureDisk = azureDisk;
    return this;
  }

  /**
   * Get azureDisk
   * @return azureDisk
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1AzureDiskVolumeSource getAzureDisk() {
    return azureDisk;
  }

  public void setAzureDisk(@javax.annotation.Nullable IoK8sApiCoreV1AzureDiskVolumeSource azureDisk) {
    this.azureDisk = azureDisk;
  }


  public IoK8sApiCoreV1Volume azureFile(@javax.annotation.Nullable IoK8sApiCoreV1AzureFileVolumeSource azureFile) {
    this.azureFile = azureFile;
    return this;
  }

  /**
   * Get azureFile
   * @return azureFile
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1AzureFileVolumeSource getAzureFile() {
    return azureFile;
  }

  public void setAzureFile(@javax.annotation.Nullable IoK8sApiCoreV1AzureFileVolumeSource azureFile) {
    this.azureFile = azureFile;
  }


  public IoK8sApiCoreV1Volume cephfs(@javax.annotation.Nullable IoK8sApiCoreV1CephFSVolumeSource cephfs) {
    this.cephfs = cephfs;
    return this;
  }

  /**
   * Get cephfs
   * @return cephfs
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1CephFSVolumeSource getCephfs() {
    return cephfs;
  }

  public void setCephfs(@javax.annotation.Nullable IoK8sApiCoreV1CephFSVolumeSource cephfs) {
    this.cephfs = cephfs;
  }


  public IoK8sApiCoreV1Volume cinder(@javax.annotation.Nullable IoK8sApiCoreV1CinderVolumeSource cinder) {
    this.cinder = cinder;
    return this;
  }

  /**
   * Get cinder
   * @return cinder
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1CinderVolumeSource getCinder() {
    return cinder;
  }

  public void setCinder(@javax.annotation.Nullable IoK8sApiCoreV1CinderVolumeSource cinder) {
    this.cinder = cinder;
  }


  public IoK8sApiCoreV1Volume configMap(@javax.annotation.Nullable IoK8sApiCoreV1ConfigMapVolumeSource configMap) {
    this.configMap = configMap;
    return this;
  }

  /**
   * Get configMap
   * @return configMap
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ConfigMapVolumeSource getConfigMap() {
    return configMap;
  }

  public void setConfigMap(@javax.annotation.Nullable IoK8sApiCoreV1ConfigMapVolumeSource configMap) {
    this.configMap = configMap;
  }


  public IoK8sApiCoreV1Volume csi(@javax.annotation.Nullable IoK8sApiCoreV1CSIVolumeSource csi) {
    this.csi = csi;
    return this;
  }

  /**
   * Get csi
   * @return csi
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1CSIVolumeSource getCsi() {
    return csi;
  }

  public void setCsi(@javax.annotation.Nullable IoK8sApiCoreV1CSIVolumeSource csi) {
    this.csi = csi;
  }


  public IoK8sApiCoreV1Volume downwardAPI(@javax.annotation.Nullable IoK8sApiCoreV1DownwardAPIVolumeSource downwardAPI) {
    this.downwardAPI = downwardAPI;
    return this;
  }

  /**
   * Get downwardAPI
   * @return downwardAPI
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1DownwardAPIVolumeSource getDownwardAPI() {
    return downwardAPI;
  }

  public void setDownwardAPI(@javax.annotation.Nullable IoK8sApiCoreV1DownwardAPIVolumeSource downwardAPI) {
    this.downwardAPI = downwardAPI;
  }


  public IoK8sApiCoreV1Volume emptyDir(@javax.annotation.Nullable IoK8sApiCoreV1EmptyDirVolumeSource emptyDir) {
    this.emptyDir = emptyDir;
    return this;
  }

  /**
   * Get emptyDir
   * @return emptyDir
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1EmptyDirVolumeSource getEmptyDir() {
    return emptyDir;
  }

  public void setEmptyDir(@javax.annotation.Nullable IoK8sApiCoreV1EmptyDirVolumeSource emptyDir) {
    this.emptyDir = emptyDir;
  }


  public IoK8sApiCoreV1Volume ephemeral(@javax.annotation.Nullable IoK8sApiCoreV1EphemeralVolumeSource ephemeral) {
    this.ephemeral = ephemeral;
    return this;
  }

  /**
   * Get ephemeral
   * @return ephemeral
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1EphemeralVolumeSource getEphemeral() {
    return ephemeral;
  }

  public void setEphemeral(@javax.annotation.Nullable IoK8sApiCoreV1EphemeralVolumeSource ephemeral) {
    this.ephemeral = ephemeral;
  }


  public IoK8sApiCoreV1Volume fc(@javax.annotation.Nullable IoK8sApiCoreV1FCVolumeSource fc) {
    this.fc = fc;
    return this;
  }

  /**
   * Get fc
   * @return fc
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1FCVolumeSource getFc() {
    return fc;
  }

  public void setFc(@javax.annotation.Nullable IoK8sApiCoreV1FCVolumeSource fc) {
    this.fc = fc;
  }


  public IoK8sApiCoreV1Volume flexVolume(@javax.annotation.Nullable IoK8sApiCoreV1FlexVolumeSource flexVolume) {
    this.flexVolume = flexVolume;
    return this;
  }

  /**
   * Get flexVolume
   * @return flexVolume
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1FlexVolumeSource getFlexVolume() {
    return flexVolume;
  }

  public void setFlexVolume(@javax.annotation.Nullable IoK8sApiCoreV1FlexVolumeSource flexVolume) {
    this.flexVolume = flexVolume;
  }


  public IoK8sApiCoreV1Volume flocker(@javax.annotation.Nullable IoK8sApiCoreV1FlockerVolumeSource flocker) {
    this.flocker = flocker;
    return this;
  }

  /**
   * Get flocker
   * @return flocker
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1FlockerVolumeSource getFlocker() {
    return flocker;
  }

  public void setFlocker(@javax.annotation.Nullable IoK8sApiCoreV1FlockerVolumeSource flocker) {
    this.flocker = flocker;
  }


  public IoK8sApiCoreV1Volume gcePersistentDisk(@javax.annotation.Nullable IoK8sApiCoreV1GCEPersistentDiskVolumeSource gcePersistentDisk) {
    this.gcePersistentDisk = gcePersistentDisk;
    return this;
  }

  /**
   * Get gcePersistentDisk
   * @return gcePersistentDisk
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1GCEPersistentDiskVolumeSource getGcePersistentDisk() {
    return gcePersistentDisk;
  }

  public void setGcePersistentDisk(@javax.annotation.Nullable IoK8sApiCoreV1GCEPersistentDiskVolumeSource gcePersistentDisk) {
    this.gcePersistentDisk = gcePersistentDisk;
  }


  public IoK8sApiCoreV1Volume gitRepo(@javax.annotation.Nullable IoK8sApiCoreV1GitRepoVolumeSource gitRepo) {
    this.gitRepo = gitRepo;
    return this;
  }

  /**
   * Get gitRepo
   * @return gitRepo
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1GitRepoVolumeSource getGitRepo() {
    return gitRepo;
  }

  public void setGitRepo(@javax.annotation.Nullable IoK8sApiCoreV1GitRepoVolumeSource gitRepo) {
    this.gitRepo = gitRepo;
  }


  public IoK8sApiCoreV1Volume glusterfs(@javax.annotation.Nullable IoK8sApiCoreV1GlusterfsVolumeSource glusterfs) {
    this.glusterfs = glusterfs;
    return this;
  }

  /**
   * Get glusterfs
   * @return glusterfs
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1GlusterfsVolumeSource getGlusterfs() {
    return glusterfs;
  }

  public void setGlusterfs(@javax.annotation.Nullable IoK8sApiCoreV1GlusterfsVolumeSource glusterfs) {
    this.glusterfs = glusterfs;
  }


  public IoK8sApiCoreV1Volume hostPath(@javax.annotation.Nullable IoK8sApiCoreV1HostPathVolumeSource hostPath) {
    this.hostPath = hostPath;
    return this;
  }

  /**
   * Get hostPath
   * @return hostPath
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1HostPathVolumeSource getHostPath() {
    return hostPath;
  }

  public void setHostPath(@javax.annotation.Nullable IoK8sApiCoreV1HostPathVolumeSource hostPath) {
    this.hostPath = hostPath;
  }


  public IoK8sApiCoreV1Volume image(@javax.annotation.Nullable IoK8sApiCoreV1ImageVolumeSource image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ImageVolumeSource getImage() {
    return image;
  }

  public void setImage(@javax.annotation.Nullable IoK8sApiCoreV1ImageVolumeSource image) {
    this.image = image;
  }


  public IoK8sApiCoreV1Volume iscsi(@javax.annotation.Nullable IoK8sApiCoreV1ISCSIVolumeSource iscsi) {
    this.iscsi = iscsi;
    return this;
  }

  /**
   * Get iscsi
   * @return iscsi
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ISCSIVolumeSource getIscsi() {
    return iscsi;
  }

  public void setIscsi(@javax.annotation.Nullable IoK8sApiCoreV1ISCSIVolumeSource iscsi) {
    this.iscsi = iscsi;
  }


  public IoK8sApiCoreV1Volume name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public IoK8sApiCoreV1Volume nfs(@javax.annotation.Nullable IoK8sApiCoreV1NFSVolumeSource nfs) {
    this.nfs = nfs;
    return this;
  }

  /**
   * Get nfs
   * @return nfs
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1NFSVolumeSource getNfs() {
    return nfs;
  }

  public void setNfs(@javax.annotation.Nullable IoK8sApiCoreV1NFSVolumeSource nfs) {
    this.nfs = nfs;
  }


  public IoK8sApiCoreV1Volume persistentVolumeClaim(@javax.annotation.Nullable IoK8sApiCoreV1PersistentVolumeClaimVolumeSource persistentVolumeClaim) {
    this.persistentVolumeClaim = persistentVolumeClaim;
    return this;
  }

  /**
   * Get persistentVolumeClaim
   * @return persistentVolumeClaim
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1PersistentVolumeClaimVolumeSource getPersistentVolumeClaim() {
    return persistentVolumeClaim;
  }

  public void setPersistentVolumeClaim(@javax.annotation.Nullable IoK8sApiCoreV1PersistentVolumeClaimVolumeSource persistentVolumeClaim) {
    this.persistentVolumeClaim = persistentVolumeClaim;
  }


  public IoK8sApiCoreV1Volume photonPersistentDisk(@javax.annotation.Nullable IoK8sApiCoreV1PhotonPersistentDiskVolumeSource photonPersistentDisk) {
    this.photonPersistentDisk = photonPersistentDisk;
    return this;
  }

  /**
   * Get photonPersistentDisk
   * @return photonPersistentDisk
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1PhotonPersistentDiskVolumeSource getPhotonPersistentDisk() {
    return photonPersistentDisk;
  }

  public void setPhotonPersistentDisk(@javax.annotation.Nullable IoK8sApiCoreV1PhotonPersistentDiskVolumeSource photonPersistentDisk) {
    this.photonPersistentDisk = photonPersistentDisk;
  }


  public IoK8sApiCoreV1Volume portworxVolume(@javax.annotation.Nullable IoK8sApiCoreV1PortworxVolumeSource portworxVolume) {
    this.portworxVolume = portworxVolume;
    return this;
  }

  /**
   * Get portworxVolume
   * @return portworxVolume
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1PortworxVolumeSource getPortworxVolume() {
    return portworxVolume;
  }

  public void setPortworxVolume(@javax.annotation.Nullable IoK8sApiCoreV1PortworxVolumeSource portworxVolume) {
    this.portworxVolume = portworxVolume;
  }


  public IoK8sApiCoreV1Volume projected(@javax.annotation.Nullable IoK8sApiCoreV1ProjectedVolumeSource projected) {
    this.projected = projected;
    return this;
  }

  /**
   * Get projected
   * @return projected
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ProjectedVolumeSource getProjected() {
    return projected;
  }

  public void setProjected(@javax.annotation.Nullable IoK8sApiCoreV1ProjectedVolumeSource projected) {
    this.projected = projected;
  }


  public IoK8sApiCoreV1Volume quobyte(@javax.annotation.Nullable IoK8sApiCoreV1QuobyteVolumeSource quobyte) {
    this.quobyte = quobyte;
    return this;
  }

  /**
   * Get quobyte
   * @return quobyte
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1QuobyteVolumeSource getQuobyte() {
    return quobyte;
  }

  public void setQuobyte(@javax.annotation.Nullable IoK8sApiCoreV1QuobyteVolumeSource quobyte) {
    this.quobyte = quobyte;
  }


  public IoK8sApiCoreV1Volume rbd(@javax.annotation.Nullable IoK8sApiCoreV1RBDVolumeSource rbd) {
    this.rbd = rbd;
    return this;
  }

  /**
   * Get rbd
   * @return rbd
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1RBDVolumeSource getRbd() {
    return rbd;
  }

  public void setRbd(@javax.annotation.Nullable IoK8sApiCoreV1RBDVolumeSource rbd) {
    this.rbd = rbd;
  }


  public IoK8sApiCoreV1Volume scaleIO(@javax.annotation.Nullable IoK8sApiCoreV1ScaleIOVolumeSource scaleIO) {
    this.scaleIO = scaleIO;
    return this;
  }

  /**
   * Get scaleIO
   * @return scaleIO
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ScaleIOVolumeSource getScaleIO() {
    return scaleIO;
  }

  public void setScaleIO(@javax.annotation.Nullable IoK8sApiCoreV1ScaleIOVolumeSource scaleIO) {
    this.scaleIO = scaleIO;
  }


  public IoK8sApiCoreV1Volume secret(@javax.annotation.Nullable IoK8sApiCoreV1SecretVolumeSource secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretVolumeSource getSecret() {
    return secret;
  }

  public void setSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretVolumeSource secret) {
    this.secret = secret;
  }


  public IoK8sApiCoreV1Volume storageos(@javax.annotation.Nullable IoK8sApiCoreV1StorageOSVolumeSource storageos) {
    this.storageos = storageos;
    return this;
  }

  /**
   * Get storageos
   * @return storageos
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1StorageOSVolumeSource getStorageos() {
    return storageos;
  }

  public void setStorageos(@javax.annotation.Nullable IoK8sApiCoreV1StorageOSVolumeSource storageos) {
    this.storageos = storageos;
  }


  public IoK8sApiCoreV1Volume vsphereVolume(@javax.annotation.Nullable IoK8sApiCoreV1VsphereVirtualDiskVolumeSource vsphereVolume) {
    this.vsphereVolume = vsphereVolume;
    return this;
  }

  /**
   * Get vsphereVolume
   * @return vsphereVolume
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1VsphereVirtualDiskVolumeSource getVsphereVolume() {
    return vsphereVolume;
  }

  public void setVsphereVolume(@javax.annotation.Nullable IoK8sApiCoreV1VsphereVirtualDiskVolumeSource vsphereVolume) {
    this.vsphereVolume = vsphereVolume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1Volume ioK8sApiCoreV1Volume = (IoK8sApiCoreV1Volume) o;
    return Objects.equals(this.awsElasticBlockStore, ioK8sApiCoreV1Volume.awsElasticBlockStore) &&
        Objects.equals(this.azureDisk, ioK8sApiCoreV1Volume.azureDisk) &&
        Objects.equals(this.azureFile, ioK8sApiCoreV1Volume.azureFile) &&
        Objects.equals(this.cephfs, ioK8sApiCoreV1Volume.cephfs) &&
        Objects.equals(this.cinder, ioK8sApiCoreV1Volume.cinder) &&
        Objects.equals(this.configMap, ioK8sApiCoreV1Volume.configMap) &&
        Objects.equals(this.csi, ioK8sApiCoreV1Volume.csi) &&
        Objects.equals(this.downwardAPI, ioK8sApiCoreV1Volume.downwardAPI) &&
        Objects.equals(this.emptyDir, ioK8sApiCoreV1Volume.emptyDir) &&
        Objects.equals(this.ephemeral, ioK8sApiCoreV1Volume.ephemeral) &&
        Objects.equals(this.fc, ioK8sApiCoreV1Volume.fc) &&
        Objects.equals(this.flexVolume, ioK8sApiCoreV1Volume.flexVolume) &&
        Objects.equals(this.flocker, ioK8sApiCoreV1Volume.flocker) &&
        Objects.equals(this.gcePersistentDisk, ioK8sApiCoreV1Volume.gcePersistentDisk) &&
        Objects.equals(this.gitRepo, ioK8sApiCoreV1Volume.gitRepo) &&
        Objects.equals(this.glusterfs, ioK8sApiCoreV1Volume.glusterfs) &&
        Objects.equals(this.hostPath, ioK8sApiCoreV1Volume.hostPath) &&
        Objects.equals(this.image, ioK8sApiCoreV1Volume.image) &&
        Objects.equals(this.iscsi, ioK8sApiCoreV1Volume.iscsi) &&
        Objects.equals(this.name, ioK8sApiCoreV1Volume.name) &&
        Objects.equals(this.nfs, ioK8sApiCoreV1Volume.nfs) &&
        Objects.equals(this.persistentVolumeClaim, ioK8sApiCoreV1Volume.persistentVolumeClaim) &&
        Objects.equals(this.photonPersistentDisk, ioK8sApiCoreV1Volume.photonPersistentDisk) &&
        Objects.equals(this.portworxVolume, ioK8sApiCoreV1Volume.portworxVolume) &&
        Objects.equals(this.projected, ioK8sApiCoreV1Volume.projected) &&
        Objects.equals(this.quobyte, ioK8sApiCoreV1Volume.quobyte) &&
        Objects.equals(this.rbd, ioK8sApiCoreV1Volume.rbd) &&
        Objects.equals(this.scaleIO, ioK8sApiCoreV1Volume.scaleIO) &&
        Objects.equals(this.secret, ioK8sApiCoreV1Volume.secret) &&
        Objects.equals(this.storageos, ioK8sApiCoreV1Volume.storageos) &&
        Objects.equals(this.vsphereVolume, ioK8sApiCoreV1Volume.vsphereVolume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsElasticBlockStore, azureDisk, azureFile, cephfs, cinder, configMap, csi, downwardAPI, emptyDir, ephemeral, fc, flexVolume, flocker, gcePersistentDisk, gitRepo, glusterfs, hostPath, image, iscsi, name, nfs, persistentVolumeClaim, photonPersistentDisk, portworxVolume, projected, quobyte, rbd, scaleIO, secret, storageos, vsphereVolume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1Volume {\n");
    sb.append("    awsElasticBlockStore: ").append(toIndentedString(awsElasticBlockStore)).append("\n");
    sb.append("    azureDisk: ").append(toIndentedString(azureDisk)).append("\n");
    sb.append("    azureFile: ").append(toIndentedString(azureFile)).append("\n");
    sb.append("    cephfs: ").append(toIndentedString(cephfs)).append("\n");
    sb.append("    cinder: ").append(toIndentedString(cinder)).append("\n");
    sb.append("    configMap: ").append(toIndentedString(configMap)).append("\n");
    sb.append("    csi: ").append(toIndentedString(csi)).append("\n");
    sb.append("    downwardAPI: ").append(toIndentedString(downwardAPI)).append("\n");
    sb.append("    emptyDir: ").append(toIndentedString(emptyDir)).append("\n");
    sb.append("    ephemeral: ").append(toIndentedString(ephemeral)).append("\n");
    sb.append("    fc: ").append(toIndentedString(fc)).append("\n");
    sb.append("    flexVolume: ").append(toIndentedString(flexVolume)).append("\n");
    sb.append("    flocker: ").append(toIndentedString(flocker)).append("\n");
    sb.append("    gcePersistentDisk: ").append(toIndentedString(gcePersistentDisk)).append("\n");
    sb.append("    gitRepo: ").append(toIndentedString(gitRepo)).append("\n");
    sb.append("    glusterfs: ").append(toIndentedString(glusterfs)).append("\n");
    sb.append("    hostPath: ").append(toIndentedString(hostPath)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    iscsi: ").append(toIndentedString(iscsi)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nfs: ").append(toIndentedString(nfs)).append("\n");
    sb.append("    persistentVolumeClaim: ").append(toIndentedString(persistentVolumeClaim)).append("\n");
    sb.append("    photonPersistentDisk: ").append(toIndentedString(photonPersistentDisk)).append("\n");
    sb.append("    portworxVolume: ").append(toIndentedString(portworxVolume)).append("\n");
    sb.append("    projected: ").append(toIndentedString(projected)).append("\n");
    sb.append("    quobyte: ").append(toIndentedString(quobyte)).append("\n");
    sb.append("    rbd: ").append(toIndentedString(rbd)).append("\n");
    sb.append("    scaleIO: ").append(toIndentedString(scaleIO)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    storageos: ").append(toIndentedString(storageos)).append("\n");
    sb.append("    vsphereVolume: ").append(toIndentedString(vsphereVolume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awsElasticBlockStore");
    openapiFields.add("azureDisk");
    openapiFields.add("azureFile");
    openapiFields.add("cephfs");
    openapiFields.add("cinder");
    openapiFields.add("configMap");
    openapiFields.add("csi");
    openapiFields.add("downwardAPI");
    openapiFields.add("emptyDir");
    openapiFields.add("ephemeral");
    openapiFields.add("fc");
    openapiFields.add("flexVolume");
    openapiFields.add("flocker");
    openapiFields.add("gcePersistentDisk");
    openapiFields.add("gitRepo");
    openapiFields.add("glusterfs");
    openapiFields.add("hostPath");
    openapiFields.add("image");
    openapiFields.add("iscsi");
    openapiFields.add("name");
    openapiFields.add("nfs");
    openapiFields.add("persistentVolumeClaim");
    openapiFields.add("photonPersistentDisk");
    openapiFields.add("portworxVolume");
    openapiFields.add("projected");
    openapiFields.add("quobyte");
    openapiFields.add("rbd");
    openapiFields.add("scaleIO");
    openapiFields.add("secret");
    openapiFields.add("storageos");
    openapiFields.add("vsphereVolume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoK8sApiCoreV1Volume
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoK8sApiCoreV1Volume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoK8sApiCoreV1Volume is not found in the empty JSON string", IoK8sApiCoreV1Volume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoK8sApiCoreV1Volume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoK8sApiCoreV1Volume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoK8sApiCoreV1Volume.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `awsElasticBlockStore`
      if (jsonObj.get("awsElasticBlockStore") != null && !jsonObj.get("awsElasticBlockStore").isJsonNull()) {
        IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource.validateJsonElement(jsonObj.get("awsElasticBlockStore"));
      }
      // validate the optional field `azureDisk`
      if (jsonObj.get("azureDisk") != null && !jsonObj.get("azureDisk").isJsonNull()) {
        IoK8sApiCoreV1AzureDiskVolumeSource.validateJsonElement(jsonObj.get("azureDisk"));
      }
      // validate the optional field `azureFile`
      if (jsonObj.get("azureFile") != null && !jsonObj.get("azureFile").isJsonNull()) {
        IoK8sApiCoreV1AzureFileVolumeSource.validateJsonElement(jsonObj.get("azureFile"));
      }
      // validate the optional field `cephfs`
      if (jsonObj.get("cephfs") != null && !jsonObj.get("cephfs").isJsonNull()) {
        IoK8sApiCoreV1CephFSVolumeSource.validateJsonElement(jsonObj.get("cephfs"));
      }
      // validate the optional field `cinder`
      if (jsonObj.get("cinder") != null && !jsonObj.get("cinder").isJsonNull()) {
        IoK8sApiCoreV1CinderVolumeSource.validateJsonElement(jsonObj.get("cinder"));
      }
      // validate the optional field `configMap`
      if (jsonObj.get("configMap") != null && !jsonObj.get("configMap").isJsonNull()) {
        IoK8sApiCoreV1ConfigMapVolumeSource.validateJsonElement(jsonObj.get("configMap"));
      }
      // validate the optional field `csi`
      if (jsonObj.get("csi") != null && !jsonObj.get("csi").isJsonNull()) {
        IoK8sApiCoreV1CSIVolumeSource.validateJsonElement(jsonObj.get("csi"));
      }
      // validate the optional field `downwardAPI`
      if (jsonObj.get("downwardAPI") != null && !jsonObj.get("downwardAPI").isJsonNull()) {
        IoK8sApiCoreV1DownwardAPIVolumeSource.validateJsonElement(jsonObj.get("downwardAPI"));
      }
      // validate the optional field `emptyDir`
      if (jsonObj.get("emptyDir") != null && !jsonObj.get("emptyDir").isJsonNull()) {
        IoK8sApiCoreV1EmptyDirVolumeSource.validateJsonElement(jsonObj.get("emptyDir"));
      }
      // validate the optional field `ephemeral`
      if (jsonObj.get("ephemeral") != null && !jsonObj.get("ephemeral").isJsonNull()) {
        IoK8sApiCoreV1EphemeralVolumeSource.validateJsonElement(jsonObj.get("ephemeral"));
      }
      // validate the optional field `fc`
      if (jsonObj.get("fc") != null && !jsonObj.get("fc").isJsonNull()) {
        IoK8sApiCoreV1FCVolumeSource.validateJsonElement(jsonObj.get("fc"));
      }
      // validate the optional field `flexVolume`
      if (jsonObj.get("flexVolume") != null && !jsonObj.get("flexVolume").isJsonNull()) {
        IoK8sApiCoreV1FlexVolumeSource.validateJsonElement(jsonObj.get("flexVolume"));
      }
      // validate the optional field `flocker`
      if (jsonObj.get("flocker") != null && !jsonObj.get("flocker").isJsonNull()) {
        IoK8sApiCoreV1FlockerVolumeSource.validateJsonElement(jsonObj.get("flocker"));
      }
      // validate the optional field `gcePersistentDisk`
      if (jsonObj.get("gcePersistentDisk") != null && !jsonObj.get("gcePersistentDisk").isJsonNull()) {
        IoK8sApiCoreV1GCEPersistentDiskVolumeSource.validateJsonElement(jsonObj.get("gcePersistentDisk"));
      }
      // validate the optional field `gitRepo`
      if (jsonObj.get("gitRepo") != null && !jsonObj.get("gitRepo").isJsonNull()) {
        IoK8sApiCoreV1GitRepoVolumeSource.validateJsonElement(jsonObj.get("gitRepo"));
      }
      // validate the optional field `glusterfs`
      if (jsonObj.get("glusterfs") != null && !jsonObj.get("glusterfs").isJsonNull()) {
        IoK8sApiCoreV1GlusterfsVolumeSource.validateJsonElement(jsonObj.get("glusterfs"));
      }
      // validate the optional field `hostPath`
      if (jsonObj.get("hostPath") != null && !jsonObj.get("hostPath").isJsonNull()) {
        IoK8sApiCoreV1HostPathVolumeSource.validateJsonElement(jsonObj.get("hostPath"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        IoK8sApiCoreV1ImageVolumeSource.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `iscsi`
      if (jsonObj.get("iscsi") != null && !jsonObj.get("iscsi").isJsonNull()) {
        IoK8sApiCoreV1ISCSIVolumeSource.validateJsonElement(jsonObj.get("iscsi"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nfs`
      if (jsonObj.get("nfs") != null && !jsonObj.get("nfs").isJsonNull()) {
        IoK8sApiCoreV1NFSVolumeSource.validateJsonElement(jsonObj.get("nfs"));
      }
      // validate the optional field `persistentVolumeClaim`
      if (jsonObj.get("persistentVolumeClaim") != null && !jsonObj.get("persistentVolumeClaim").isJsonNull()) {
        IoK8sApiCoreV1PersistentVolumeClaimVolumeSource.validateJsonElement(jsonObj.get("persistentVolumeClaim"));
      }
      // validate the optional field `photonPersistentDisk`
      if (jsonObj.get("photonPersistentDisk") != null && !jsonObj.get("photonPersistentDisk").isJsonNull()) {
        IoK8sApiCoreV1PhotonPersistentDiskVolumeSource.validateJsonElement(jsonObj.get("photonPersistentDisk"));
      }
      // validate the optional field `portworxVolume`
      if (jsonObj.get("portworxVolume") != null && !jsonObj.get("portworxVolume").isJsonNull()) {
        IoK8sApiCoreV1PortworxVolumeSource.validateJsonElement(jsonObj.get("portworxVolume"));
      }
      // validate the optional field `projected`
      if (jsonObj.get("projected") != null && !jsonObj.get("projected").isJsonNull()) {
        IoK8sApiCoreV1ProjectedVolumeSource.validateJsonElement(jsonObj.get("projected"));
      }
      // validate the optional field `quobyte`
      if (jsonObj.get("quobyte") != null && !jsonObj.get("quobyte").isJsonNull()) {
        IoK8sApiCoreV1QuobyteVolumeSource.validateJsonElement(jsonObj.get("quobyte"));
      }
      // validate the optional field `rbd`
      if (jsonObj.get("rbd") != null && !jsonObj.get("rbd").isJsonNull()) {
        IoK8sApiCoreV1RBDVolumeSource.validateJsonElement(jsonObj.get("rbd"));
      }
      // validate the optional field `scaleIO`
      if (jsonObj.get("scaleIO") != null && !jsonObj.get("scaleIO").isJsonNull()) {
        IoK8sApiCoreV1ScaleIOVolumeSource.validateJsonElement(jsonObj.get("scaleIO"));
      }
      // validate the optional field `secret`
      if (jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) {
        IoK8sApiCoreV1SecretVolumeSource.validateJsonElement(jsonObj.get("secret"));
      }
      // validate the optional field `storageos`
      if (jsonObj.get("storageos") != null && !jsonObj.get("storageos").isJsonNull()) {
        IoK8sApiCoreV1StorageOSVolumeSource.validateJsonElement(jsonObj.get("storageos"));
      }
      // validate the optional field `vsphereVolume`
      if (jsonObj.get("vsphereVolume") != null && !jsonObj.get("vsphereVolume").isJsonNull()) {
        IoK8sApiCoreV1VsphereVirtualDiskVolumeSource.validateJsonElement(jsonObj.get("vsphereVolume"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoK8sApiCoreV1Volume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoK8sApiCoreV1Volume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoK8sApiCoreV1Volume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoK8sApiCoreV1Volume.class));

       return (TypeAdapter<T>) new TypeAdapter<IoK8sApiCoreV1Volume>() {
           @Override
           public void write(JsonWriter out, IoK8sApiCoreV1Volume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoK8sApiCoreV1Volume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoK8sApiCoreV1Volume given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoK8sApiCoreV1Volume
   * @throws IOException if the JSON string is invalid with respect to IoK8sApiCoreV1Volume
   */
  public static IoK8sApiCoreV1Volume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoK8sApiCoreV1Volume.class);
  }

  /**
   * Convert an instance of IoK8sApiCoreV1Volume to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

