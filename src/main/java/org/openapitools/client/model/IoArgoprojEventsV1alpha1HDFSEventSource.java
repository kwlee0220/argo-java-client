/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1WatchPathConfig;
import org.openapitools.client.model.IoK8sApiCoreV1ConfigMapKeySelector;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1HDFSEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1HDFSEventSource {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  @javax.annotation.Nullable
  private List<String> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_INTERVAL = "checkInterval";
  @SerializedName(SERIALIZED_NAME_CHECK_INTERVAL)
  @javax.annotation.Nullable
  private String checkInterval;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_HDFS_USER = "hdfsUser";
  @SerializedName(SERIALIZED_NAME_HDFS_USER)
  @javax.annotation.Nullable
  private String hdfsUser;

  public static final String SERIALIZED_NAME_KRB_C_CACHE_SECRET = "krbCCacheSecret";
  @SerializedName(SERIALIZED_NAME_KRB_C_CACHE_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector krbCCacheSecret;

  public static final String SERIALIZED_NAME_KRB_CONFIG_CONFIG_MAP = "krbConfigConfigMap";
  @SerializedName(SERIALIZED_NAME_KRB_CONFIG_CONFIG_MAP)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ConfigMapKeySelector krbConfigConfigMap;

  public static final String SERIALIZED_NAME_KRB_KEYTAB_SECRET = "krbKeytabSecret";
  @SerializedName(SERIALIZED_NAME_KRB_KEYTAB_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector krbKeytabSecret;

  public static final String SERIALIZED_NAME_KRB_REALM = "krbRealm";
  @SerializedName(SERIALIZED_NAME_KRB_REALM)
  @javax.annotation.Nullable
  private String krbRealm;

  public static final String SERIALIZED_NAME_KRB_SERVICE_PRINCIPAL_NAME = "krbServicePrincipalName";
  @SerializedName(SERIALIZED_NAME_KRB_SERVICE_PRINCIPAL_NAME)
  @javax.annotation.Nullable
  private String krbServicePrincipalName;

  public static final String SERIALIZED_NAME_KRB_USERNAME = "krbUsername";
  @SerializedName(SERIALIZED_NAME_KRB_USERNAME)
  @javax.annotation.Nullable
  private String krbUsername;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_WATCH_PATH_CONFIG = "watchPathConfig";
  @SerializedName(SERIALIZED_NAME_WATCH_PATH_CONFIG)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1WatchPathConfig watchPathConfig;

  public IoArgoprojEventsV1alpha1HDFSEventSource() {
  }

  public IoArgoprojEventsV1alpha1HDFSEventSource addresses(@javax.annotation.Nullable List<String> addresses) {
    this.addresses = addresses;
    return this;
  }

  public IoArgoprojEventsV1alpha1HDFSEventSource addAddressesItem(String addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Get addresses
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<String> getAddresses() {
    return addresses;
  }

  public void setAddresses(@javax.annotation.Nullable List<String> addresses) {
    this.addresses = addresses;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource checkInterval(@javax.annotation.Nullable String checkInterval) {
    this.checkInterval = checkInterval;
    return this;
  }

  /**
   * Get checkInterval
   * @return checkInterval
   */
  @javax.annotation.Nullable
  public String getCheckInterval() {
    return checkInterval;
  }

  public void setCheckInterval(@javax.annotation.Nullable String checkInterval) {
    this.checkInterval = checkInterval;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource hdfsUser(@javax.annotation.Nullable String hdfsUser) {
    this.hdfsUser = hdfsUser;
    return this;
  }

  /**
   * HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
   * @return hdfsUser
   */
  @javax.annotation.Nullable
  public String getHdfsUser() {
    return hdfsUser;
  }

  public void setHdfsUser(@javax.annotation.Nullable String hdfsUser) {
    this.hdfsUser = hdfsUser;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource krbCCacheSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector krbCCacheSecret) {
    this.krbCCacheSecret = krbCCacheSecret;
    return this;
  }

  /**
   * Get krbCCacheSecret
   * @return krbCCacheSecret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getKrbCCacheSecret() {
    return krbCCacheSecret;
  }

  public void setKrbCCacheSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector krbCCacheSecret) {
    this.krbCCacheSecret = krbCCacheSecret;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource krbConfigConfigMap(@javax.annotation.Nullable IoK8sApiCoreV1ConfigMapKeySelector krbConfigConfigMap) {
    this.krbConfigConfigMap = krbConfigConfigMap;
    return this;
  }

  /**
   * Get krbConfigConfigMap
   * @return krbConfigConfigMap
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ConfigMapKeySelector getKrbConfigConfigMap() {
    return krbConfigConfigMap;
  }

  public void setKrbConfigConfigMap(@javax.annotation.Nullable IoK8sApiCoreV1ConfigMapKeySelector krbConfigConfigMap) {
    this.krbConfigConfigMap = krbConfigConfigMap;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource krbKeytabSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector krbKeytabSecret) {
    this.krbKeytabSecret = krbKeytabSecret;
    return this;
  }

  /**
   * Get krbKeytabSecret
   * @return krbKeytabSecret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getKrbKeytabSecret() {
    return krbKeytabSecret;
  }

  public void setKrbKeytabSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector krbKeytabSecret) {
    this.krbKeytabSecret = krbKeytabSecret;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource krbRealm(@javax.annotation.Nullable String krbRealm) {
    this.krbRealm = krbRealm;
    return this;
  }

  /**
   * KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
   * @return krbRealm
   */
  @javax.annotation.Nullable
  public String getKrbRealm() {
    return krbRealm;
  }

  public void setKrbRealm(@javax.annotation.Nullable String krbRealm) {
    this.krbRealm = krbRealm;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource krbServicePrincipalName(@javax.annotation.Nullable String krbServicePrincipalName) {
    this.krbServicePrincipalName = krbServicePrincipalName;
    return this;
  }

  /**
   * KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
   * @return krbServicePrincipalName
   */
  @javax.annotation.Nullable
  public String getKrbServicePrincipalName() {
    return krbServicePrincipalName;
  }

  public void setKrbServicePrincipalName(@javax.annotation.Nullable String krbServicePrincipalName) {
    this.krbServicePrincipalName = krbServicePrincipalName;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource krbUsername(@javax.annotation.Nullable String krbUsername) {
    this.krbUsername = krbUsername;
    return this;
  }

  /**
   * KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
   * @return krbUsername
   */
  @javax.annotation.Nullable
  public String getKrbUsername() {
    return krbUsername;
  }

  public void setKrbUsername(@javax.annotation.Nullable String krbUsername) {
    this.krbUsername = krbUsername;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1HDFSEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public IoArgoprojEventsV1alpha1HDFSEventSource watchPathConfig(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WatchPathConfig watchPathConfig) {
    this.watchPathConfig = watchPathConfig;
    return this;
  }

  /**
   * Get watchPathConfig
   * @return watchPathConfig
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1WatchPathConfig getWatchPathConfig() {
    return watchPathConfig;
  }

  public void setWatchPathConfig(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WatchPathConfig watchPathConfig) {
    this.watchPathConfig = watchPathConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1HDFSEventSource ioArgoprojEventsV1alpha1HDFSEventSource = (IoArgoprojEventsV1alpha1HDFSEventSource) o;
    return Objects.equals(this.addresses, ioArgoprojEventsV1alpha1HDFSEventSource.addresses) &&
        Objects.equals(this.checkInterval, ioArgoprojEventsV1alpha1HDFSEventSource.checkInterval) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1HDFSEventSource.filter) &&
        Objects.equals(this.hdfsUser, ioArgoprojEventsV1alpha1HDFSEventSource.hdfsUser) &&
        Objects.equals(this.krbCCacheSecret, ioArgoprojEventsV1alpha1HDFSEventSource.krbCCacheSecret) &&
        Objects.equals(this.krbConfigConfigMap, ioArgoprojEventsV1alpha1HDFSEventSource.krbConfigConfigMap) &&
        Objects.equals(this.krbKeytabSecret, ioArgoprojEventsV1alpha1HDFSEventSource.krbKeytabSecret) &&
        Objects.equals(this.krbRealm, ioArgoprojEventsV1alpha1HDFSEventSource.krbRealm) &&
        Objects.equals(this.krbServicePrincipalName, ioArgoprojEventsV1alpha1HDFSEventSource.krbServicePrincipalName) &&
        Objects.equals(this.krbUsername, ioArgoprojEventsV1alpha1HDFSEventSource.krbUsername) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1HDFSEventSource.metadata) &&
        Objects.equals(this.type, ioArgoprojEventsV1alpha1HDFSEventSource.type) &&
        Objects.equals(this.watchPathConfig, ioArgoprojEventsV1alpha1HDFSEventSource.watchPathConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, checkInterval, filter, hdfsUser, krbCCacheSecret, krbConfigConfigMap, krbKeytabSecret, krbRealm, krbServicePrincipalName, krbUsername, metadata, type, watchPathConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1HDFSEventSource {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    checkInterval: ").append(toIndentedString(checkInterval)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    hdfsUser: ").append(toIndentedString(hdfsUser)).append("\n");
    sb.append("    krbCCacheSecret: ").append(toIndentedString(krbCCacheSecret)).append("\n");
    sb.append("    krbConfigConfigMap: ").append(toIndentedString(krbConfigConfigMap)).append("\n");
    sb.append("    krbKeytabSecret: ").append(toIndentedString(krbKeytabSecret)).append("\n");
    sb.append("    krbRealm: ").append(toIndentedString(krbRealm)).append("\n");
    sb.append("    krbServicePrincipalName: ").append(toIndentedString(krbServicePrincipalName)).append("\n");
    sb.append("    krbUsername: ").append(toIndentedString(krbUsername)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    watchPathConfig: ").append(toIndentedString(watchPathConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("checkInterval");
    openapiFields.add("filter");
    openapiFields.add("hdfsUser");
    openapiFields.add("krbCCacheSecret");
    openapiFields.add("krbConfigConfigMap");
    openapiFields.add("krbKeytabSecret");
    openapiFields.add("krbRealm");
    openapiFields.add("krbServicePrincipalName");
    openapiFields.add("krbUsername");
    openapiFields.add("metadata");
    openapiFields.add("type");
    openapiFields.add("watchPathConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1HDFSEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1HDFSEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1HDFSEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1HDFSEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1HDFSEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1HDFSEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull() && !jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }
      if ((jsonObj.get("checkInterval") != null && !jsonObj.get("checkInterval").isJsonNull()) && !jsonObj.get("checkInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkInterval").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("hdfsUser") != null && !jsonObj.get("hdfsUser").isJsonNull()) && !jsonObj.get("hdfsUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hdfsUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hdfsUser").toString()));
      }
      // validate the optional field `krbCCacheSecret`
      if (jsonObj.get("krbCCacheSecret") != null && !jsonObj.get("krbCCacheSecret").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("krbCCacheSecret"));
      }
      // validate the optional field `krbConfigConfigMap`
      if (jsonObj.get("krbConfigConfigMap") != null && !jsonObj.get("krbConfigConfigMap").isJsonNull()) {
        IoK8sApiCoreV1ConfigMapKeySelector.validateJsonElement(jsonObj.get("krbConfigConfigMap"));
      }
      // validate the optional field `krbKeytabSecret`
      if (jsonObj.get("krbKeytabSecret") != null && !jsonObj.get("krbKeytabSecret").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("krbKeytabSecret"));
      }
      if ((jsonObj.get("krbRealm") != null && !jsonObj.get("krbRealm").isJsonNull()) && !jsonObj.get("krbRealm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `krbRealm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("krbRealm").toString()));
      }
      if ((jsonObj.get("krbServicePrincipalName") != null && !jsonObj.get("krbServicePrincipalName").isJsonNull()) && !jsonObj.get("krbServicePrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `krbServicePrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("krbServicePrincipalName").toString()));
      }
      if ((jsonObj.get("krbUsername") != null && !jsonObj.get("krbUsername").isJsonNull()) && !jsonObj.get("krbUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `krbUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("krbUsername").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `watchPathConfig`
      if (jsonObj.get("watchPathConfig") != null && !jsonObj.get("watchPathConfig").isJsonNull()) {
        IoArgoprojEventsV1alpha1WatchPathConfig.validateJsonElement(jsonObj.get("watchPathConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1HDFSEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1HDFSEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1HDFSEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1HDFSEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1HDFSEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1HDFSEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1HDFSEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1HDFSEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1HDFSEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1HDFSEventSource
   */
  public static IoArgoprojEventsV1alpha1HDFSEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1HDFSEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1HDFSEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

