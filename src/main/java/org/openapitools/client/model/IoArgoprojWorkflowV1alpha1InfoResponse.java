/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Column;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojWorkflowV1alpha1InfoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1InfoResponse {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1Column> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1Link> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGED_NAMESPACE = "managedNamespace";
  @SerializedName(SERIALIZED_NAME_MANAGED_NAMESPACE)
  @javax.annotation.Nullable
  private String managedNamespace;

  public static final String SERIALIZED_NAME_MODALS = "modals";
  @SerializedName(SERIALIZED_NAME_MODALS)
  @javax.annotation.Nullable
  private Map<String, Boolean> modals = new HashMap<>();

  public static final String SERIALIZED_NAME_NAV_COLOR = "navColor";
  @SerializedName(SERIALIZED_NAME_NAV_COLOR)
  @javax.annotation.Nullable
  private String navColor;

  public IoArgoprojWorkflowV1alpha1InfoResponse() {
  }

  public IoArgoprojWorkflowV1alpha1InfoResponse columns(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Column> columns) {
    this.columns = columns;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1InfoResponse addColumnsItem(IoArgoprojWorkflowV1alpha1Column columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1Column> getColumns() {
    return columns;
  }

  public void setColumns(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Column> columns) {
    this.columns = columns;
  }


  public IoArgoprojWorkflowV1alpha1InfoResponse links(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Link> links) {
    this.links = links;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1InfoResponse addLinksItem(IoArgoprojWorkflowV1alpha1Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1Link> getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Link> links) {
    this.links = links;
  }


  public IoArgoprojWorkflowV1alpha1InfoResponse managedNamespace(@javax.annotation.Nullable String managedNamespace) {
    this.managedNamespace = managedNamespace;
    return this;
  }

  /**
   * Get managedNamespace
   * @return managedNamespace
   */
  @javax.annotation.Nullable
  public String getManagedNamespace() {
    return managedNamespace;
  }

  public void setManagedNamespace(@javax.annotation.Nullable String managedNamespace) {
    this.managedNamespace = managedNamespace;
  }


  public IoArgoprojWorkflowV1alpha1InfoResponse modals(@javax.annotation.Nullable Map<String, Boolean> modals) {
    this.modals = modals;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1InfoResponse putModalsItem(String key, Boolean modalsItem) {
    if (this.modals == null) {
      this.modals = new HashMap<>();
    }
    this.modals.put(key, modalsItem);
    return this;
  }

  /**
   * Get modals
   * @return modals
   */
  @javax.annotation.Nullable
  public Map<String, Boolean> getModals() {
    return modals;
  }

  public void setModals(@javax.annotation.Nullable Map<String, Boolean> modals) {
    this.modals = modals;
  }


  public IoArgoprojWorkflowV1alpha1InfoResponse navColor(@javax.annotation.Nullable String navColor) {
    this.navColor = navColor;
    return this;
  }

  /**
   * Get navColor
   * @return navColor
   */
  @javax.annotation.Nullable
  public String getNavColor() {
    return navColor;
  }

  public void setNavColor(@javax.annotation.Nullable String navColor) {
    this.navColor = navColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1InfoResponse ioArgoprojWorkflowV1alpha1InfoResponse = (IoArgoprojWorkflowV1alpha1InfoResponse) o;
    return Objects.equals(this.columns, ioArgoprojWorkflowV1alpha1InfoResponse.columns) &&
        Objects.equals(this.links, ioArgoprojWorkflowV1alpha1InfoResponse.links) &&
        Objects.equals(this.managedNamespace, ioArgoprojWorkflowV1alpha1InfoResponse.managedNamespace) &&
        Objects.equals(this.modals, ioArgoprojWorkflowV1alpha1InfoResponse.modals) &&
        Objects.equals(this.navColor, ioArgoprojWorkflowV1alpha1InfoResponse.navColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, links, managedNamespace, modals, navColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1InfoResponse {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    managedNamespace: ").append(toIndentedString(managedNamespace)).append("\n");
    sb.append("    modals: ").append(toIndentedString(modals)).append("\n");
    sb.append("    navColor: ").append(toIndentedString(navColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("links");
    openapiFields.add("managedNamespace");
    openapiFields.add("modals");
    openapiFields.add("navColor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1InfoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1InfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1InfoResponse is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1InfoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1InfoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1InfoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            IoArgoprojWorkflowV1alpha1Column.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            IoArgoprojWorkflowV1alpha1Link.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("managedNamespace") != null && !jsonObj.get("managedNamespace").isJsonNull()) && !jsonObj.get("managedNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedNamespace").toString()));
      }
      if ((jsonObj.get("navColor") != null && !jsonObj.get("navColor").isJsonNull()) && !jsonObj.get("navColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `navColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("navColor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1InfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1InfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1InfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1InfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1InfoResponse>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1InfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1InfoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1InfoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1InfoResponse
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1InfoResponse
   */
  public static IoArgoprojWorkflowV1alpha1InfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1InfoResponse.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1InfoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

