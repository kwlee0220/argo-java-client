/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Condition;
import org.openapitools.client.model.IoK8sApiCoreV1ObjectReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CronWorkflowStatus is the status of a CronWorkflow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1CronWorkflowStatus {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  @javax.annotation.Nullable
  private List<IoK8sApiCoreV1ObjectReference> active = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  @javax.annotation.Nullable
  private Integer failed;

  public static final String SERIALIZED_NAME_LAST_SCHEDULED_TIME = "lastScheduledTime";
  @SerializedName(SERIALIZED_NAME_LAST_SCHEDULED_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime lastScheduledTime;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  @javax.annotation.Nullable
  private String phase;

  public static final String SERIALIZED_NAME_SUCCEEDED = "succeeded";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED)
  @javax.annotation.Nullable
  private Integer succeeded;

  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus() {
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus active(@javax.annotation.Nullable List<IoK8sApiCoreV1ObjectReference> active) {
    this.active = active;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus addActiveItem(IoK8sApiCoreV1ObjectReference activeItem) {
    if (this.active == null) {
      this.active = new ArrayList<>();
    }
    this.active.add(activeItem);
    return this;
  }

  /**
   * Active is a list of active workflows stemming from this CronWorkflow
   * @return active
   */
  @javax.annotation.Nullable
  public List<IoK8sApiCoreV1ObjectReference> getActive() {
    return active;
  }

  public void setActive(@javax.annotation.Nullable List<IoK8sApiCoreV1ObjectReference> active) {
    this.active = active;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus conditions(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus addConditionsItem(IoArgoprojWorkflowV1alpha1Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Conditions is a list of conditions the CronWorkflow may have
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1Condition> getConditions() {
    return conditions;
  }

  public void setConditions(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1Condition> conditions) {
    this.conditions = conditions;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus failed(@javax.annotation.Nullable Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * v3.6 and after: Failed counts how many times child workflows failed
   * @return failed
   */
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(@javax.annotation.Nullable Integer failed) {
    this.failed = failed;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus lastScheduledTime(@javax.annotation.Nullable OffsetDateTime lastScheduledTime) {
    this.lastScheduledTime = lastScheduledTime;
    return this;
  }

  /**
   * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
   * @return lastScheduledTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastScheduledTime() {
    return lastScheduledTime;
  }

  public void setLastScheduledTime(@javax.annotation.Nullable OffsetDateTime lastScheduledTime) {
    this.lastScheduledTime = lastScheduledTime;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus phase(@javax.annotation.Nullable String phase) {
    this.phase = phase;
    return this;
  }

  /**
   * v3.6 and after: Phase is an enum of Active or Stopped. It changes to Stopped when stopStrategy.expression is true
   * @return phase
   */
  @javax.annotation.Nullable
  public String getPhase() {
    return phase;
  }

  public void setPhase(@javax.annotation.Nullable String phase) {
    this.phase = phase;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowStatus succeeded(@javax.annotation.Nullable Integer succeeded) {
    this.succeeded = succeeded;
    return this;
  }

  /**
   * v3.6 and after: Succeeded counts how many times child workflows succeeded
   * @return succeeded
   */
  @javax.annotation.Nullable
  public Integer getSucceeded() {
    return succeeded;
  }

  public void setSucceeded(@javax.annotation.Nullable Integer succeeded) {
    this.succeeded = succeeded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1CronWorkflowStatus ioArgoprojWorkflowV1alpha1CronWorkflowStatus = (IoArgoprojWorkflowV1alpha1CronWorkflowStatus) o;
    return Objects.equals(this.active, ioArgoprojWorkflowV1alpha1CronWorkflowStatus.active) &&
        Objects.equals(this.conditions, ioArgoprojWorkflowV1alpha1CronWorkflowStatus.conditions) &&
        Objects.equals(this.failed, ioArgoprojWorkflowV1alpha1CronWorkflowStatus.failed) &&
        Objects.equals(this.lastScheduledTime, ioArgoprojWorkflowV1alpha1CronWorkflowStatus.lastScheduledTime) &&
        Objects.equals(this.phase, ioArgoprojWorkflowV1alpha1CronWorkflowStatus.phase) &&
        Objects.equals(this.succeeded, ioArgoprojWorkflowV1alpha1CronWorkflowStatus.succeeded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, conditions, failed, lastScheduledTime, phase, succeeded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1CronWorkflowStatus {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    lastScheduledTime: ").append(toIndentedString(lastScheduledTime)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    succeeded: ").append(toIndentedString(succeeded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("conditions");
    openapiFields.add("failed");
    openapiFields.add("lastScheduledTime");
    openapiFields.add("phase");
    openapiFields.add("succeeded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1CronWorkflowStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1CronWorkflowStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1CronWorkflowStatus is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1CronWorkflowStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1CronWorkflowStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1CronWorkflowStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("active") != null && !jsonObj.get("active").isJsonNull()) {
        JsonArray jsonArrayactive = jsonObj.getAsJsonArray("active");
        if (jsonArrayactive != null) {
          // ensure the json data is an array
          if (!jsonObj.get("active").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `active` to be an array in the JSON string but got `%s`", jsonObj.get("active").toString()));
          }

          // validate the optional field `active` (array)
          for (int i = 0; i < jsonArrayactive.size(); i++) {
            IoK8sApiCoreV1ObjectReference.validateJsonElement(jsonArrayactive.get(i));
          };
        }
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            IoArgoprojWorkflowV1alpha1Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1CronWorkflowStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1CronWorkflowStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1CronWorkflowStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1CronWorkflowStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1CronWorkflowStatus>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1CronWorkflowStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1CronWorkflowStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1CronWorkflowStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1CronWorkflowStatus
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1CronWorkflowStatus
   */
  public static IoArgoprojWorkflowV1alpha1CronWorkflowStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1CronWorkflowStatus.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1CronWorkflowStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

