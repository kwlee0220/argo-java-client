/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1GithubAppCreds;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1OwnedRepositories;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1WebhookContext;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1GithubEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1GithubEventSource {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  @javax.annotation.Nullable
  private Boolean active;

  public static final String SERIALIZED_NAME_API_TOKEN = "apiToken";
  @SerializedName(SERIALIZED_NAME_API_TOKEN)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector apiToken;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  @javax.annotation.Nullable
  private String contentType;

  public static final String SERIALIZED_NAME_DELETE_HOOK_ON_FINISH = "deleteHookOnFinish";
  @SerializedName(SERIALIZED_NAME_DELETE_HOOK_ON_FINISH)
  @javax.annotation.Nullable
  private Boolean deleteHookOnFinish;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  @javax.annotation.Nullable
  private List<String> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_GITHUB_APP = "githubApp";
  @SerializedName(SERIALIZED_NAME_GITHUB_APP)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1GithubAppCreds githubApp;

  public static final String SERIALIZED_NAME_GITHUB_BASE_U_R_L = "githubBaseURL";
  @SerializedName(SERIALIZED_NAME_GITHUB_BASE_U_R_L)
  @javax.annotation.Nullable
  private String githubBaseURL;

  public static final String SERIALIZED_NAME_GITHUB_UPLOAD_U_R_L = "githubUploadURL";
  @SerializedName(SERIALIZED_NAME_GITHUB_UPLOAD_U_R_L)
  @javax.annotation.Nullable
  private String githubUploadURL;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_INSECURE = "insecure";
  @SerializedName(SERIALIZED_NAME_INSECURE)
  @javax.annotation.Nullable
  private Boolean insecure;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  @javax.annotation.Nullable
  private List<String> organizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  @javax.annotation.Nullable
  private String owner;

  public static final String SERIALIZED_NAME_REPOSITORIES = "repositories";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES)
  @javax.annotation.Nullable
  private List<IoArgoprojEventsV1alpha1OwnedRepositories> repositories = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  @javax.annotation.Nullable
  private String repository;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1WebhookContext webhook;

  public static final String SERIALIZED_NAME_WEBHOOK_SECRET = "webhookSecret";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector webhookSecret;

  public IoArgoprojEventsV1alpha1GithubEventSource() {
  }

  public IoArgoprojEventsV1alpha1GithubEventSource active(@javax.annotation.Nullable Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(@javax.annotation.Nullable Boolean active) {
    this.active = active;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource apiToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector apiToken) {
    this.apiToken = apiToken;
    return this;
  }

  /**
   * Get apiToken
   * @return apiToken
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getApiToken() {
    return apiToken;
  }

  public void setApiToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector apiToken) {
    this.apiToken = apiToken;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource contentType(@javax.annotation.Nullable String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(@javax.annotation.Nullable String contentType) {
    this.contentType = contentType;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource deleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
    return this;
  }

  /**
   * Get deleteHookOnFinish
   * @return deleteHookOnFinish
   */
  @javax.annotation.Nullable
  public Boolean getDeleteHookOnFinish() {
    return deleteHookOnFinish;
  }

  public void setDeleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource events(@javax.annotation.Nullable List<String> events) {
    this.events = events;
    return this;
  }

  public IoArgoprojEventsV1alpha1GithubEventSource addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(@javax.annotation.Nullable List<String> events) {
    this.events = events;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource githubApp(@javax.annotation.Nullable IoArgoprojEventsV1alpha1GithubAppCreds githubApp) {
    this.githubApp = githubApp;
    return this;
  }

  /**
   * Get githubApp
   * @return githubApp
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1GithubAppCreds getGithubApp() {
    return githubApp;
  }

  public void setGithubApp(@javax.annotation.Nullable IoArgoprojEventsV1alpha1GithubAppCreds githubApp) {
    this.githubApp = githubApp;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource githubBaseURL(@javax.annotation.Nullable String githubBaseURL) {
    this.githubBaseURL = githubBaseURL;
    return this;
  }

  /**
   * Get githubBaseURL
   * @return githubBaseURL
   */
  @javax.annotation.Nullable
  public String getGithubBaseURL() {
    return githubBaseURL;
  }

  public void setGithubBaseURL(@javax.annotation.Nullable String githubBaseURL) {
    this.githubBaseURL = githubBaseURL;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource githubUploadURL(@javax.annotation.Nullable String githubUploadURL) {
    this.githubUploadURL = githubUploadURL;
    return this;
  }

  /**
   * Get githubUploadURL
   * @return githubUploadURL
   */
  @javax.annotation.Nullable
  public String getGithubUploadURL() {
    return githubUploadURL;
  }

  public void setGithubUploadURL(@javax.annotation.Nullable String githubUploadURL) {
    this.githubUploadURL = githubUploadURL;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource insecure(@javax.annotation.Nullable Boolean insecure) {
    this.insecure = insecure;
    return this;
  }

  /**
   * Get insecure
   * @return insecure
   */
  @javax.annotation.Nullable
  public Boolean getInsecure() {
    return insecure;
  }

  public void setInsecure(@javax.annotation.Nullable Boolean insecure) {
    this.insecure = insecure;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1GithubEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource organizations(@javax.annotation.Nullable List<String> organizations) {
    this.organizations = organizations;
    return this;
  }

  public IoArgoprojEventsV1alpha1GithubEventSource addOrganizationsItem(String organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new ArrayList<>();
    }
    this.organizations.add(organizationsItem);
    return this;
  }

  /**
   * Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.
   * @return organizations
   */
  @javax.annotation.Nullable
  public List<String> getOrganizations() {
    return organizations;
  }

  public void setOrganizations(@javax.annotation.Nullable List<String> organizations) {
    this.organizations = organizations;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource owner(@javax.annotation.Nullable String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(@javax.annotation.Nullable String owner) {
    this.owner = owner;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource repositories(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1OwnedRepositories> repositories) {
    this.repositories = repositories;
    return this;
  }

  public IoArgoprojEventsV1alpha1GithubEventSource addRepositoriesItem(IoArgoprojEventsV1alpha1OwnedRepositories repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new ArrayList<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

  /**
   * Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.
   * @return repositories
   */
  @javax.annotation.Nullable
  public List<IoArgoprojEventsV1alpha1OwnedRepositories> getRepositories() {
    return repositories;
  }

  public void setRepositories(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1OwnedRepositories> repositories) {
    this.repositories = repositories;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource repository(@javax.annotation.Nullable String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(@javax.annotation.Nullable String repository) {
    this.repository = repository;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource webhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
    return this;
  }

  /**
   * Get webhook
   * @return webhook
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1WebhookContext getWebhook() {
    return webhook;
  }

  public void setWebhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
  }


  public IoArgoprojEventsV1alpha1GithubEventSource webhookSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector webhookSecret) {
    this.webhookSecret = webhookSecret;
    return this;
  }

  /**
   * Get webhookSecret
   * @return webhookSecret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getWebhookSecret() {
    return webhookSecret;
  }

  public void setWebhookSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector webhookSecret) {
    this.webhookSecret = webhookSecret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1GithubEventSource ioArgoprojEventsV1alpha1GithubEventSource = (IoArgoprojEventsV1alpha1GithubEventSource) o;
    return Objects.equals(this.active, ioArgoprojEventsV1alpha1GithubEventSource.active) &&
        Objects.equals(this.apiToken, ioArgoprojEventsV1alpha1GithubEventSource.apiToken) &&
        Objects.equals(this.contentType, ioArgoprojEventsV1alpha1GithubEventSource.contentType) &&
        Objects.equals(this.deleteHookOnFinish, ioArgoprojEventsV1alpha1GithubEventSource.deleteHookOnFinish) &&
        Objects.equals(this.events, ioArgoprojEventsV1alpha1GithubEventSource.events) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1GithubEventSource.filter) &&
        Objects.equals(this.githubApp, ioArgoprojEventsV1alpha1GithubEventSource.githubApp) &&
        Objects.equals(this.githubBaseURL, ioArgoprojEventsV1alpha1GithubEventSource.githubBaseURL) &&
        Objects.equals(this.githubUploadURL, ioArgoprojEventsV1alpha1GithubEventSource.githubUploadURL) &&
        Objects.equals(this.id, ioArgoprojEventsV1alpha1GithubEventSource.id) &&
        Objects.equals(this.insecure, ioArgoprojEventsV1alpha1GithubEventSource.insecure) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1GithubEventSource.metadata) &&
        Objects.equals(this.organizations, ioArgoprojEventsV1alpha1GithubEventSource.organizations) &&
        Objects.equals(this.owner, ioArgoprojEventsV1alpha1GithubEventSource.owner) &&
        Objects.equals(this.repositories, ioArgoprojEventsV1alpha1GithubEventSource.repositories) &&
        Objects.equals(this.repository, ioArgoprojEventsV1alpha1GithubEventSource.repository) &&
        Objects.equals(this.webhook, ioArgoprojEventsV1alpha1GithubEventSource.webhook) &&
        Objects.equals(this.webhookSecret, ioArgoprojEventsV1alpha1GithubEventSource.webhookSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, apiToken, contentType, deleteHookOnFinish, events, filter, githubApp, githubBaseURL, githubUploadURL, id, insecure, metadata, organizations, owner, repositories, repository, webhook, webhookSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1GithubEventSource {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    apiToken: ").append(toIndentedString(apiToken)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    deleteHookOnFinish: ").append(toIndentedString(deleteHookOnFinish)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    githubApp: ").append(toIndentedString(githubApp)).append("\n");
    sb.append("    githubBaseURL: ").append(toIndentedString(githubBaseURL)).append("\n");
    sb.append("    githubUploadURL: ").append(toIndentedString(githubUploadURL)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    insecure: ").append(toIndentedString(insecure)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    webhookSecret: ").append(toIndentedString(webhookSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("apiToken");
    openapiFields.add("contentType");
    openapiFields.add("deleteHookOnFinish");
    openapiFields.add("events");
    openapiFields.add("filter");
    openapiFields.add("githubApp");
    openapiFields.add("githubBaseURL");
    openapiFields.add("githubUploadURL");
    openapiFields.add("id");
    openapiFields.add("insecure");
    openapiFields.add("metadata");
    openapiFields.add("organizations");
    openapiFields.add("owner");
    openapiFields.add("repositories");
    openapiFields.add("repository");
    openapiFields.add("webhook");
    openapiFields.add("webhookSecret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1GithubEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1GithubEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1GithubEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1GithubEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1GithubEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1GithubEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apiToken`
      if (jsonObj.get("apiToken") != null && !jsonObj.get("apiToken").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("apiToken"));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull() && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `githubApp`
      if (jsonObj.get("githubApp") != null && !jsonObj.get("githubApp").isJsonNull()) {
        IoArgoprojEventsV1alpha1GithubAppCreds.validateJsonElement(jsonObj.get("githubApp"));
      }
      if ((jsonObj.get("githubBaseURL") != null && !jsonObj.get("githubBaseURL").isJsonNull()) && !jsonObj.get("githubBaseURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `githubBaseURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("githubBaseURL").toString()));
      }
      if ((jsonObj.get("githubUploadURL") != null && !jsonObj.get("githubUploadURL").isJsonNull()) && !jsonObj.get("githubUploadURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `githubUploadURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("githubUploadURL").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("organizations") != null && !jsonObj.get("organizations").isJsonNull() && !jsonObj.get("organizations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizations` to be an array in the JSON string but got `%s`", jsonObj.get("organizations").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if (jsonObj.get("repositories") != null && !jsonObj.get("repositories").isJsonNull()) {
        JsonArray jsonArrayrepositories = jsonObj.getAsJsonArray("repositories");
        if (jsonArrayrepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repositories` to be an array in the JSON string but got `%s`", jsonObj.get("repositories").toString()));
          }

          // validate the optional field `repositories` (array)
          for (int i = 0; i < jsonArrayrepositories.size(); i++) {
            IoArgoprojEventsV1alpha1OwnedRepositories.validateJsonElement(jsonArrayrepositories.get(i));
          };
        }
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      // validate the optional field `webhook`
      if (jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) {
        IoArgoprojEventsV1alpha1WebhookContext.validateJsonElement(jsonObj.get("webhook"));
      }
      // validate the optional field `webhookSecret`
      if (jsonObj.get("webhookSecret") != null && !jsonObj.get("webhookSecret").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("webhookSecret"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1GithubEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1GithubEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1GithubEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1GithubEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1GithubEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1GithubEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1GithubEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1GithubEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1GithubEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1GithubEventSource
   */
  public static IoArgoprojEventsV1alpha1GithubEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1GithubEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1GithubEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

