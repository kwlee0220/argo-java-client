/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1StopStrategy;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1WorkflowSpec;
import org.openapitools.client.model.IoK8sApimachineryPkgApisMetaV1ObjectMeta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CronWorkflowSpec is the specification of a CronWorkflow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1CronWorkflowSpec {
  public static final String SERIALIZED_NAME_CONCURRENCY_POLICY = "concurrencyPolicy";
  @SerializedName(SERIALIZED_NAME_CONCURRENCY_POLICY)
  @javax.annotation.Nullable
  private String concurrencyPolicy;

  public static final String SERIALIZED_NAME_FAILED_JOBS_HISTORY_LIMIT = "failedJobsHistoryLimit";
  @SerializedName(SERIALIZED_NAME_FAILED_JOBS_HISTORY_LIMIT)
  @javax.annotation.Nullable
  private Integer failedJobsHistoryLimit;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  @javax.annotation.Nullable
  private String schedule;

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  @javax.annotation.Nullable
  private List<String> schedules = new ArrayList<>();

  public static final String SERIALIZED_NAME_STARTING_DEADLINE_SECONDS = "startingDeadlineSeconds";
  @SerializedName(SERIALIZED_NAME_STARTING_DEADLINE_SECONDS)
  @javax.annotation.Nullable
  private Integer startingDeadlineSeconds;

  public static final String SERIALIZED_NAME_STOP_STRATEGY = "stopStrategy";
  @SerializedName(SERIALIZED_NAME_STOP_STRATEGY)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1StopStrategy stopStrategy;

  public static final String SERIALIZED_NAME_SUCCESSFUL_JOBS_HISTORY_LIMIT = "successfulJobsHistoryLimit";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_JOBS_HISTORY_LIMIT)
  @javax.annotation.Nullable
  private Integer successfulJobsHistoryLimit;

  public static final String SERIALIZED_NAME_SUSPEND = "suspend";
  @SerializedName(SERIALIZED_NAME_SUSPEND)
  @javax.annotation.Nullable
  private Boolean suspend;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  @javax.annotation.Nullable
  private String timezone;

  public static final String SERIALIZED_NAME_WHEN = "when";
  @SerializedName(SERIALIZED_NAME_WHEN)
  @javax.annotation.Nullable
  private String when;

  public static final String SERIALIZED_NAME_WORKFLOW_METADATA = "workflowMetadata";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_METADATA)
  @javax.annotation.Nullable
  private IoK8sApimachineryPkgApisMetaV1ObjectMeta workflowMetadata;

  public static final String SERIALIZED_NAME_WORKFLOW_SPEC = "workflowSpec";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_SPEC)
  @javax.annotation.Nonnull
  private IoArgoprojWorkflowV1alpha1WorkflowSpec workflowSpec;

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec() {
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec concurrencyPolicy(@javax.annotation.Nullable String concurrencyPolicy) {
    this.concurrencyPolicy = concurrencyPolicy;
    return this;
  }

  /**
   * ConcurrencyPolicy is the K8s-style concurrency policy that will be used
   * @return concurrencyPolicy
   */
  @javax.annotation.Nullable
  public String getConcurrencyPolicy() {
    return concurrencyPolicy;
  }

  public void setConcurrencyPolicy(@javax.annotation.Nullable String concurrencyPolicy) {
    this.concurrencyPolicy = concurrencyPolicy;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec failedJobsHistoryLimit(@javax.annotation.Nullable Integer failedJobsHistoryLimit) {
    this.failedJobsHistoryLimit = failedJobsHistoryLimit;
    return this;
  }

  /**
   * FailedJobsHistoryLimit is the number of failed jobs to be kept at a time
   * @return failedJobsHistoryLimit
   */
  @javax.annotation.Nullable
  public Integer getFailedJobsHistoryLimit() {
    return failedJobsHistoryLimit;
  }

  public void setFailedJobsHistoryLimit(@javax.annotation.Nullable Integer failedJobsHistoryLimit) {
    this.failedJobsHistoryLimit = failedJobsHistoryLimit;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec schedule(@javax.annotation.Nullable String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Schedule is a schedule to run the Workflow in Cron format. Deprecated, use Schedules
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(@javax.annotation.Nullable String schedule) {
    this.schedule = schedule;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec schedules(@javax.annotation.Nullable List<String> schedules) {
    this.schedules = schedules;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec addSchedulesItem(String schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

  /**
   * v3.6 and after: Schedules is a list of schedules to run the Workflow in Cron format
   * @return schedules
   */
  @javax.annotation.Nullable
  public List<String> getSchedules() {
    return schedules;
  }

  public void setSchedules(@javax.annotation.Nullable List<String> schedules) {
    this.schedules = schedules;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec startingDeadlineSeconds(@javax.annotation.Nullable Integer startingDeadlineSeconds) {
    this.startingDeadlineSeconds = startingDeadlineSeconds;
    return this;
  }

  /**
   * StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.
   * @return startingDeadlineSeconds
   */
  @javax.annotation.Nullable
  public Integer getStartingDeadlineSeconds() {
    return startingDeadlineSeconds;
  }

  public void setStartingDeadlineSeconds(@javax.annotation.Nullable Integer startingDeadlineSeconds) {
    this.startingDeadlineSeconds = startingDeadlineSeconds;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec stopStrategy(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1StopStrategy stopStrategy) {
    this.stopStrategy = stopStrategy;
    return this;
  }

  /**
   * Get stopStrategy
   * @return stopStrategy
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1StopStrategy getStopStrategy() {
    return stopStrategy;
  }

  public void setStopStrategy(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1StopStrategy stopStrategy) {
    this.stopStrategy = stopStrategy;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec successfulJobsHistoryLimit(@javax.annotation.Nullable Integer successfulJobsHistoryLimit) {
    this.successfulJobsHistoryLimit = successfulJobsHistoryLimit;
    return this;
  }

  /**
   * SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
   * @return successfulJobsHistoryLimit
   */
  @javax.annotation.Nullable
  public Integer getSuccessfulJobsHistoryLimit() {
    return successfulJobsHistoryLimit;
  }

  public void setSuccessfulJobsHistoryLimit(@javax.annotation.Nullable Integer successfulJobsHistoryLimit) {
    this.successfulJobsHistoryLimit = successfulJobsHistoryLimit;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec suspend(@javax.annotation.Nullable Boolean suspend) {
    this.suspend = suspend;
    return this;
  }

  /**
   * Suspend is a flag that will stop new CronWorkflows from running if set to true
   * @return suspend
   */
  @javax.annotation.Nullable
  public Boolean getSuspend() {
    return suspend;
  }

  public void setSuspend(@javax.annotation.Nullable Boolean suspend) {
    this.suspend = suspend;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec timezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone is the timezone against which the cron schedule will be calculated, e.g. \&quot;Asia/Tokyo\&quot;. Default is machine&#39;s local time.
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(@javax.annotation.Nullable String timezone) {
    this.timezone = timezone;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec when(@javax.annotation.Nullable String when) {
    this.when = when;
    return this;
  }

  /**
   * v3.6 and after: When is an expression that determines if a run should be scheduled.
   * @return when
   */
  @javax.annotation.Nullable
  public String getWhen() {
    return when;
  }

  public void setWhen(@javax.annotation.Nullable String when) {
    this.when = when;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec workflowMetadata(@javax.annotation.Nullable IoK8sApimachineryPkgApisMetaV1ObjectMeta workflowMetadata) {
    this.workflowMetadata = workflowMetadata;
    return this;
  }

  /**
   * Get workflowMetadata
   * @return workflowMetadata
   */
  @javax.annotation.Nullable
  public IoK8sApimachineryPkgApisMetaV1ObjectMeta getWorkflowMetadata() {
    return workflowMetadata;
  }

  public void setWorkflowMetadata(@javax.annotation.Nullable IoK8sApimachineryPkgApisMetaV1ObjectMeta workflowMetadata) {
    this.workflowMetadata = workflowMetadata;
  }


  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec workflowSpec(@javax.annotation.Nonnull IoArgoprojWorkflowV1alpha1WorkflowSpec workflowSpec) {
    this.workflowSpec = workflowSpec;
    return this;
  }

  /**
   * Get workflowSpec
   * @return workflowSpec
   */
  @javax.annotation.Nonnull
  public IoArgoprojWorkflowV1alpha1WorkflowSpec getWorkflowSpec() {
    return workflowSpec;
  }

  public void setWorkflowSpec(@javax.annotation.Nonnull IoArgoprojWorkflowV1alpha1WorkflowSpec workflowSpec) {
    this.workflowSpec = workflowSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1CronWorkflowSpec ioArgoprojWorkflowV1alpha1CronWorkflowSpec = (IoArgoprojWorkflowV1alpha1CronWorkflowSpec) o;
    return Objects.equals(this.concurrencyPolicy, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.concurrencyPolicy) &&
        Objects.equals(this.failedJobsHistoryLimit, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.failedJobsHistoryLimit) &&
        Objects.equals(this.schedule, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.schedule) &&
        Objects.equals(this.schedules, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.schedules) &&
        Objects.equals(this.startingDeadlineSeconds, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.startingDeadlineSeconds) &&
        Objects.equals(this.stopStrategy, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.stopStrategy) &&
        Objects.equals(this.successfulJobsHistoryLimit, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.successfulJobsHistoryLimit) &&
        Objects.equals(this.suspend, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.suspend) &&
        Objects.equals(this.timezone, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.timezone) &&
        Objects.equals(this.when, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.when) &&
        Objects.equals(this.workflowMetadata, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.workflowMetadata) &&
        Objects.equals(this.workflowSpec, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.workflowSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrencyPolicy, failedJobsHistoryLimit, schedule, schedules, startingDeadlineSeconds, stopStrategy, successfulJobsHistoryLimit, suspend, timezone, when, workflowMetadata, workflowSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1CronWorkflowSpec {\n");
    sb.append("    concurrencyPolicy: ").append(toIndentedString(concurrencyPolicy)).append("\n");
    sb.append("    failedJobsHistoryLimit: ").append(toIndentedString(failedJobsHistoryLimit)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    startingDeadlineSeconds: ").append(toIndentedString(startingDeadlineSeconds)).append("\n");
    sb.append("    stopStrategy: ").append(toIndentedString(stopStrategy)).append("\n");
    sb.append("    successfulJobsHistoryLimit: ").append(toIndentedString(successfulJobsHistoryLimit)).append("\n");
    sb.append("    suspend: ").append(toIndentedString(suspend)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    when: ").append(toIndentedString(when)).append("\n");
    sb.append("    workflowMetadata: ").append(toIndentedString(workflowMetadata)).append("\n");
    sb.append("    workflowSpec: ").append(toIndentedString(workflowSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concurrencyPolicy");
    openapiFields.add("failedJobsHistoryLimit");
    openapiFields.add("schedule");
    openapiFields.add("schedules");
    openapiFields.add("startingDeadlineSeconds");
    openapiFields.add("stopStrategy");
    openapiFields.add("successfulJobsHistoryLimit");
    openapiFields.add("suspend");
    openapiFields.add("timezone");
    openapiFields.add("when");
    openapiFields.add("workflowMetadata");
    openapiFields.add("workflowSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("workflowSpec");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1CronWorkflowSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1CronWorkflowSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1CronWorkflowSpec is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1CronWorkflowSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1CronWorkflowSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1CronWorkflowSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoArgoprojWorkflowV1alpha1CronWorkflowSpec.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("concurrencyPolicy") != null && !jsonObj.get("concurrencyPolicy").isJsonNull()) && !jsonObj.get("concurrencyPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concurrencyPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concurrencyPolicy").toString()));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull() && !jsonObj.get("schedules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
      }
      // validate the optional field `stopStrategy`
      if (jsonObj.get("stopStrategy") != null && !jsonObj.get("stopStrategy").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1StopStrategy.validateJsonElement(jsonObj.get("stopStrategy"));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("when") != null && !jsonObj.get("when").isJsonNull()) && !jsonObj.get("when").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `when` to be a primitive type in the JSON string but got `%s`", jsonObj.get("when").toString()));
      }
      // validate the optional field `workflowMetadata`
      if (jsonObj.get("workflowMetadata") != null && !jsonObj.get("workflowMetadata").isJsonNull()) {
        IoK8sApimachineryPkgApisMetaV1ObjectMeta.validateJsonElement(jsonObj.get("workflowMetadata"));
      }
      // validate the required field `workflowSpec`
      IoArgoprojWorkflowV1alpha1WorkflowSpec.validateJsonElement(jsonObj.get("workflowSpec"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1CronWorkflowSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1CronWorkflowSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1CronWorkflowSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1CronWorkflowSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1CronWorkflowSpec>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1CronWorkflowSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1CronWorkflowSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1CronWorkflowSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1CronWorkflowSpec
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1CronWorkflowSpec
   */
  public static IoArgoprojWorkflowV1alpha1CronWorkflowSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1CronWorkflowSpec.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1CronWorkflowSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

