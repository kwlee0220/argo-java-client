/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1HTTPBodySource;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1HTTPHeader;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojWorkflowV1alpha1HTTP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1HTTP {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nullable
  private String body;

  public static final String SERIALIZED_NAME_BODY_FROM = "bodyFrom";
  @SerializedName(SERIALIZED_NAME_BODY_FROM)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1HTTPBodySource bodyFrom;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1HTTPHeader> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSECURE_SKIP_VERIFY = "insecureSkipVerify";
  @SerializedName(SERIALIZED_NAME_INSECURE_SKIP_VERIFY)
  @javax.annotation.Nullable
  private Boolean insecureSkipVerify;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nullable
  private String method;

  public static final String SERIALIZED_NAME_SUCCESS_CONDITION = "successCondition";
  @SerializedName(SERIALIZED_NAME_SUCCESS_CONDITION)
  @javax.annotation.Nullable
  private String successCondition;

  public static final String SERIALIZED_NAME_TIMEOUT_SECONDS = "timeoutSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_SECONDS)
  @javax.annotation.Nullable
  private Integer timeoutSeconds;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  public IoArgoprojWorkflowV1alpha1HTTP() {
  }

  public IoArgoprojWorkflowV1alpha1HTTP body(@javax.annotation.Nullable String body) {
    this.body = body;
    return this;
  }

  /**
   * Body is content of the HTTP Request
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nullable String body) {
    this.body = body;
  }


  public IoArgoprojWorkflowV1alpha1HTTP bodyFrom(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1HTTPBodySource bodyFrom) {
    this.bodyFrom = bodyFrom;
    return this;
  }

  /**
   * Get bodyFrom
   * @return bodyFrom
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1HTTPBodySource getBodyFrom() {
    return bodyFrom;
  }

  public void setBodyFrom(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1HTTPBodySource bodyFrom) {
    this.bodyFrom = bodyFrom;
  }


  public IoArgoprojWorkflowV1alpha1HTTP headers(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1HTTPHeader> headers) {
    this.headers = headers;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1HTTP addHeadersItem(IoArgoprojWorkflowV1alpha1HTTPHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * Headers are an optional list of headers to send with HTTP requests
   * @return headers
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1HTTPHeader> getHeaders() {
    return headers;
  }

  public void setHeaders(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1HTTPHeader> headers) {
    this.headers = headers;
  }


  public IoArgoprojWorkflowV1alpha1HTTP insecureSkipVerify(@javax.annotation.Nullable Boolean insecureSkipVerify) {
    this.insecureSkipVerify = insecureSkipVerify;
    return this;
  }

  /**
   * InsecureSkipVerify is a bool when if set to true will skip TLS verification for the HTTP client
   * @return insecureSkipVerify
   */
  @javax.annotation.Nullable
  public Boolean getInsecureSkipVerify() {
    return insecureSkipVerify;
  }

  public void setInsecureSkipVerify(@javax.annotation.Nullable Boolean insecureSkipVerify) {
    this.insecureSkipVerify = insecureSkipVerify;
  }


  public IoArgoprojWorkflowV1alpha1HTTP method(@javax.annotation.Nullable String method) {
    this.method = method;
    return this;
  }

  /**
   * Method is HTTP methods for HTTP Request
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nullable String method) {
    this.method = method;
  }


  public IoArgoprojWorkflowV1alpha1HTTP successCondition(@javax.annotation.Nullable String successCondition) {
    this.successCondition = successCondition;
    return this;
  }

  /**
   * SuccessCondition is an expression if evaluated to true is considered successful
   * @return successCondition
   */
  @javax.annotation.Nullable
  public String getSuccessCondition() {
    return successCondition;
  }

  public void setSuccessCondition(@javax.annotation.Nullable String successCondition) {
    this.successCondition = successCondition;
  }


  public IoArgoprojWorkflowV1alpha1HTTP timeoutSeconds(@javax.annotation.Nullable Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
    return this;
  }

  /**
   * TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds
   * @return timeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeoutSeconds() {
    return timeoutSeconds;
  }

  public void setTimeoutSeconds(@javax.annotation.Nullable Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
  }


  public IoArgoprojWorkflowV1alpha1HTTP url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of the HTTP Request
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1HTTP ioArgoprojWorkflowV1alpha1HTTP = (IoArgoprojWorkflowV1alpha1HTTP) o;
    return Objects.equals(this.body, ioArgoprojWorkflowV1alpha1HTTP.body) &&
        Objects.equals(this.bodyFrom, ioArgoprojWorkflowV1alpha1HTTP.bodyFrom) &&
        Objects.equals(this.headers, ioArgoprojWorkflowV1alpha1HTTP.headers) &&
        Objects.equals(this.insecureSkipVerify, ioArgoprojWorkflowV1alpha1HTTP.insecureSkipVerify) &&
        Objects.equals(this.method, ioArgoprojWorkflowV1alpha1HTTP.method) &&
        Objects.equals(this.successCondition, ioArgoprojWorkflowV1alpha1HTTP.successCondition) &&
        Objects.equals(this.timeoutSeconds, ioArgoprojWorkflowV1alpha1HTTP.timeoutSeconds) &&
        Objects.equals(this.url, ioArgoprojWorkflowV1alpha1HTTP.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyFrom, headers, insecureSkipVerify, method, successCondition, timeoutSeconds, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1HTTP {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyFrom: ").append(toIndentedString(bodyFrom)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    insecureSkipVerify: ").append(toIndentedString(insecureSkipVerify)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    successCondition: ").append(toIndentedString(successCondition)).append("\n");
    sb.append("    timeoutSeconds: ").append(toIndentedString(timeoutSeconds)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("bodyFrom");
    openapiFields.add("headers");
    openapiFields.add("insecureSkipVerify");
    openapiFields.add("method");
    openapiFields.add("successCondition");
    openapiFields.add("timeoutSeconds");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1HTTP
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1HTTP.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1HTTP is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1HTTP.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1HTTP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1HTTP` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoArgoprojWorkflowV1alpha1HTTP.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the optional field `bodyFrom`
      if (jsonObj.get("bodyFrom") != null && !jsonObj.get("bodyFrom").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1HTTPBodySource.validateJsonElement(jsonObj.get("bodyFrom"));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            IoArgoprojWorkflowV1alpha1HTTPHeader.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("successCondition") != null && !jsonObj.get("successCondition").isJsonNull()) && !jsonObj.get("successCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `successCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("successCondition").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1HTTP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1HTTP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1HTTP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1HTTP.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1HTTP>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1HTTP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1HTTP read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1HTTP given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1HTTP
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1HTTP
   */
  public static IoArgoprojWorkflowV1alpha1HTTP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1HTTP.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1HTTP to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

