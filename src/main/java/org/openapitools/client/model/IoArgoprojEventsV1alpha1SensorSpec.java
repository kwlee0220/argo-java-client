/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventDependency;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1Template;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1Trigger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1SensorSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1SensorSpec {
  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  @javax.annotation.Nullable
  private List<IoArgoprojEventsV1alpha1EventDependency> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_ON_FAILED_ROUND = "errorOnFailedRound";
  @SerializedName(SERIALIZED_NAME_ERROR_ON_FAILED_ROUND)
  @javax.annotation.Nullable
  private Boolean errorOnFailedRound;

  public static final String SERIALIZED_NAME_EVENT_BUS_NAME = "eventBusName";
  @SerializedName(SERIALIZED_NAME_EVENT_BUS_NAME)
  @javax.annotation.Nullable
  private String eventBusName;

  public static final String SERIALIZED_NAME_LOGGING_FIELDS = "loggingFields";
  @SerializedName(SERIALIZED_NAME_LOGGING_FIELDS)
  @javax.annotation.Nullable
  private Map<String, String> loggingFields = new HashMap<>();

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  @javax.annotation.Nullable
  private Integer replicas;

  public static final String SERIALIZED_NAME_REVISION_HISTORY_LIMIT = "revisionHistoryLimit";
  @SerializedName(SERIALIZED_NAME_REVISION_HISTORY_LIMIT)
  @javax.annotation.Nullable
  private Integer revisionHistoryLimit;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1Template template;

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  @javax.annotation.Nullable
  private List<IoArgoprojEventsV1alpha1Trigger> triggers = new ArrayList<>();

  public IoArgoprojEventsV1alpha1SensorSpec() {
  }

  public IoArgoprojEventsV1alpha1SensorSpec dependencies(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1EventDependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public IoArgoprojEventsV1alpha1SensorSpec addDependenciesItem(IoArgoprojEventsV1alpha1EventDependency dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

  /**
   * Dependencies is a list of the events that this sensor is dependent on.
   * @return dependencies
   */
  @javax.annotation.Nullable
  public List<IoArgoprojEventsV1alpha1EventDependency> getDependencies() {
    return dependencies;
  }

  public void setDependencies(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1EventDependency> dependencies) {
    this.dependencies = dependencies;
  }


  public IoArgoprojEventsV1alpha1SensorSpec errorOnFailedRound(@javax.annotation.Nullable Boolean errorOnFailedRound) {
    this.errorOnFailedRound = errorOnFailedRound;
    return this;
  }

  /**
   * ErrorOnFailedRound if set to true, marks sensor state as &#x60;error&#x60; if the previous trigger round fails. Once sensor state is set to &#x60;error&#x60;, no further triggers will be processed.
   * @return errorOnFailedRound
   */
  @javax.annotation.Nullable
  public Boolean getErrorOnFailedRound() {
    return errorOnFailedRound;
  }

  public void setErrorOnFailedRound(@javax.annotation.Nullable Boolean errorOnFailedRound) {
    this.errorOnFailedRound = errorOnFailedRound;
  }


  public IoArgoprojEventsV1alpha1SensorSpec eventBusName(@javax.annotation.Nullable String eventBusName) {
    this.eventBusName = eventBusName;
    return this;
  }

  /**
   * Get eventBusName
   * @return eventBusName
   */
  @javax.annotation.Nullable
  public String getEventBusName() {
    return eventBusName;
  }

  public void setEventBusName(@javax.annotation.Nullable String eventBusName) {
    this.eventBusName = eventBusName;
  }


  public IoArgoprojEventsV1alpha1SensorSpec loggingFields(@javax.annotation.Nullable Map<String, String> loggingFields) {
    this.loggingFields = loggingFields;
    return this;
  }

  public IoArgoprojEventsV1alpha1SensorSpec putLoggingFieldsItem(String key, String loggingFieldsItem) {
    if (this.loggingFields == null) {
      this.loggingFields = new HashMap<>();
    }
    this.loggingFields.put(key, loggingFieldsItem);
    return this;
  }

  /**
   * Get loggingFields
   * @return loggingFields
   */
  @javax.annotation.Nullable
  public Map<String, String> getLoggingFields() {
    return loggingFields;
  }

  public void setLoggingFields(@javax.annotation.Nullable Map<String, String> loggingFields) {
    this.loggingFields = loggingFields;
  }


  public IoArgoprojEventsV1alpha1SensorSpec replicas(@javax.annotation.Nullable Integer replicas) {
    this.replicas = replicas;
    return this;
  }

  /**
   * Get replicas
   * @return replicas
   */
  @javax.annotation.Nullable
  public Integer getReplicas() {
    return replicas;
  }

  public void setReplicas(@javax.annotation.Nullable Integer replicas) {
    this.replicas = replicas;
  }


  public IoArgoprojEventsV1alpha1SensorSpec revisionHistoryLimit(@javax.annotation.Nullable Integer revisionHistoryLimit) {
    this.revisionHistoryLimit = revisionHistoryLimit;
    return this;
  }

  /**
   * Get revisionHistoryLimit
   * @return revisionHistoryLimit
   */
  @javax.annotation.Nullable
  public Integer getRevisionHistoryLimit() {
    return revisionHistoryLimit;
  }

  public void setRevisionHistoryLimit(@javax.annotation.Nullable Integer revisionHistoryLimit) {
    this.revisionHistoryLimit = revisionHistoryLimit;
  }


  public IoArgoprojEventsV1alpha1SensorSpec template(@javax.annotation.Nullable IoArgoprojEventsV1alpha1Template template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1Template getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable IoArgoprojEventsV1alpha1Template template) {
    this.template = template;
  }


  public IoArgoprojEventsV1alpha1SensorSpec triggers(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1Trigger> triggers) {
    this.triggers = triggers;
    return this;
  }

  public IoArgoprojEventsV1alpha1SensorSpec addTriggersItem(IoArgoprojEventsV1alpha1Trigger triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
   * @return triggers
   */
  @javax.annotation.Nullable
  public List<IoArgoprojEventsV1alpha1Trigger> getTriggers() {
    return triggers;
  }

  public void setTriggers(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1Trigger> triggers) {
    this.triggers = triggers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1SensorSpec ioArgoprojEventsV1alpha1SensorSpec = (IoArgoprojEventsV1alpha1SensorSpec) o;
    return Objects.equals(this.dependencies, ioArgoprojEventsV1alpha1SensorSpec.dependencies) &&
        Objects.equals(this.errorOnFailedRound, ioArgoprojEventsV1alpha1SensorSpec.errorOnFailedRound) &&
        Objects.equals(this.eventBusName, ioArgoprojEventsV1alpha1SensorSpec.eventBusName) &&
        Objects.equals(this.loggingFields, ioArgoprojEventsV1alpha1SensorSpec.loggingFields) &&
        Objects.equals(this.replicas, ioArgoprojEventsV1alpha1SensorSpec.replicas) &&
        Objects.equals(this.revisionHistoryLimit, ioArgoprojEventsV1alpha1SensorSpec.revisionHistoryLimit) &&
        Objects.equals(this.template, ioArgoprojEventsV1alpha1SensorSpec.template) &&
        Objects.equals(this.triggers, ioArgoprojEventsV1alpha1SensorSpec.triggers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, errorOnFailedRound, eventBusName, loggingFields, replicas, revisionHistoryLimit, template, triggers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1SensorSpec {\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    errorOnFailedRound: ").append(toIndentedString(errorOnFailedRound)).append("\n");
    sb.append("    eventBusName: ").append(toIndentedString(eventBusName)).append("\n");
    sb.append("    loggingFields: ").append(toIndentedString(loggingFields)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    revisionHistoryLimit: ").append(toIndentedString(revisionHistoryLimit)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependencies");
    openapiFields.add("errorOnFailedRound");
    openapiFields.add("eventBusName");
    openapiFields.add("loggingFields");
    openapiFields.add("replicas");
    openapiFields.add("revisionHistoryLimit");
    openapiFields.add("template");
    openapiFields.add("triggers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1SensorSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1SensorSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1SensorSpec is not found in the empty JSON string", IoArgoprojEventsV1alpha1SensorSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1SensorSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1SensorSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
        if (jsonArraydependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
          }

          // validate the optional field `dependencies` (array)
          for (int i = 0; i < jsonArraydependencies.size(); i++) {
            IoArgoprojEventsV1alpha1EventDependency.validateJsonElement(jsonArraydependencies.get(i));
          };
        }
      }
      if ((jsonObj.get("eventBusName") != null && !jsonObj.get("eventBusName").isJsonNull()) && !jsonObj.get("eventBusName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventBusName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventBusName").toString()));
      }
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        IoArgoprojEventsV1alpha1Template.validateJsonElement(jsonObj.get("template"));
      }
      if (jsonObj.get("triggers") != null && !jsonObj.get("triggers").isJsonNull()) {
        JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("triggers");
        if (jsonArraytriggers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggers` to be an array in the JSON string but got `%s`", jsonObj.get("triggers").toString()));
          }

          // validate the optional field `triggers` (array)
          for (int i = 0; i < jsonArraytriggers.size(); i++) {
            IoArgoprojEventsV1alpha1Trigger.validateJsonElement(jsonArraytriggers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1SensorSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1SensorSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1SensorSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1SensorSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1SensorSpec>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1SensorSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1SensorSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1SensorSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1SensorSpec
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1SensorSpec
   */
  public static IoArgoprojEventsV1alpha1SensorSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1SensorSpec.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1SensorSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

