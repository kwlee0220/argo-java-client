/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1BasicAuth;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1WebhookContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1GerritEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1GerritEventSource {
  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1BasicAuth auth;

  public static final String SERIALIZED_NAME_DELETE_HOOK_ON_FINISH = "deleteHookOnFinish";
  @SerializedName(SERIALIZED_NAME_DELETE_HOOK_ON_FINISH)
  @javax.annotation.Nullable
  private Boolean deleteHookOnFinish;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  @javax.annotation.Nullable
  private List<String> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_GERRIT_BASE_U_R_L = "gerritBaseURL";
  @SerializedName(SERIALIZED_NAME_GERRIT_BASE_U_R_L)
  @javax.annotation.Nullable
  private String gerritBaseURL;

  public static final String SERIALIZED_NAME_HOOK_NAME = "hookName";
  @SerializedName(SERIALIZED_NAME_HOOK_NAME)
  @javax.annotation.Nullable
  private String hookName;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  @javax.annotation.Nullable
  private List<String> projects = new ArrayList<>();

  public static final String SERIALIZED_NAME_SSL_VERIFY = "sslVerify";
  @SerializedName(SERIALIZED_NAME_SSL_VERIFY)
  @javax.annotation.Nullable
  private Boolean sslVerify;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1WebhookContext webhook;

  public IoArgoprojEventsV1alpha1GerritEventSource() {
  }

  public IoArgoprojEventsV1alpha1GerritEventSource auth(@javax.annotation.Nullable IoArgoprojEventsV1alpha1BasicAuth auth) {
    this.auth = auth;
    return this;
  }

  /**
   * Get auth
   * @return auth
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1BasicAuth getAuth() {
    return auth;
  }

  public void setAuth(@javax.annotation.Nullable IoArgoprojEventsV1alpha1BasicAuth auth) {
    this.auth = auth;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource deleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
    return this;
  }

  /**
   * Get deleteHookOnFinish
   * @return deleteHookOnFinish
   */
  @javax.annotation.Nullable
  public Boolean getDeleteHookOnFinish() {
    return deleteHookOnFinish;
  }

  public void setDeleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource events(@javax.annotation.Nullable List<String> events) {
    this.events = events;
    return this;
  }

  public IoArgoprojEventsV1alpha1GerritEventSource addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(@javax.annotation.Nullable List<String> events) {
    this.events = events;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource gerritBaseURL(@javax.annotation.Nullable String gerritBaseURL) {
    this.gerritBaseURL = gerritBaseURL;
    return this;
  }

  /**
   * Get gerritBaseURL
   * @return gerritBaseURL
   */
  @javax.annotation.Nullable
  public String getGerritBaseURL() {
    return gerritBaseURL;
  }

  public void setGerritBaseURL(@javax.annotation.Nullable String gerritBaseURL) {
    this.gerritBaseURL = gerritBaseURL;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource hookName(@javax.annotation.Nullable String hookName) {
    this.hookName = hookName;
    return this;
  }

  /**
   * Get hookName
   * @return hookName
   */
  @javax.annotation.Nullable
  public String getHookName() {
    return hookName;
  }

  public void setHookName(@javax.annotation.Nullable String hookName) {
    this.hookName = hookName;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1GerritEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource projects(@javax.annotation.Nullable List<String> projects) {
    this.projects = projects;
    return this;
  }

  public IoArgoprojEventsV1alpha1GerritEventSource addProjectsItem(String projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

  /**
   * List of project namespace paths like \&quot;whynowy/test\&quot;.
   * @return projects
   */
  @javax.annotation.Nullable
  public List<String> getProjects() {
    return projects;
  }

  public void setProjects(@javax.annotation.Nullable List<String> projects) {
    this.projects = projects;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource sslVerify(@javax.annotation.Nullable Boolean sslVerify) {
    this.sslVerify = sslVerify;
    return this;
  }

  /**
   * Get sslVerify
   * @return sslVerify
   */
  @javax.annotation.Nullable
  public Boolean getSslVerify() {
    return sslVerify;
  }

  public void setSslVerify(@javax.annotation.Nullable Boolean sslVerify) {
    this.sslVerify = sslVerify;
  }


  public IoArgoprojEventsV1alpha1GerritEventSource webhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
    return this;
  }

  /**
   * Get webhook
   * @return webhook
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1WebhookContext getWebhook() {
    return webhook;
  }

  public void setWebhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1GerritEventSource ioArgoprojEventsV1alpha1GerritEventSource = (IoArgoprojEventsV1alpha1GerritEventSource) o;
    return Objects.equals(this.auth, ioArgoprojEventsV1alpha1GerritEventSource.auth) &&
        Objects.equals(this.deleteHookOnFinish, ioArgoprojEventsV1alpha1GerritEventSource.deleteHookOnFinish) &&
        Objects.equals(this.events, ioArgoprojEventsV1alpha1GerritEventSource.events) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1GerritEventSource.filter) &&
        Objects.equals(this.gerritBaseURL, ioArgoprojEventsV1alpha1GerritEventSource.gerritBaseURL) &&
        Objects.equals(this.hookName, ioArgoprojEventsV1alpha1GerritEventSource.hookName) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1GerritEventSource.metadata) &&
        Objects.equals(this.projects, ioArgoprojEventsV1alpha1GerritEventSource.projects) &&
        Objects.equals(this.sslVerify, ioArgoprojEventsV1alpha1GerritEventSource.sslVerify) &&
        Objects.equals(this.webhook, ioArgoprojEventsV1alpha1GerritEventSource.webhook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auth, deleteHookOnFinish, events, filter, gerritBaseURL, hookName, metadata, projects, sslVerify, webhook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1GerritEventSource {\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    deleteHookOnFinish: ").append(toIndentedString(deleteHookOnFinish)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    gerritBaseURL: ").append(toIndentedString(gerritBaseURL)).append("\n");
    sb.append("    hookName: ").append(toIndentedString(hookName)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    sslVerify: ").append(toIndentedString(sslVerify)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth");
    openapiFields.add("deleteHookOnFinish");
    openapiFields.add("events");
    openapiFields.add("filter");
    openapiFields.add("gerritBaseURL");
    openapiFields.add("hookName");
    openapiFields.add("metadata");
    openapiFields.add("projects");
    openapiFields.add("sslVerify");
    openapiFields.add("webhook");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1GerritEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1GerritEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1GerritEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1GerritEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1GerritEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1GerritEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `auth`
      if (jsonObj.get("auth") != null && !jsonObj.get("auth").isJsonNull()) {
        IoArgoprojEventsV1alpha1BasicAuth.validateJsonElement(jsonObj.get("auth"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull() && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("gerritBaseURL") != null && !jsonObj.get("gerritBaseURL").isJsonNull()) && !jsonObj.get("gerritBaseURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gerritBaseURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gerritBaseURL").toString()));
      }
      if ((jsonObj.get("hookName") != null && !jsonObj.get("hookName").isJsonNull()) && !jsonObj.get("hookName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hookName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hookName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull() && !jsonObj.get("projects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projects` to be an array in the JSON string but got `%s`", jsonObj.get("projects").toString()));
      }
      // validate the optional field `webhook`
      if (jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) {
        IoArgoprojEventsV1alpha1WebhookContext.validateJsonElement(jsonObj.get("webhook"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1GerritEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1GerritEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1GerritEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1GerritEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1GerritEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1GerritEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1GerritEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1GerritEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1GerritEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1GerritEventSource
   */
  public static IoArgoprojEventsV1alpha1GerritEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1GerritEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1GerritEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

