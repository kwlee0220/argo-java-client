/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1FileArtifact;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1GitArtifact;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1Resource;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1S3Artifact;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1URLArtifact;
import org.openapitools.client.model.IoK8sApiCoreV1ConfigMapKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1ArtifactLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1ArtifactLocation {
  public static final String SERIALIZED_NAME_CONFIGMAP = "configmap";
  @SerializedName(SERIALIZED_NAME_CONFIGMAP)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ConfigMapKeySelector configmap;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1FileArtifact _file;

  public static final String SERIALIZED_NAME_GIT = "git";
  @SerializedName(SERIALIZED_NAME_GIT)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1GitArtifact git;

  public static final String SERIALIZED_NAME_INLINE = "inline";
  @SerializedName(SERIALIZED_NAME_INLINE)
  @javax.annotation.Nullable
  private String inline;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1Resource resource;

  public static final String SERIALIZED_NAME_S3 = "s3";
  @SerializedName(SERIALIZED_NAME_S3)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1S3Artifact s3;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1URLArtifact url;

  public IoArgoprojEventsV1alpha1ArtifactLocation() {
  }

  public IoArgoprojEventsV1alpha1ArtifactLocation configmap(@javax.annotation.Nullable IoK8sApiCoreV1ConfigMapKeySelector configmap) {
    this.configmap = configmap;
    return this;
  }

  /**
   * Get configmap
   * @return configmap
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ConfigMapKeySelector getConfigmap() {
    return configmap;
  }

  public void setConfigmap(@javax.annotation.Nullable IoK8sApiCoreV1ConfigMapKeySelector configmap) {
    this.configmap = configmap;
  }


  public IoArgoprojEventsV1alpha1ArtifactLocation _file(@javax.annotation.Nullable IoArgoprojEventsV1alpha1FileArtifact _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1FileArtifact getFile() {
    return _file;
  }

  public void setFile(@javax.annotation.Nullable IoArgoprojEventsV1alpha1FileArtifact _file) {
    this._file = _file;
  }


  public IoArgoprojEventsV1alpha1ArtifactLocation git(@javax.annotation.Nullable IoArgoprojEventsV1alpha1GitArtifact git) {
    this.git = git;
    return this;
  }

  /**
   * Get git
   * @return git
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1GitArtifact getGit() {
    return git;
  }

  public void setGit(@javax.annotation.Nullable IoArgoprojEventsV1alpha1GitArtifact git) {
    this.git = git;
  }


  public IoArgoprojEventsV1alpha1ArtifactLocation inline(@javax.annotation.Nullable String inline) {
    this.inline = inline;
    return this;
  }

  /**
   * Get inline
   * @return inline
   */
  @javax.annotation.Nullable
  public String getInline() {
    return inline;
  }

  public void setInline(@javax.annotation.Nullable String inline) {
    this.inline = inline;
  }


  public IoArgoprojEventsV1alpha1ArtifactLocation resource(@javax.annotation.Nullable IoArgoprojEventsV1alpha1Resource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1Resource getResource() {
    return resource;
  }

  public void setResource(@javax.annotation.Nullable IoArgoprojEventsV1alpha1Resource resource) {
    this.resource = resource;
  }


  public IoArgoprojEventsV1alpha1ArtifactLocation s3(@javax.annotation.Nullable IoArgoprojEventsV1alpha1S3Artifact s3) {
    this.s3 = s3;
    return this;
  }

  /**
   * Get s3
   * @return s3
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1S3Artifact getS3() {
    return s3;
  }

  public void setS3(@javax.annotation.Nullable IoArgoprojEventsV1alpha1S3Artifact s3) {
    this.s3 = s3;
  }


  public IoArgoprojEventsV1alpha1ArtifactLocation url(@javax.annotation.Nullable IoArgoprojEventsV1alpha1URLArtifact url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1URLArtifact getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable IoArgoprojEventsV1alpha1URLArtifact url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1ArtifactLocation ioArgoprojEventsV1alpha1ArtifactLocation = (IoArgoprojEventsV1alpha1ArtifactLocation) o;
    return Objects.equals(this.configmap, ioArgoprojEventsV1alpha1ArtifactLocation.configmap) &&
        Objects.equals(this._file, ioArgoprojEventsV1alpha1ArtifactLocation._file) &&
        Objects.equals(this.git, ioArgoprojEventsV1alpha1ArtifactLocation.git) &&
        Objects.equals(this.inline, ioArgoprojEventsV1alpha1ArtifactLocation.inline) &&
        Objects.equals(this.resource, ioArgoprojEventsV1alpha1ArtifactLocation.resource) &&
        Objects.equals(this.s3, ioArgoprojEventsV1alpha1ArtifactLocation.s3) &&
        Objects.equals(this.url, ioArgoprojEventsV1alpha1ArtifactLocation.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configmap, _file, git, inline, resource, s3, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1ArtifactLocation {\n");
    sb.append("    configmap: ").append(toIndentedString(configmap)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    git: ").append(toIndentedString(git)).append("\n");
    sb.append("    inline: ").append(toIndentedString(inline)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    s3: ").append(toIndentedString(s3)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configmap");
    openapiFields.add("file");
    openapiFields.add("git");
    openapiFields.add("inline");
    openapiFields.add("resource");
    openapiFields.add("s3");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1ArtifactLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1ArtifactLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1ArtifactLocation is not found in the empty JSON string", IoArgoprojEventsV1alpha1ArtifactLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1ArtifactLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1ArtifactLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `configmap`
      if (jsonObj.get("configmap") != null && !jsonObj.get("configmap").isJsonNull()) {
        IoK8sApiCoreV1ConfigMapKeySelector.validateJsonElement(jsonObj.get("configmap"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        IoArgoprojEventsV1alpha1FileArtifact.validateJsonElement(jsonObj.get("file"));
      }
      // validate the optional field `git`
      if (jsonObj.get("git") != null && !jsonObj.get("git").isJsonNull()) {
        IoArgoprojEventsV1alpha1GitArtifact.validateJsonElement(jsonObj.get("git"));
      }
      if ((jsonObj.get("inline") != null && !jsonObj.get("inline").isJsonNull()) && !jsonObj.get("inline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inline").toString()));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        IoArgoprojEventsV1alpha1Resource.validateJsonElement(jsonObj.get("resource"));
      }
      // validate the optional field `s3`
      if (jsonObj.get("s3") != null && !jsonObj.get("s3").isJsonNull()) {
        IoArgoprojEventsV1alpha1S3Artifact.validateJsonElement(jsonObj.get("s3"));
      }
      // validate the optional field `url`
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) {
        IoArgoprojEventsV1alpha1URLArtifact.validateJsonElement(jsonObj.get("url"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1ArtifactLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1ArtifactLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1ArtifactLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1ArtifactLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1ArtifactLocation>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1ArtifactLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1ArtifactLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1ArtifactLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1ArtifactLocation
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1ArtifactLocation
   */
  public static IoArgoprojEventsV1alpha1ArtifactLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1ArtifactLocation.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1ArtifactLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

