/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoK8sApiCoreV1ExecAction;
import org.openapitools.client.model.IoK8sApiCoreV1HTTPGetAction;
import org.openapitools.client.model.IoK8sApiCoreV1SleepAction;
import org.openapitools.client.model.IoK8sApiCoreV1TCPSocketAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoK8sApiCoreV1LifecycleHandler {
  public static final String SERIALIZED_NAME_EXEC = "exec";
  @SerializedName(SERIALIZED_NAME_EXEC)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1ExecAction exec;

  public static final String SERIALIZED_NAME_HTTP_GET = "httpGet";
  @SerializedName(SERIALIZED_NAME_HTTP_GET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1HTTPGetAction httpGet;

  public static final String SERIALIZED_NAME_SLEEP = "sleep";
  @SerializedName(SERIALIZED_NAME_SLEEP)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SleepAction sleep;

  public static final String SERIALIZED_NAME_TCP_SOCKET = "tcpSocket";
  @SerializedName(SERIALIZED_NAME_TCP_SOCKET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1TCPSocketAction tcpSocket;

  public IoK8sApiCoreV1LifecycleHandler() {
  }

  public IoK8sApiCoreV1LifecycleHandler exec(@javax.annotation.Nullable IoK8sApiCoreV1ExecAction exec) {
    this.exec = exec;
    return this;
  }

  /**
   * Get exec
   * @return exec
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1ExecAction getExec() {
    return exec;
  }

  public void setExec(@javax.annotation.Nullable IoK8sApiCoreV1ExecAction exec) {
    this.exec = exec;
  }


  public IoK8sApiCoreV1LifecycleHandler httpGet(@javax.annotation.Nullable IoK8sApiCoreV1HTTPGetAction httpGet) {
    this.httpGet = httpGet;
    return this;
  }

  /**
   * Get httpGet
   * @return httpGet
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1HTTPGetAction getHttpGet() {
    return httpGet;
  }

  public void setHttpGet(@javax.annotation.Nullable IoK8sApiCoreV1HTTPGetAction httpGet) {
    this.httpGet = httpGet;
  }


  public IoK8sApiCoreV1LifecycleHandler sleep(@javax.annotation.Nullable IoK8sApiCoreV1SleepAction sleep) {
    this.sleep = sleep;
    return this;
  }

  /**
   * Get sleep
   * @return sleep
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SleepAction getSleep() {
    return sleep;
  }

  public void setSleep(@javax.annotation.Nullable IoK8sApiCoreV1SleepAction sleep) {
    this.sleep = sleep;
  }


  public IoK8sApiCoreV1LifecycleHandler tcpSocket(@javax.annotation.Nullable IoK8sApiCoreV1TCPSocketAction tcpSocket) {
    this.tcpSocket = tcpSocket;
    return this;
  }

  /**
   * Get tcpSocket
   * @return tcpSocket
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1TCPSocketAction getTcpSocket() {
    return tcpSocket;
  }

  public void setTcpSocket(@javax.annotation.Nullable IoK8sApiCoreV1TCPSocketAction tcpSocket) {
    this.tcpSocket = tcpSocket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1LifecycleHandler ioK8sApiCoreV1LifecycleHandler = (IoK8sApiCoreV1LifecycleHandler) o;
    return Objects.equals(this.exec, ioK8sApiCoreV1LifecycleHandler.exec) &&
        Objects.equals(this.httpGet, ioK8sApiCoreV1LifecycleHandler.httpGet) &&
        Objects.equals(this.sleep, ioK8sApiCoreV1LifecycleHandler.sleep) &&
        Objects.equals(this.tcpSocket, ioK8sApiCoreV1LifecycleHandler.tcpSocket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exec, httpGet, sleep, tcpSocket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1LifecycleHandler {\n");
    sb.append("    exec: ").append(toIndentedString(exec)).append("\n");
    sb.append("    httpGet: ").append(toIndentedString(httpGet)).append("\n");
    sb.append("    sleep: ").append(toIndentedString(sleep)).append("\n");
    sb.append("    tcpSocket: ").append(toIndentedString(tcpSocket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exec");
    openapiFields.add("httpGet");
    openapiFields.add("sleep");
    openapiFields.add("tcpSocket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoK8sApiCoreV1LifecycleHandler
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoK8sApiCoreV1LifecycleHandler.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoK8sApiCoreV1LifecycleHandler is not found in the empty JSON string", IoK8sApiCoreV1LifecycleHandler.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoK8sApiCoreV1LifecycleHandler.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoK8sApiCoreV1LifecycleHandler` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exec`
      if (jsonObj.get("exec") != null && !jsonObj.get("exec").isJsonNull()) {
        IoK8sApiCoreV1ExecAction.validateJsonElement(jsonObj.get("exec"));
      }
      // validate the optional field `httpGet`
      if (jsonObj.get("httpGet") != null && !jsonObj.get("httpGet").isJsonNull()) {
        IoK8sApiCoreV1HTTPGetAction.validateJsonElement(jsonObj.get("httpGet"));
      }
      // validate the optional field `sleep`
      if (jsonObj.get("sleep") != null && !jsonObj.get("sleep").isJsonNull()) {
        IoK8sApiCoreV1SleepAction.validateJsonElement(jsonObj.get("sleep"));
      }
      // validate the optional field `tcpSocket`
      if (jsonObj.get("tcpSocket") != null && !jsonObj.get("tcpSocket").isJsonNull()) {
        IoK8sApiCoreV1TCPSocketAction.validateJsonElement(jsonObj.get("tcpSocket"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoK8sApiCoreV1LifecycleHandler.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoK8sApiCoreV1LifecycleHandler' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoK8sApiCoreV1LifecycleHandler> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoK8sApiCoreV1LifecycleHandler.class));

       return (TypeAdapter<T>) new TypeAdapter<IoK8sApiCoreV1LifecycleHandler>() {
           @Override
           public void write(JsonWriter out, IoK8sApiCoreV1LifecycleHandler value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoK8sApiCoreV1LifecycleHandler read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoK8sApiCoreV1LifecycleHandler given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoK8sApiCoreV1LifecycleHandler
   * @throws IOException if the JSON string is invalid with respect to IoK8sApiCoreV1LifecycleHandler
   */
  public static IoK8sApiCoreV1LifecycleHandler fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoK8sApiCoreV1LifecycleHandler.class);
  }

  /**
   * Convert an instance of IoK8sApiCoreV1LifecycleHandler to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

