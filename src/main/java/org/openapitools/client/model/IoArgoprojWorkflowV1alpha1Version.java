/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojWorkflowV1alpha1Version
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1Version {
  public static final String SERIALIZED_NAME_BUILD_DATE = "buildDate";
  @SerializedName(SERIALIZED_NAME_BUILD_DATE)
  @javax.annotation.Nonnull
  private String buildDate;

  public static final String SERIALIZED_NAME_COMPILER = "compiler";
  @SerializedName(SERIALIZED_NAME_COMPILER)
  @javax.annotation.Nonnull
  private String compiler;

  public static final String SERIALIZED_NAME_GIT_COMMIT = "gitCommit";
  @SerializedName(SERIALIZED_NAME_GIT_COMMIT)
  @javax.annotation.Nonnull
  private String gitCommit;

  public static final String SERIALIZED_NAME_GIT_TAG = "gitTag";
  @SerializedName(SERIALIZED_NAME_GIT_TAG)
  @javax.annotation.Nonnull
  private String gitTag;

  public static final String SERIALIZED_NAME_GIT_TREE_STATE = "gitTreeState";
  @SerializedName(SERIALIZED_NAME_GIT_TREE_STATE)
  @javax.annotation.Nonnull
  private String gitTreeState;

  public static final String SERIALIZED_NAME_GO_VERSION = "goVersion";
  @SerializedName(SERIALIZED_NAME_GO_VERSION)
  @javax.annotation.Nonnull
  private String goVersion;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  @javax.annotation.Nonnull
  private String platform;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private String version;

  public IoArgoprojWorkflowV1alpha1Version() {
  }

  public IoArgoprojWorkflowV1alpha1Version buildDate(@javax.annotation.Nonnull String buildDate) {
    this.buildDate = buildDate;
    return this;
  }

  /**
   * Get buildDate
   * @return buildDate
   */
  @javax.annotation.Nonnull
  public String getBuildDate() {
    return buildDate;
  }

  public void setBuildDate(@javax.annotation.Nonnull String buildDate) {
    this.buildDate = buildDate;
  }


  public IoArgoprojWorkflowV1alpha1Version compiler(@javax.annotation.Nonnull String compiler) {
    this.compiler = compiler;
    return this;
  }

  /**
   * Get compiler
   * @return compiler
   */
  @javax.annotation.Nonnull
  public String getCompiler() {
    return compiler;
  }

  public void setCompiler(@javax.annotation.Nonnull String compiler) {
    this.compiler = compiler;
  }


  public IoArgoprojWorkflowV1alpha1Version gitCommit(@javax.annotation.Nonnull String gitCommit) {
    this.gitCommit = gitCommit;
    return this;
  }

  /**
   * Get gitCommit
   * @return gitCommit
   */
  @javax.annotation.Nonnull
  public String getGitCommit() {
    return gitCommit;
  }

  public void setGitCommit(@javax.annotation.Nonnull String gitCommit) {
    this.gitCommit = gitCommit;
  }


  public IoArgoprojWorkflowV1alpha1Version gitTag(@javax.annotation.Nonnull String gitTag) {
    this.gitTag = gitTag;
    return this;
  }

  /**
   * Get gitTag
   * @return gitTag
   */
  @javax.annotation.Nonnull
  public String getGitTag() {
    return gitTag;
  }

  public void setGitTag(@javax.annotation.Nonnull String gitTag) {
    this.gitTag = gitTag;
  }


  public IoArgoprojWorkflowV1alpha1Version gitTreeState(@javax.annotation.Nonnull String gitTreeState) {
    this.gitTreeState = gitTreeState;
    return this;
  }

  /**
   * Get gitTreeState
   * @return gitTreeState
   */
  @javax.annotation.Nonnull
  public String getGitTreeState() {
    return gitTreeState;
  }

  public void setGitTreeState(@javax.annotation.Nonnull String gitTreeState) {
    this.gitTreeState = gitTreeState;
  }


  public IoArgoprojWorkflowV1alpha1Version goVersion(@javax.annotation.Nonnull String goVersion) {
    this.goVersion = goVersion;
    return this;
  }

  /**
   * Get goVersion
   * @return goVersion
   */
  @javax.annotation.Nonnull
  public String getGoVersion() {
    return goVersion;
  }

  public void setGoVersion(@javax.annotation.Nonnull String goVersion) {
    this.goVersion = goVersion;
  }


  public IoArgoprojWorkflowV1alpha1Version platform(@javax.annotation.Nonnull String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nonnull
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(@javax.annotation.Nonnull String platform) {
    this.platform = platform;
  }


  public IoArgoprojWorkflowV1alpha1Version version(@javax.annotation.Nonnull String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1Version ioArgoprojWorkflowV1alpha1Version = (IoArgoprojWorkflowV1alpha1Version) o;
    return Objects.equals(this.buildDate, ioArgoprojWorkflowV1alpha1Version.buildDate) &&
        Objects.equals(this.compiler, ioArgoprojWorkflowV1alpha1Version.compiler) &&
        Objects.equals(this.gitCommit, ioArgoprojWorkflowV1alpha1Version.gitCommit) &&
        Objects.equals(this.gitTag, ioArgoprojWorkflowV1alpha1Version.gitTag) &&
        Objects.equals(this.gitTreeState, ioArgoprojWorkflowV1alpha1Version.gitTreeState) &&
        Objects.equals(this.goVersion, ioArgoprojWorkflowV1alpha1Version.goVersion) &&
        Objects.equals(this.platform, ioArgoprojWorkflowV1alpha1Version.platform) &&
        Objects.equals(this.version, ioArgoprojWorkflowV1alpha1Version.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildDate, compiler, gitCommit, gitTag, gitTreeState, goVersion, platform, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1Version {\n");
    sb.append("    buildDate: ").append(toIndentedString(buildDate)).append("\n");
    sb.append("    compiler: ").append(toIndentedString(compiler)).append("\n");
    sb.append("    gitCommit: ").append(toIndentedString(gitCommit)).append("\n");
    sb.append("    gitTag: ").append(toIndentedString(gitTag)).append("\n");
    sb.append("    gitTreeState: ").append(toIndentedString(gitTreeState)).append("\n");
    sb.append("    goVersion: ").append(toIndentedString(goVersion)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildDate");
    openapiFields.add("compiler");
    openapiFields.add("gitCommit");
    openapiFields.add("gitTag");
    openapiFields.add("gitTreeState");
    openapiFields.add("goVersion");
    openapiFields.add("platform");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("buildDate");
    openapiRequiredFields.add("compiler");
    openapiRequiredFields.add("gitCommit");
    openapiRequiredFields.add("gitTag");
    openapiRequiredFields.add("gitTreeState");
    openapiRequiredFields.add("goVersion");
    openapiRequiredFields.add("platform");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1Version
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1Version.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1Version is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1Version.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1Version.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1Version` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoArgoprojWorkflowV1alpha1Version.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("buildDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildDate").toString()));
      }
      if (!jsonObj.get("compiler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compiler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compiler").toString()));
      }
      if (!jsonObj.get("gitCommit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitCommit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitCommit").toString()));
      }
      if (!jsonObj.get("gitTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitTag").toString()));
      }
      if (!jsonObj.get("gitTreeState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitTreeState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitTreeState").toString()));
      }
      if (!jsonObj.get("goVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goVersion").toString()));
      }
      if (!jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1Version.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1Version' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1Version> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1Version.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1Version>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1Version value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1Version read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1Version given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1Version
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1Version
   */
  public static IoArgoprojWorkflowV1alpha1Version fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1Version.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1Version to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

