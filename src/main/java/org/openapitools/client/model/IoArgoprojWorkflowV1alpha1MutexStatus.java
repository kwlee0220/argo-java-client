/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1MutexHolding;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MutexStatus contains which objects hold  mutex locks, and which objects this workflow is waiting on to release locks.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1MutexStatus {
  public static final String SERIALIZED_NAME_HOLDING = "holding";
  @SerializedName(SERIALIZED_NAME_HOLDING)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1MutexHolding> holding = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAITING = "waiting";
  @SerializedName(SERIALIZED_NAME_WAITING)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1MutexHolding> waiting = new ArrayList<>();

  public IoArgoprojWorkflowV1alpha1MutexStatus() {
  }

  public IoArgoprojWorkflowV1alpha1MutexStatus holding(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1MutexHolding> holding) {
    this.holding = holding;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1MutexStatus addHoldingItem(IoArgoprojWorkflowV1alpha1MutexHolding holdingItem) {
    if (this.holding == null) {
      this.holding = new ArrayList<>();
    }
    this.holding.add(holdingItem);
    return this;
  }

  /**
   * Holding is a list of mutexes and their respective objects that are held by mutex lock for this io.argoproj.workflow.v1alpha1.
   * @return holding
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1MutexHolding> getHolding() {
    return holding;
  }

  public void setHolding(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1MutexHolding> holding) {
    this.holding = holding;
  }


  public IoArgoprojWorkflowV1alpha1MutexStatus waiting(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1MutexHolding> waiting) {
    this.waiting = waiting;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1MutexStatus addWaitingItem(IoArgoprojWorkflowV1alpha1MutexHolding waitingItem) {
    if (this.waiting == null) {
      this.waiting = new ArrayList<>();
    }
    this.waiting.add(waitingItem);
    return this;
  }

  /**
   * Waiting is a list of mutexes and their respective objects this workflow is waiting for.
   * @return waiting
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1MutexHolding> getWaiting() {
    return waiting;
  }

  public void setWaiting(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1MutexHolding> waiting) {
    this.waiting = waiting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1MutexStatus ioArgoprojWorkflowV1alpha1MutexStatus = (IoArgoprojWorkflowV1alpha1MutexStatus) o;
    return Objects.equals(this.holding, ioArgoprojWorkflowV1alpha1MutexStatus.holding) &&
        Objects.equals(this.waiting, ioArgoprojWorkflowV1alpha1MutexStatus.waiting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holding, waiting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1MutexStatus {\n");
    sb.append("    holding: ").append(toIndentedString(holding)).append("\n");
    sb.append("    waiting: ").append(toIndentedString(waiting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("holding");
    openapiFields.add("waiting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1MutexStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1MutexStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1MutexStatus is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1MutexStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1MutexStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1MutexStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("holding") != null && !jsonObj.get("holding").isJsonNull()) {
        JsonArray jsonArrayholding = jsonObj.getAsJsonArray("holding");
        if (jsonArrayholding != null) {
          // ensure the json data is an array
          if (!jsonObj.get("holding").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `holding` to be an array in the JSON string but got `%s`", jsonObj.get("holding").toString()));
          }

          // validate the optional field `holding` (array)
          for (int i = 0; i < jsonArrayholding.size(); i++) {
            IoArgoprojWorkflowV1alpha1MutexHolding.validateJsonElement(jsonArrayholding.get(i));
          };
        }
      }
      if (jsonObj.get("waiting") != null && !jsonObj.get("waiting").isJsonNull()) {
        JsonArray jsonArraywaiting = jsonObj.getAsJsonArray("waiting");
        if (jsonArraywaiting != null) {
          // ensure the json data is an array
          if (!jsonObj.get("waiting").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `waiting` to be an array in the JSON string but got `%s`", jsonObj.get("waiting").toString()));
          }

          // validate the optional field `waiting` (array)
          for (int i = 0; i < jsonArraywaiting.size(); i++) {
            IoArgoprojWorkflowV1alpha1MutexHolding.validateJsonElement(jsonArraywaiting.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1MutexStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1MutexStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1MutexStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1MutexStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1MutexStatus>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1MutexStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1MutexStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1MutexStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1MutexStatus
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1MutexStatus
   */
  public static IoArgoprojWorkflowV1alpha1MutexStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1MutexStatus.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1MutexStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

