/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1BitbucketServerRepository;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1TLSConfig;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1WebhookContext;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1BitbucketServerEventSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1BitbucketServerEventSource {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector accessToken;

  public static final String SERIALIZED_NAME_BITBUCKETSERVER_BASE_U_R_L = "bitbucketserverBaseURL";
  @SerializedName(SERIALIZED_NAME_BITBUCKETSERVER_BASE_U_R_L)
  @javax.annotation.Nullable
  private String bitbucketserverBaseURL;

  public static final String SERIALIZED_NAME_DELETE_HOOK_ON_FINISH = "deleteHookOnFinish";
  @SerializedName(SERIALIZED_NAME_DELETE_HOOK_ON_FINISH)
  @javax.annotation.Nullable
  private Boolean deleteHookOnFinish;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  @javax.annotation.Nullable
  private List<String> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1EventSourceFilter filter;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  @javax.annotation.Nullable
  private String projectKey;

  public static final String SERIALIZED_NAME_REPOSITORIES = "repositories";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES)
  @javax.annotation.Nullable
  private List<IoArgoprojEventsV1alpha1BitbucketServerRepository> repositories = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPOSITORY_SLUG = "repositorySlug";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SLUG)
  @javax.annotation.Nullable
  private String repositorySlug;

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1TLSConfig tls;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  @javax.annotation.Nullable
  private IoArgoprojEventsV1alpha1WebhookContext webhook;

  public static final String SERIALIZED_NAME_WEBHOOK_SECRET = "webhookSecret";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_SECRET)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1SecretKeySelector webhookSecret;

  public IoArgoprojEventsV1alpha1BitbucketServerEventSource() {
  }

  public IoArgoprojEventsV1alpha1BitbucketServerEventSource accessToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Get accessToken
   * @return accessToken
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector accessToken) {
    this.accessToken = accessToken;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource bitbucketserverBaseURL(@javax.annotation.Nullable String bitbucketserverBaseURL) {
    this.bitbucketserverBaseURL = bitbucketserverBaseURL;
    return this;
  }

  /**
   * Get bitbucketserverBaseURL
   * @return bitbucketserverBaseURL
   */
  @javax.annotation.Nullable
  public String getBitbucketserverBaseURL() {
    return bitbucketserverBaseURL;
  }

  public void setBitbucketserverBaseURL(@javax.annotation.Nullable String bitbucketserverBaseURL) {
    this.bitbucketserverBaseURL = bitbucketserverBaseURL;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource deleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
    return this;
  }

  /**
   * Get deleteHookOnFinish
   * @return deleteHookOnFinish
   */
  @javax.annotation.Nullable
  public Boolean getDeleteHookOnFinish() {
    return deleteHookOnFinish;
  }

  public void setDeleteHookOnFinish(@javax.annotation.Nullable Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource events(@javax.annotation.Nullable List<String> events) {
    this.events = events;
    return this;
  }

  public IoArgoprojEventsV1alpha1BitbucketServerEventSource addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(@javax.annotation.Nullable List<String> events) {
    this.events = events;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource filter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1BitbucketServerEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource projectKey(@javax.annotation.Nullable String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

  /**
   * Get projectKey
   * @return projectKey
   */
  @javax.annotation.Nullable
  public String getProjectKey() {
    return projectKey;
  }

  public void setProjectKey(@javax.annotation.Nullable String projectKey) {
    this.projectKey = projectKey;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource repositories(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1BitbucketServerRepository> repositories) {
    this.repositories = repositories;
    return this;
  }

  public IoArgoprojEventsV1alpha1BitbucketServerEventSource addRepositoriesItem(IoArgoprojEventsV1alpha1BitbucketServerRepository repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new ArrayList<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

  /**
   * Get repositories
   * @return repositories
   */
  @javax.annotation.Nullable
  public List<IoArgoprojEventsV1alpha1BitbucketServerRepository> getRepositories() {
    return repositories;
  }

  public void setRepositories(@javax.annotation.Nullable List<IoArgoprojEventsV1alpha1BitbucketServerRepository> repositories) {
    this.repositories = repositories;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource repositorySlug(@javax.annotation.Nullable String repositorySlug) {
    this.repositorySlug = repositorySlug;
    return this;
  }

  /**
   * Get repositorySlug
   * @return repositorySlug
   */
  @javax.annotation.Nullable
  public String getRepositorySlug() {
    return repositorySlug;
  }

  public void setRepositorySlug(@javax.annotation.Nullable String repositorySlug) {
    this.repositorySlug = repositorySlug;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource tls(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TLSConfig tls) {
    this.tls = tls;
    return this;
  }

  /**
   * Get tls
   * @return tls
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1TLSConfig getTls() {
    return tls;
  }

  public void setTls(@javax.annotation.Nullable IoArgoprojEventsV1alpha1TLSConfig tls) {
    this.tls = tls;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource webhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
    return this;
  }

  /**
   * Get webhook
   * @return webhook
   */
  @javax.annotation.Nullable
  public IoArgoprojEventsV1alpha1WebhookContext getWebhook() {
    return webhook;
  }

  public void setWebhook(@javax.annotation.Nullable IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
  }


  public IoArgoprojEventsV1alpha1BitbucketServerEventSource webhookSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector webhookSecret) {
    this.webhookSecret = webhookSecret;
    return this;
  }

  /**
   * Get webhookSecret
   * @return webhookSecret
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1SecretKeySelector getWebhookSecret() {
    return webhookSecret;
  }

  public void setWebhookSecret(@javax.annotation.Nullable IoK8sApiCoreV1SecretKeySelector webhookSecret) {
    this.webhookSecret = webhookSecret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1BitbucketServerEventSource ioArgoprojEventsV1alpha1BitbucketServerEventSource = (IoArgoprojEventsV1alpha1BitbucketServerEventSource) o;
    return Objects.equals(this.accessToken, ioArgoprojEventsV1alpha1BitbucketServerEventSource.accessToken) &&
        Objects.equals(this.bitbucketserverBaseURL, ioArgoprojEventsV1alpha1BitbucketServerEventSource.bitbucketserverBaseURL) &&
        Objects.equals(this.deleteHookOnFinish, ioArgoprojEventsV1alpha1BitbucketServerEventSource.deleteHookOnFinish) &&
        Objects.equals(this.events, ioArgoprojEventsV1alpha1BitbucketServerEventSource.events) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1BitbucketServerEventSource.filter) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1BitbucketServerEventSource.metadata) &&
        Objects.equals(this.projectKey, ioArgoprojEventsV1alpha1BitbucketServerEventSource.projectKey) &&
        Objects.equals(this.repositories, ioArgoprojEventsV1alpha1BitbucketServerEventSource.repositories) &&
        Objects.equals(this.repositorySlug, ioArgoprojEventsV1alpha1BitbucketServerEventSource.repositorySlug) &&
        Objects.equals(this.tls, ioArgoprojEventsV1alpha1BitbucketServerEventSource.tls) &&
        Objects.equals(this.webhook, ioArgoprojEventsV1alpha1BitbucketServerEventSource.webhook) &&
        Objects.equals(this.webhookSecret, ioArgoprojEventsV1alpha1BitbucketServerEventSource.webhookSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, bitbucketserverBaseURL, deleteHookOnFinish, events, filter, metadata, projectKey, repositories, repositorySlug, tls, webhook, webhookSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1BitbucketServerEventSource {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    bitbucketserverBaseURL: ").append(toIndentedString(bitbucketserverBaseURL)).append("\n");
    sb.append("    deleteHookOnFinish: ").append(toIndentedString(deleteHookOnFinish)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    repositorySlug: ").append(toIndentedString(repositorySlug)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    webhookSecret: ").append(toIndentedString(webhookSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessToken");
    openapiFields.add("bitbucketserverBaseURL");
    openapiFields.add("deleteHookOnFinish");
    openapiFields.add("events");
    openapiFields.add("filter");
    openapiFields.add("metadata");
    openapiFields.add("projectKey");
    openapiFields.add("repositories");
    openapiFields.add("repositorySlug");
    openapiFields.add("tls");
    openapiFields.add("webhook");
    openapiFields.add("webhookSecret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1BitbucketServerEventSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1BitbucketServerEventSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1BitbucketServerEventSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1BitbucketServerEventSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1BitbucketServerEventSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1BitbucketServerEventSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessToken`
      if (jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("accessToken"));
      }
      if ((jsonObj.get("bitbucketserverBaseURL") != null && !jsonObj.get("bitbucketserverBaseURL").isJsonNull()) && !jsonObj.get("bitbucketserverBaseURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bitbucketserverBaseURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bitbucketserverBaseURL").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull() && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        IoArgoprojEventsV1alpha1EventSourceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("projectKey") != null && !jsonObj.get("projectKey").isJsonNull()) && !jsonObj.get("projectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectKey").toString()));
      }
      if (jsonObj.get("repositories") != null && !jsonObj.get("repositories").isJsonNull()) {
        JsonArray jsonArrayrepositories = jsonObj.getAsJsonArray("repositories");
        if (jsonArrayrepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repositories` to be an array in the JSON string but got `%s`", jsonObj.get("repositories").toString()));
          }

          // validate the optional field `repositories` (array)
          for (int i = 0; i < jsonArrayrepositories.size(); i++) {
            IoArgoprojEventsV1alpha1BitbucketServerRepository.validateJsonElement(jsonArrayrepositories.get(i));
          };
        }
      }
      if ((jsonObj.get("repositorySlug") != null && !jsonObj.get("repositorySlug").isJsonNull()) && !jsonObj.get("repositorySlug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositorySlug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositorySlug").toString()));
      }
      // validate the optional field `tls`
      if (jsonObj.get("tls") != null && !jsonObj.get("tls").isJsonNull()) {
        IoArgoprojEventsV1alpha1TLSConfig.validateJsonElement(jsonObj.get("tls"));
      }
      // validate the optional field `webhook`
      if (jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) {
        IoArgoprojEventsV1alpha1WebhookContext.validateJsonElement(jsonObj.get("webhook"));
      }
      // validate the optional field `webhookSecret`
      if (jsonObj.get("webhookSecret") != null && !jsonObj.get("webhookSecret").isJsonNull()) {
        IoK8sApiCoreV1SecretKeySelector.validateJsonElement(jsonObj.get("webhookSecret"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1BitbucketServerEventSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1BitbucketServerEventSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1BitbucketServerEventSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1BitbucketServerEventSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1BitbucketServerEventSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1BitbucketServerEventSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1BitbucketServerEventSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1BitbucketServerEventSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1BitbucketServerEventSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1BitbucketServerEventSource
   */
  public static IoArgoprojEventsV1alpha1BitbucketServerEventSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1BitbucketServerEventSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1BitbucketServerEventSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

