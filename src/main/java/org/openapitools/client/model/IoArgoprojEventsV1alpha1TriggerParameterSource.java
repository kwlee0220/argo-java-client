/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoArgoprojEventsV1alpha1TriggerParameterSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojEventsV1alpha1TriggerParameterSource {
  public static final String SERIALIZED_NAME_CONTEXT_KEY = "contextKey";
  @SerializedName(SERIALIZED_NAME_CONTEXT_KEY)
  @javax.annotation.Nullable
  private String contextKey;

  public static final String SERIALIZED_NAME_CONTEXT_TEMPLATE = "contextTemplate";
  @SerializedName(SERIALIZED_NAME_CONTEXT_TEMPLATE)
  @javax.annotation.Nullable
  private String contextTemplate;

  public static final String SERIALIZED_NAME_DATA_KEY = "dataKey";
  @SerializedName(SERIALIZED_NAME_DATA_KEY)
  @javax.annotation.Nullable
  private String dataKey;

  public static final String SERIALIZED_NAME_DATA_TEMPLATE = "dataTemplate";
  @SerializedName(SERIALIZED_NAME_DATA_TEMPLATE)
  @javax.annotation.Nullable
  private String dataTemplate;

  public static final String SERIALIZED_NAME_DEPENDENCY_NAME = "dependencyName";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_NAME)
  @javax.annotation.Nullable
  private String dependencyName;

  public static final String SERIALIZED_NAME_USE_RAW_DATA = "useRawData";
  @SerializedName(SERIALIZED_NAME_USE_RAW_DATA)
  @javax.annotation.Nullable
  private Boolean useRawData;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public IoArgoprojEventsV1alpha1TriggerParameterSource() {
  }

  public IoArgoprojEventsV1alpha1TriggerParameterSource contextKey(@javax.annotation.Nullable String contextKey) {
    this.contextKey = contextKey;
    return this;
  }

  /**
   * ContextKey is the JSONPath of the event&#39;s (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters &#39;*&#39; and &#39;?&#39;. To access an array value use the index as the key. The dot and wildcard characters can be escaped with &#39;\\\\&#39;. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
   * @return contextKey
   */
  @javax.annotation.Nullable
  public String getContextKey() {
    return contextKey;
  }

  public void setContextKey(@javax.annotation.Nullable String contextKey) {
    this.contextKey = contextKey;
  }


  public IoArgoprojEventsV1alpha1TriggerParameterSource contextTemplate(@javax.annotation.Nullable String contextTemplate) {
    this.contextTemplate = contextTemplate;
    return this;
  }

  /**
   * Get contextTemplate
   * @return contextTemplate
   */
  @javax.annotation.Nullable
  public String getContextTemplate() {
    return contextTemplate;
  }

  public void setContextTemplate(@javax.annotation.Nullable String contextTemplate) {
    this.contextTemplate = contextTemplate;
  }


  public IoArgoprojEventsV1alpha1TriggerParameterSource dataKey(@javax.annotation.Nullable String dataKey) {
    this.dataKey = dataKey;
    return this;
  }

  /**
   * DataKey is the JSONPath of the event&#39;s (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters &#39;*&#39; and &#39;?&#39;. To access an array value use the index as the key. The dot and wildcard characters can be escaped with &#39;\\\\&#39;. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
   * @return dataKey
   */
  @javax.annotation.Nullable
  public String getDataKey() {
    return dataKey;
  }

  public void setDataKey(@javax.annotation.Nullable String dataKey) {
    this.dataKey = dataKey;
  }


  public IoArgoprojEventsV1alpha1TriggerParameterSource dataTemplate(@javax.annotation.Nullable String dataTemplate) {
    this.dataTemplate = dataTemplate;
    return this;
  }

  /**
   * Get dataTemplate
   * @return dataTemplate
   */
  @javax.annotation.Nullable
  public String getDataTemplate() {
    return dataTemplate;
  }

  public void setDataTemplate(@javax.annotation.Nullable String dataTemplate) {
    this.dataTemplate = dataTemplate;
  }


  public IoArgoprojEventsV1alpha1TriggerParameterSource dependencyName(@javax.annotation.Nullable String dependencyName) {
    this.dependencyName = dependencyName;
    return this;
  }

  /**
   * DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.
   * @return dependencyName
   */
  @javax.annotation.Nullable
  public String getDependencyName() {
    return dependencyName;
  }

  public void setDependencyName(@javax.annotation.Nullable String dependencyName) {
    this.dependencyName = dependencyName;
  }


  public IoArgoprojEventsV1alpha1TriggerParameterSource useRawData(@javax.annotation.Nullable Boolean useRawData) {
    this.useRawData = useRawData;
    return this;
  }

  /**
   * Get useRawData
   * @return useRawData
   */
  @javax.annotation.Nullable
  public Boolean getUseRawData() {
    return useRawData;
  }

  public void setUseRawData(@javax.annotation.Nullable Boolean useRawData) {
    this.useRawData = useRawData;
  }


  public IoArgoprojEventsV1alpha1TriggerParameterSource value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1TriggerParameterSource ioArgoprojEventsV1alpha1TriggerParameterSource = (IoArgoprojEventsV1alpha1TriggerParameterSource) o;
    return Objects.equals(this.contextKey, ioArgoprojEventsV1alpha1TriggerParameterSource.contextKey) &&
        Objects.equals(this.contextTemplate, ioArgoprojEventsV1alpha1TriggerParameterSource.contextTemplate) &&
        Objects.equals(this.dataKey, ioArgoprojEventsV1alpha1TriggerParameterSource.dataKey) &&
        Objects.equals(this.dataTemplate, ioArgoprojEventsV1alpha1TriggerParameterSource.dataTemplate) &&
        Objects.equals(this.dependencyName, ioArgoprojEventsV1alpha1TriggerParameterSource.dependencyName) &&
        Objects.equals(this.useRawData, ioArgoprojEventsV1alpha1TriggerParameterSource.useRawData) &&
        Objects.equals(this.value, ioArgoprojEventsV1alpha1TriggerParameterSource.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextKey, contextTemplate, dataKey, dataTemplate, dependencyName, useRawData, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1TriggerParameterSource {\n");
    sb.append("    contextKey: ").append(toIndentedString(contextKey)).append("\n");
    sb.append("    contextTemplate: ").append(toIndentedString(contextTemplate)).append("\n");
    sb.append("    dataKey: ").append(toIndentedString(dataKey)).append("\n");
    sb.append("    dataTemplate: ").append(toIndentedString(dataTemplate)).append("\n");
    sb.append("    dependencyName: ").append(toIndentedString(dependencyName)).append("\n");
    sb.append("    useRawData: ").append(toIndentedString(useRawData)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contextKey");
    openapiFields.add("contextTemplate");
    openapiFields.add("dataKey");
    openapiFields.add("dataTemplate");
    openapiFields.add("dependencyName");
    openapiFields.add("useRawData");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojEventsV1alpha1TriggerParameterSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojEventsV1alpha1TriggerParameterSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojEventsV1alpha1TriggerParameterSource is not found in the empty JSON string", IoArgoprojEventsV1alpha1TriggerParameterSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojEventsV1alpha1TriggerParameterSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojEventsV1alpha1TriggerParameterSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contextKey") != null && !jsonObj.get("contextKey").isJsonNull()) && !jsonObj.get("contextKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextKey").toString()));
      }
      if ((jsonObj.get("contextTemplate") != null && !jsonObj.get("contextTemplate").isJsonNull()) && !jsonObj.get("contextTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextTemplate").toString()));
      }
      if ((jsonObj.get("dataKey") != null && !jsonObj.get("dataKey").isJsonNull()) && !jsonObj.get("dataKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataKey").toString()));
      }
      if ((jsonObj.get("dataTemplate") != null && !jsonObj.get("dataTemplate").isJsonNull()) && !jsonObj.get("dataTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataTemplate").toString()));
      }
      if ((jsonObj.get("dependencyName") != null && !jsonObj.get("dependencyName").isJsonNull()) && !jsonObj.get("dependencyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependencyName").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojEventsV1alpha1TriggerParameterSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojEventsV1alpha1TriggerParameterSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojEventsV1alpha1TriggerParameterSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojEventsV1alpha1TriggerParameterSource.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojEventsV1alpha1TriggerParameterSource>() {
           @Override
           public void write(JsonWriter out, IoArgoprojEventsV1alpha1TriggerParameterSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojEventsV1alpha1TriggerParameterSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojEventsV1alpha1TriggerParameterSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojEventsV1alpha1TriggerParameterSource
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojEventsV1alpha1TriggerParameterSource
   */
  public static IoArgoprojEventsV1alpha1TriggerParameterSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojEventsV1alpha1TriggerParameterSource.class);
  }

  /**
   * Convert an instance of IoArgoprojEventsV1alpha1TriggerParameterSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

