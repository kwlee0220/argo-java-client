/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Counter;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Gauge;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1Histogram;
import org.openapitools.client.model.IoArgoprojWorkflowV1alpha1MetricLabel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Prometheus is a prometheus metric to be emitted
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoArgoprojWorkflowV1alpha1Prometheus {
  public static final String SERIALIZED_NAME_COUNTER = "counter";
  @SerializedName(SERIALIZED_NAME_COUNTER)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1Counter counter;

  public static final String SERIALIZED_NAME_GAUGE = "gauge";
  @SerializedName(SERIALIZED_NAME_GAUGE)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1Gauge gauge;

  public static final String SERIALIZED_NAME_HELP = "help";
  @SerializedName(SERIALIZED_NAME_HELP)
  @javax.annotation.Nonnull
  private String help;

  public static final String SERIALIZED_NAME_HISTOGRAM = "histogram";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM)
  @javax.annotation.Nullable
  private IoArgoprojWorkflowV1alpha1Histogram histogram;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  @javax.annotation.Nullable
  private List<IoArgoprojWorkflowV1alpha1MetricLabel> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_WHEN = "when";
  @SerializedName(SERIALIZED_NAME_WHEN)
  @javax.annotation.Nullable
  private String when;

  public IoArgoprojWorkflowV1alpha1Prometheus() {
  }

  public IoArgoprojWorkflowV1alpha1Prometheus counter(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Counter counter) {
    this.counter = counter;
    return this;
  }

  /**
   * Get counter
   * @return counter
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1Counter getCounter() {
    return counter;
  }

  public void setCounter(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Counter counter) {
    this.counter = counter;
  }


  public IoArgoprojWorkflowV1alpha1Prometheus gauge(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Gauge gauge) {
    this.gauge = gauge;
    return this;
  }

  /**
   * Get gauge
   * @return gauge
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1Gauge getGauge() {
    return gauge;
  }

  public void setGauge(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Gauge gauge) {
    this.gauge = gauge;
  }


  public IoArgoprojWorkflowV1alpha1Prometheus help(@javax.annotation.Nonnull String help) {
    this.help = help;
    return this;
  }

  /**
   * Help is a string that describes the metric
   * @return help
   */
  @javax.annotation.Nonnull
  public String getHelp() {
    return help;
  }

  public void setHelp(@javax.annotation.Nonnull String help) {
    this.help = help;
  }


  public IoArgoprojWorkflowV1alpha1Prometheus histogram(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Histogram histogram) {
    this.histogram = histogram;
    return this;
  }

  /**
   * Get histogram
   * @return histogram
   */
  @javax.annotation.Nullable
  public IoArgoprojWorkflowV1alpha1Histogram getHistogram() {
    return histogram;
  }

  public void setHistogram(@javax.annotation.Nullable IoArgoprojWorkflowV1alpha1Histogram histogram) {
    this.histogram = histogram;
  }


  public IoArgoprojWorkflowV1alpha1Prometheus labels(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1MetricLabel> labels) {
    this.labels = labels;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1Prometheus addLabelsItem(IoArgoprojWorkflowV1alpha1MetricLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Labels is a list of metric labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<IoArgoprojWorkflowV1alpha1MetricLabel> getLabels() {
    return labels;
  }

  public void setLabels(@javax.annotation.Nullable List<IoArgoprojWorkflowV1alpha1MetricLabel> labels) {
    this.labels = labels;
  }


  public IoArgoprojWorkflowV1alpha1Prometheus name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name is the name of the metric
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public IoArgoprojWorkflowV1alpha1Prometheus when(@javax.annotation.Nullable String when) {
    this.when = when;
    return this;
  }

  /**
   * When is a conditional statement that decides when to emit the metric
   * @return when
   */
  @javax.annotation.Nullable
  public String getWhen() {
    return when;
  }

  public void setWhen(@javax.annotation.Nullable String when) {
    this.when = when;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1Prometheus ioArgoprojWorkflowV1alpha1Prometheus = (IoArgoprojWorkflowV1alpha1Prometheus) o;
    return Objects.equals(this.counter, ioArgoprojWorkflowV1alpha1Prometheus.counter) &&
        Objects.equals(this.gauge, ioArgoprojWorkflowV1alpha1Prometheus.gauge) &&
        Objects.equals(this.help, ioArgoprojWorkflowV1alpha1Prometheus.help) &&
        Objects.equals(this.histogram, ioArgoprojWorkflowV1alpha1Prometheus.histogram) &&
        Objects.equals(this.labels, ioArgoprojWorkflowV1alpha1Prometheus.labels) &&
        Objects.equals(this.name, ioArgoprojWorkflowV1alpha1Prometheus.name) &&
        Objects.equals(this.when, ioArgoprojWorkflowV1alpha1Prometheus.when);
  }

  @Override
  public int hashCode() {
    return Objects.hash(counter, gauge, help, histogram, labels, name, when);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1Prometheus {\n");
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("    gauge: ").append(toIndentedString(gauge)).append("\n");
    sb.append("    help: ").append(toIndentedString(help)).append("\n");
    sb.append("    histogram: ").append(toIndentedString(histogram)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    when: ").append(toIndentedString(when)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("counter");
    openapiFields.add("gauge");
    openapiFields.add("help");
    openapiFields.add("histogram");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("when");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("help");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoArgoprojWorkflowV1alpha1Prometheus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoArgoprojWorkflowV1alpha1Prometheus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoArgoprojWorkflowV1alpha1Prometheus is not found in the empty JSON string", IoArgoprojWorkflowV1alpha1Prometheus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoArgoprojWorkflowV1alpha1Prometheus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoArgoprojWorkflowV1alpha1Prometheus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoArgoprojWorkflowV1alpha1Prometheus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `counter`
      if (jsonObj.get("counter") != null && !jsonObj.get("counter").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1Counter.validateJsonElement(jsonObj.get("counter"));
      }
      // validate the optional field `gauge`
      if (jsonObj.get("gauge") != null && !jsonObj.get("gauge").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1Gauge.validateJsonElement(jsonObj.get("gauge"));
      }
      if (!jsonObj.get("help").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help").toString()));
      }
      // validate the optional field `histogram`
      if (jsonObj.get("histogram") != null && !jsonObj.get("histogram").isJsonNull()) {
        IoArgoprojWorkflowV1alpha1Histogram.validateJsonElement(jsonObj.get("histogram"));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            IoArgoprojWorkflowV1alpha1MetricLabel.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("when") != null && !jsonObj.get("when").isJsonNull()) && !jsonObj.get("when").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `when` to be a primitive type in the JSON string but got `%s`", jsonObj.get("when").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoArgoprojWorkflowV1alpha1Prometheus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoArgoprojWorkflowV1alpha1Prometheus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoArgoprojWorkflowV1alpha1Prometheus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoArgoprojWorkflowV1alpha1Prometheus.class));

       return (TypeAdapter<T>) new TypeAdapter<IoArgoprojWorkflowV1alpha1Prometheus>() {
           @Override
           public void write(JsonWriter out, IoArgoprojWorkflowV1alpha1Prometheus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoArgoprojWorkflowV1alpha1Prometheus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoArgoprojWorkflowV1alpha1Prometheus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoArgoprojWorkflowV1alpha1Prometheus
   * @throws IOException if the JSON string is invalid with respect to IoArgoprojWorkflowV1alpha1Prometheus
   */
  public static IoArgoprojWorkflowV1alpha1Prometheus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoArgoprojWorkflowV1alpha1Prometheus.class);
  }

  /**
   * Convert an instance of IoArgoprojWorkflowV1alpha1Prometheus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

