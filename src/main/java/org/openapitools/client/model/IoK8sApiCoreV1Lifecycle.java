/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoK8sApiCoreV1LifecycleHandler;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T03:51:41.763920791Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class IoK8sApiCoreV1Lifecycle {
  public static final String SERIALIZED_NAME_POST_START = "postStart";
  @SerializedName(SERIALIZED_NAME_POST_START)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1LifecycleHandler postStart;

  public static final String SERIALIZED_NAME_PRE_STOP = "preStop";
  @SerializedName(SERIALIZED_NAME_PRE_STOP)
  @javax.annotation.Nullable
  private IoK8sApiCoreV1LifecycleHandler preStop;

  public IoK8sApiCoreV1Lifecycle() {
  }

  public IoK8sApiCoreV1Lifecycle postStart(@javax.annotation.Nullable IoK8sApiCoreV1LifecycleHandler postStart) {
    this.postStart = postStart;
    return this;
  }

  /**
   * Get postStart
   * @return postStart
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1LifecycleHandler getPostStart() {
    return postStart;
  }

  public void setPostStart(@javax.annotation.Nullable IoK8sApiCoreV1LifecycleHandler postStart) {
    this.postStart = postStart;
  }


  public IoK8sApiCoreV1Lifecycle preStop(@javax.annotation.Nullable IoK8sApiCoreV1LifecycleHandler preStop) {
    this.preStop = preStop;
    return this;
  }

  /**
   * Get preStop
   * @return preStop
   */
  @javax.annotation.Nullable
  public IoK8sApiCoreV1LifecycleHandler getPreStop() {
    return preStop;
  }

  public void setPreStop(@javax.annotation.Nullable IoK8sApiCoreV1LifecycleHandler preStop) {
    this.preStop = preStop;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1Lifecycle ioK8sApiCoreV1Lifecycle = (IoK8sApiCoreV1Lifecycle) o;
    return Objects.equals(this.postStart, ioK8sApiCoreV1Lifecycle.postStart) &&
        Objects.equals(this.preStop, ioK8sApiCoreV1Lifecycle.preStop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(postStart, preStop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1Lifecycle {\n");
    sb.append("    postStart: ").append(toIndentedString(postStart)).append("\n");
    sb.append("    preStop: ").append(toIndentedString(preStop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("postStart");
    openapiFields.add("preStop");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoK8sApiCoreV1Lifecycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoK8sApiCoreV1Lifecycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoK8sApiCoreV1Lifecycle is not found in the empty JSON string", IoK8sApiCoreV1Lifecycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoK8sApiCoreV1Lifecycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoK8sApiCoreV1Lifecycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `postStart`
      if (jsonObj.get("postStart") != null && !jsonObj.get("postStart").isJsonNull()) {
        IoK8sApiCoreV1LifecycleHandler.validateJsonElement(jsonObj.get("postStart"));
      }
      // validate the optional field `preStop`
      if (jsonObj.get("preStop") != null && !jsonObj.get("preStop").isJsonNull()) {
        IoK8sApiCoreV1LifecycleHandler.validateJsonElement(jsonObj.get("preStop"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoK8sApiCoreV1Lifecycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoK8sApiCoreV1Lifecycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoK8sApiCoreV1Lifecycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoK8sApiCoreV1Lifecycle.class));

       return (TypeAdapter<T>) new TypeAdapter<IoK8sApiCoreV1Lifecycle>() {
           @Override
           public void write(JsonWriter out, IoK8sApiCoreV1Lifecycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoK8sApiCoreV1Lifecycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoK8sApiCoreV1Lifecycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoK8sApiCoreV1Lifecycle
   * @throws IOException if the JSON string is invalid with respect to IoK8sApiCoreV1Lifecycle
   */
  public static IoK8sApiCoreV1Lifecycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoK8sApiCoreV1Lifecycle.class);
  }

  /**
   * Convert an instance of IoK8sApiCoreV1Lifecycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

