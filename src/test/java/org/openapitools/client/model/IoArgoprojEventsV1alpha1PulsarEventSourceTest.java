/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1Backoff;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import org.openapitools.client.model.IoArgoprojEventsV1alpha1TLSConfig;
import org.openapitools.client.model.IoK8sApiCoreV1SecretKeySelector;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for IoArgoprojEventsV1alpha1PulsarEventSource
 */
public class IoArgoprojEventsV1alpha1PulsarEventSourceTest {
    private final IoArgoprojEventsV1alpha1PulsarEventSource model = new IoArgoprojEventsV1alpha1PulsarEventSource();

    /**
     * Model tests for IoArgoprojEventsV1alpha1PulsarEventSource
     */
    @Test
    public void testIoArgoprojEventsV1alpha1PulsarEventSource() {
        // TODO: test IoArgoprojEventsV1alpha1PulsarEventSource
    }

    /**
     * Test the property 'authAthenzParams'
     */
    @Test
    public void authAthenzParamsTest() {
        // TODO: test authAthenzParams
    }

    /**
     * Test the property 'authAthenzSecret'
     */
    @Test
    public void authAthenzSecretTest() {
        // TODO: test authAthenzSecret
    }

    /**
     * Test the property 'authTokenSecret'
     */
    @Test
    public void authTokenSecretTest() {
        // TODO: test authTokenSecret
    }

    /**
     * Test the property 'connectionBackoff'
     */
    @Test
    public void connectionBackoffTest() {
        // TODO: test connectionBackoff
    }

    /**
     * Test the property 'filter'
     */
    @Test
    public void filterTest() {
        // TODO: test filter
    }

    /**
     * Test the property 'jsonBody'
     */
    @Test
    public void jsonBodyTest() {
        // TODO: test jsonBody
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'tls'
     */
    @Test
    public void tlsTest() {
        // TODO: test tls
    }

    /**
     * Test the property 'tlsAllowInsecureConnection'
     */
    @Test
    public void tlsAllowInsecureConnectionTest() {
        // TODO: test tlsAllowInsecureConnection
    }

    /**
     * Test the property 'tlsTrustCertsSecret'
     */
    @Test
    public void tlsTrustCertsSecretTest() {
        // TODO: test tlsTrustCertsSecret
    }

    /**
     * Test the property 'tlsValidateHostname'
     */
    @Test
    public void tlsValidateHostnameTest() {
        // TODO: test tlsValidateHostname
    }

    /**
     * Test the property 'topics'
     */
    @Test
    public void topicsTest() {
        // TODO: test topics
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

}
